Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2014-12-04T15:57:28+13:00

====== ATmega2560 ======
Created Thursday 04 December 2014

[[[http://www.atmel.com/Images/Atmel-2549-8-bit-AVR-Microcontroller-ATmega640-1280-1281-2560-2561_datasheet.pdf|Datasheet]]] [[[http://www.atmel.com/devices/ATMEGA2560.aspx|Product Page]]]
The high-performance, low-power Atmel 8-bit AVR RISC-based microcontroller combines 256KB ISP flash memory, 8KB SRAM, 4KB EEPROM, 86 general purpose I/O lines, 32 general purpose working registers, real time counter, six flexible timer/counters with compare modes, PWM, 4 USARTs, byte oriented 2-wire serial interface, 16-channel 10-bit A/D converter, and a JTAG interface for on-chip debugging. The device achieves a throughput of 16 MIPS at 16 MHz and operates between 4.5-5.5 volts. 

**Flash**		256 KiB
**EEPROM**	4 KiB
**SRAM**		8 KiB
**Pin Count**	100
**Frequency**	16 MHz

**Timers**		6
**USART**		4
**SPI**			5
**I2C**			1
**CAN**		None
**ADC**		16x 10-bit, 15 ksps


===== GPIO =====
TODO: Description of ports, pins, and allowable config modes
eg. do the pins support pull-ups? pin-change? interrupts?

===== USART =====
The ATmega2560 has 4 USARTs available (''USART_0 .. USART_3''), and can be configured for Synchronous (SPI-like) and Asynchronous (UART) operating modes, and can also be configured for SPI operation through the SPI HAL module.

For more information see [[HAL:USART]] and [[HAL:USART:AVR]]

===== SPI =====
The ATmega2560 has 1 hardware SPI available (''SPI_0''), and an additional 4 available through the USART peripherals (''USARTSPI_0 .. USARTSPI_3'').

''SPI_0'' can be configured for both Master and Slave SPI, and has four hardware SPI pins that cannot be disabled: MISO, MOSI, SCK, and SS.
''USARTSPI_0..3'' can only be configured for Master SPI and lacks an SS pin.

For more information see [[HAL:SPI]] and [[HAL:SPI:AVR]]

===== I2C =====
TODO: Description of the I2C module and allowable config values

===== CAN =====
This target does not support CAN.

===== Fuses =====
The ATmega2560 has three Fuse bytes that determine the chip functionality.

The ''Extended Fuse Byte ''configures the Brown-out detector trigger level. 

The ''Fuse High Byte'' can configure the boot size, and enable or disable several features of interfacing with the micro-controller. These features are On-Chop Debug (OCDEN),  Joint Test Action Group (JTAGEN), Serial Programing Interface (SPIEN), Watchdog Timer always ON (WDTON) and EEPROM memory preserved through the Chip Erase (EESAVE).

The ''Fuse Low Byte ''determines how the chip is clocked. The ''CKSEL3:0 ''bits allows the user to select a Clock Source. The ''SUT1:0 ''bits can configure the start-up time of the controller. The ''CKOUT ''bit enables the system clock to be output on Port ''PE7.'' Lastly, the ''CKDIV8 ''bit gives the user the ability to divide the system clock by 8.

It is advised that the Fuse bits should not be tampered with without thoroughly being analysed. Consequences of configuring wrong values to the Fuse bits can be difficult to undo. 

For the purpose of the UAS project, the fuse bits should bit set as:

	''lfuse		      0xFF''
					''Else   0xBF (if CKOUT is mapped to PE7)''
	
	''hfuse		      0xDF''
	
	''Efuse		      0xFF''
	
To double check that these are infact the correct configurations, please check the Fuse Calculator online. http://www.engbedded.com/fusecalc/

In the case of an undesirable value in Fuse Low byte, the likely problem would be that the ISP will error while attempting to communicate with the micro controller or be unable to read the Fuse Bytes. There are two solutions to this issue, which is to either use the High Voltage Parallel Programming method or feed an external clock signal (use a function generator) to set the Fuse Bytes to the desired values.

