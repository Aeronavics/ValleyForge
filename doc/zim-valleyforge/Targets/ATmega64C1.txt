Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2014-12-04T15:56:46+13:00

====== ATmega64M1 / ATmega64C1 ======
Created Thursday 04 December 2014

[[[http://www.atmel.com/Images/Atmel-7647-Automotive-Microcontrollers-ATmega16M1-32M1-64M1-32C1-64C1_datasheet.pdf|Datasheet]]] [[[http://www.atmel.com/devices/atmega64c1automotive.aspx|Product Page]]]
The low-power automotive CMOS 8-bit microcontroller, based on the AVR enhanced RISC architecture, features 64KB self-programming flash program memory, 2KB SRAM, 1KB EEPROM, CAN controller with 6 message-objects, LIN controller, 8-channel 10-bit A/D-converter, and JTAG interface for on-chip-debug. The device achieves up to 16 MIPS throughput at 16 MHz. 2.7 - 5.5 Volt operation.

The ATmega64M1 and ATmega64C1 are identical, except the C1 has three Power Stage Controller (PSC) channels.

**Flash**		64 KiB
**EEPROM**	2 KiB
**SRAM**		4 KiB
**Pin Count**	32
**Frequency**	16 MHz

**Timers**		2
**USART**		1
**SPI**			1
**I2C**			None
**CAN**		1
**ADC**		11x 10-bit, 125 ksps

===== GPIO =====
TODO: Description of ports, pins, and allowable config modes
eg. do the pins support pull-ups? pin-change? interrupts?

===== USART =====
This target supports basic UART communication through the LIN peripheral (''USART_0''), but does not have the same capabilities as other AVR chips. 

For more information see [[HAL:USART]] and [[HAL:USART:AVR-LIN]] 

===== SPI =====
The ATmega2560 has 1 SPI available (SPI_0), and can be configured for both Master and Slave SPI.
It has four hardware pins that cannot be disabled: MISO, MOSI, SCK, and SS.

For more information see [[HAL:SPI]] and [[HAL:SPI:AVR]]

===== I2C =====
This target does not support I2C/TWI

===== CAN =====
TODO: Description of the CAN module and allowable config values

===== Fuses =====
The ATmega16M1/32M1/64M1/32C1/64C1 has three Fuse bytes that determine the chip functionality.

The ''Extended Fuse Byte ''configures the Brown-out detector trigger level. 

The ''Fuse High Byte'' can configure the boot size, and enable or disable several features of interfacing with the micro-controller. These features are On-Chop Debug (OCDEN),  Joint Test Action Group (JTAGEN), Serial Programing Interface (SPIEN), Watchdog Timer always ON (WDTON) and EEPROM memory preserved through the Chip Erase (EESAVE).

The ''Fuse Low Byte ''determines how the chip is clocked. The ''CKSEL3:0 ''bits allows the user to select a Clock Source. The ''SUT1:0 ''bits can configure the start-up time of the controller. The ''CKOUT ''bit enables the system clock to be output on Port ''PB0''. Lastly, the ''CKDIV8 ''bit gives the user the ability to divide the system clock by 8.

It is advised that the Fuse bits should not be tampered with without thoroughly being analysed. Consequences of configuring wrong values to the Fuse bits can be difficult to undo. 

For the purpose of the UAS project, the fuse bits should bit set as:

	''lfuse		      0xDE''
					''Else   0x9E (if CKOUT is mapped to PB0)''
	
	''hfuse		      0xDF''
	
	''Efuse		      0xFF''
	
To double check that these are infact the correct configurations, please check the Fuse Calculator online at http://www.engbedded.com/fusecalc/

In the case of an undesirable value in Fuse Low byte, the likely problem would be that the ISP will error while attempting to communicate with the micro controller or be unable to read the Fuse Bytes. There are two solutions to this issue, which is to either use the High Voltage Parallel Programming method or feed an external clock signal (use a function generator) to set the Fuse Bytes to the desired values.
