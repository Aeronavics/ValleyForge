Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2015-01-22T10:07:38+13:00

====== Modular AVR Bootloader: CAN_SPI Module ======

The CAN_SPI module for the [[Modular AVR Bootloader]] is provided to allow uploading of new application code to an [[Architectures:AVR|AVR]] device over a CAN (Controller Area Network) bus via an external CAN controller. The external CAN controller is controlled via SPI communication.

 The module is specifically designed to be used in conjunction with the [[:Tools:Uploader:CAN|CAN module]] (and the [[:Tools:Uploader:IHex|Intel Hex File Parser]]) for the [[Tools:Uploader|Modular Code Uploading Tool]].

===== External CAN Controller - MCP2515 =====
The external CAN controller used by this module is the MCP2515.

The MCP2515 interfaces to microcontrollers via the SPI protocol. The CAN_SPI module also utilizes the interrupt pin from the MCP2515.

===== Operation =====

==== CAN_SPI_Module Interface with Bootloader Shell ====
As per [[:Bootloaders:Modular AVR Bootloader|here,]] the module interacts with the bootloader by implementing the four virtual methods defined in the ''bootloader_module'' abstract class:
* The ''init'' method initializes SPI communication with the CAN controller and configures the CAN controller for the CAN communication.
* The ''exit'' method resets the CAN controller to default settings and resets the SPI communication.
* The ''event_idle'' method can send a flash page to the uploader for verification.
* The ''event_periodic'' method checks for any new messages received from CAN communication. If no messages have been received an alert_uploader message is sent to the uploader, this informs the uploader that the bootloader is awaiting uploader command messages. If a message was received then the message is handled by executing its corresponding procedure.

==== CAN Controller Interface ====
The SPI communication is configured to allow the device to control the CAN controller.

The interrupt pin on the CAN controller is configured to interrupt upon reception of a valid message. The interrupt pin is attached to one of the device's pins. The pin is configured to interrupt upon logic change. This change interuppt is used to initiate handing of received messages.

The bit timing is configured by the module using the user defined baud rate. The module configures the CAN controller with one reception buffer and one transmission buffer. The reception buffer will only accept messages below a longth of eight bytes with standard message identifiers identical to Uploader message identifiers. The transmission buffer allows a message up to 8 bytes long with any message identifer to be sent.

The message reception method will filter out any Uploader commands without the component's node identifier. The accpeted messages will have their message data, length and identifiers saved. Finally the message received flag will be set.

==== Message Handling ====
The received messages are filtered into five procedures corresponding to the five Uploader message commands:
* The CAN bus baud rate for this CAN network. The bootloader and the application must both use this specified CAN baud rate.
* The component's node ID for this CAN network. All the nodes on the CAN network must have different node IDs.
* The MCP2515 connection layout:
	* SS Port and Pin - The port and pin on which the slave select pin from mcp2515 is connected to the component.
	* SCK Port and Pin - The port and pin on which the serial clock pin from mcp2515 is connected to the component.
	* MOSI Port and Pin - The port and pin on which the master output, slave input pin from mcp2515 is connected to the component.
	* INT Port and Pin - The port and pin on which the general interrupt pin from mcp2515 is connected to the component. 
* The interrupt configuration that will be triggered from the INT pin.
	* The interrupt vector and additional information. 

NOTE: Application code which is loaded onto a component using the CAN_SPI Module of the Modular AVR Bootloader should implement the facility to receive a ''reset_request'' message from a host which wishes to upload new code to the component. When the application receives a ''reset_message'', it should set the bootloader status flag to 'dirty' and then perform a CPU reset to allow the bootloader to download new firmware from the host.

===== Protocol =====
See [[:Tools:Uploader:CAN|here]].

===== Implementation =====
