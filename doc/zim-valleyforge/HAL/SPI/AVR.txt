Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2014-12-11T15:24:10+13:00

====== AVR - SPI Module Configuration ======
Created Thursday 11 December 2014

All AVR chips use the same SPI peripheral, so the configuration is identical across all chips.

=== Master Clock Speed ===
The SPI module's clock is provided directly from fclkIO and a divisor which can be configured in discrete steps.
Allowable values are:
	SPI_DIV_x where x is 2, 4, 8, 16, 32, 64, 128
	
The SPI frequency can be determined by the following formula:
''fspi = fclkIO / spi_div''

=== Slave Select ===
AVR chips have a hardware SS pin which has special functionality and cannot be disabled.

In master mode, it is configured as an output, and is controlled by the SPI HAL library.
	If using SPI_SS_NONE or SPI_SS_SOFTWARE, it must be kept as an output, but can be controlled by the user application. (or not used at all)
	If using SPI_SS_HARDWARE, it is automatically driven by the SPI HAL library for every transfer.
	
In slave mode, it is configured as an input, and disables the SPI shift register when logic high. ie, you must pull it low before any data can be transferred! This behaviour cannot be disabled.

IMPORTANT:
If in master mode, do NOT configure the SS pin as an input, or the SPI peripheral will treat it as a multi-master detection input which the SPI HAL library cannot handle!
Pins are automatically configured by the library so you should not be manually configuring them anyway.

=== Overhead ===
If using a high SPI speed (eg. SPI_DIV_2), there may be significant overhead in the HAL routines between byte transfers. The time it takes for ''transfer()'' to execute may be 2-5x higher than the time it takes for the actual byte!

For best performance consider using ''transfer_buffer()'', and ''transfer_buffer_async()'' over single byte transfers, though on the AVR ''transfer_buffer()'' (blocking) has the best performance (when using SPI_0). This is because the AVR does not have any buffering in its hardware SPI peripheral! (Unlike MSPIM)

===== USART-SPI (MSPIM) =====
On certain targets (eg. the [[Targets:ATmega2560|ATmega2560]]) the USART peripherals can also be used as a master SPI.
This is different to Synchronous USART in that it does not include the start/stop/parity bits, and you can configure the clock polarity/phase (SPI data mode) and MSB/LSB first formats.

Note that the MSPIM has a few advantages over the native SPI peripheral:
1. The speed can be configured with much finer control (instead of being limited to distinct divider values)
2. Because of TX buffering, the MSPIM can transmit bytes back-to-back with no delay. This is not possible with the native SPI peripheral. This is true for both transfer() and transfer_async().

=== GPIO Pins ===
In MSPIM mode the RX pin becomes MISO, the TX pin becomes MOSI, and the XCK pin becomes SCK. There is no hardware SS pin so you must provide one to ''set_slave_select()'' or do it yourself!

=== SPI Speed ===
Unlike the hardware SPI peripheral, the SPI clock speed can be configured using the baud rate register instead of discrete clock dividers. The formula used is the same as used for Synchronous USART, so for best results choose a baud rate //fclk/(2n)// for some n â‰¤ 4095. The maximum speed is thus //fclk/2//, or 8Mbps for a 16MHz CPU clock.

=== Usage ===
In order to use the USART-SPI, bind a new Spi() object and pass in USARTSPI_x where x is the number of the USART to use. eg:
''Spi spi = Spi::bind(USARTSPI_0);''

When using a USART for SPI, it cannot be used by the USART HAL module, and vise-versa!

=== Asynchronous Communication ===
(Aka. non-blocking communication)
Because the AVR doesn't have DMA, asynchronous communications are performed using interrupts and an internal state machine. This incurs some overhead for each byte sent, so it may not be possible to use the SPI at very high speeds.

IMPORTANT: You MUST enable global interrupts for asynchronous communications to work! ie, you must call sei() before you can use any of the async methods.

