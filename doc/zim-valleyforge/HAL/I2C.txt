Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2015-02-09T15:19:54+13:00

====== I2C HAL Module ======
Created Monday 09 February 2015

=== Goal ===

[ ] Unify the programming interface for using I2C functionality
[ ] To create an object orientated interface that is stateless
[ ] Make minimal compromises to the I2C pin functionality and performance in the process of unification
[ ] Allowing user source code to be portable to supported targets with minimal changes

=== Targets ===
* AT90CAN128
* ATmega8
* ATmega2560

== Private ==
Instantiated at compile time
Is a singleton, a single instances manages the configuration of the I2C bus.

== Public ==
Allocated at run-time by user
User enables the I2C instance, and enables global interrupts with ''int_on()''

Interactions with the I2C bus is conducted through the I2C instance. All modes of operation for I2C are availble with the exception of a general call function. Any data that is transmitted or received from the I2C bus must be stored in a preordained data variable.

== Hardware ==
The most common error of implementing an I2C bus is that the user forgets about the pull up on the bus line. From the datasheet the minimum pull-up resistor size should be 1.5kOhms. The pull up resistors used in the Energy management board is 4.7kOhms, which should result in a slower slew rate but still be operational at 100kHz on the SCL line.

=== Usage ===

== Initialisation ==
Users must instantiate an I2C class and bind the chosen slave address to this instance simultaneously as these addresses will be used to reference the specific controller. I2C allows the user to define an operating frequency by programming the pre-scaler bits and the bit rate register. The most common speeds used in the I2C protocol are 10kHz, 100kHz and 400kHz. To configure the I2C frequency, the CPU frequency and the desired frequency must be passed to the enable function within the I2C instance. TWI protocol states that the CPU frequency must be at least 16x larger than the SCL frequency (I2C frequency). If a value which does not fit this criteria is given, the i2c will not be initialized and a error will be returned.

Lastly, the global interrupts must be enabled. The I2C HAL is driven off the ''TWI interrupt vector'', without the global interrupt enabled the functions within the I2C class will not work.

== Example ==
'''
	I2C i2c_test;
	i2c_test.enable(CPU_16MHz, I2C_100kHz, 0x02);
	int_on();
'''
	

=== Operating Modes ===

== Master Transceiver ==
Master Transceiver mode is where the current microcontroller assumes the master role and transmits data to a specified slave controller. The interaction begins with a variable(s) which the controller desires to send. In the example bellow the data buffer is filled with numbers from 0 to the pre determined ''TWI_BUFFER_SIZE. ''A pointer to this data buffer is created and passed onto the i2c master transmit function. The target slave address and the size of the message must also be sent with the data.

If the master transmit function is called while the i2c bus is busy, the transmit function will poll the controller, waiting for the bus to become available before sending the data. 

== Example ==
'''
	int i;
	uint8_t data_buf[TWI_BUFFER_SIZE];
	for (i = 0; i < TWI_BUFFER_SIZE; i++)
	{
		data_buf[i] = i;
	}
	uint8_t* i2c_data;
	i2c_data = data_buf;
	i2c_test.master_transmit(TARGET_SLAVE_ADR, i2c_data, sizeof(data_buf));
'''


== Master Receiver ==
Master Receiver mode is where the current microcontroller assumes the master role and requests data from a specified slave controller. A variable must be initialized to store the received data, and passed to the master receive function with a pointer. The slave address and the desired amount of message bytes must also be specified. 

If the master receive function is called while the i2c bus is busy, the receive function will poll the controller, waiting for the bus to become available before requesting for data. 

== Example ==
'''
	uint8_t data_buf[TWI_BUFFER_SIZE];
	uint8_t* i2c_data;
	i2c_data = data_buf;
	i2c_test.master_receive(TARGET_SLAVE_ADR, i2c_data, sizeof(data_buf));
'''


== Slave Transceiver ==
Slave Transceiver mode is where the current microcontroller assumes the slave role and transmits data to a master requesting data from the controller. Data must be given to the i2c instance which stores that data in a private buffer tethered to the i2c HAL. 

The slave transmit function will overwrite any previously set data stored. The data will be sent when a master requests for the slave to send the data. 

Slave transmit has the ability to override the Master Recieve call for the number of bytes which are sent. Therefore, if the master request for 5 bytes and there are only 2 bytes of data, the slave will only send the 2 bytes. Also, if there are no data available the communication will be stopped.
 

== Example ==
'''
	int i;
	uint8_t data_buf[TWI_BUFFER_SIZE];
	for (i = 0; i < TWI_BUFFER_SIZE; i++)
	{
		data_buf[i] = i;
	}
	uint8_t* i2c_data;
	i2c_data = data_buf;
	i2c_test.slave_transmit(i2c_data, sizeof(data_buf));
'''


== Slave Receive ==
Slave Receive mode is where the current microcontroller assumes the slave role and receives data from a master transmitting data to the controller. The slave controller will receive data from the master controller as soon as the i2c instance has been enabled. The function call to slave receive is to check if there are data available in the i2c buffer. If the buffer contains data, that data is copied to the user data storage variable. 

Unlike the other modes, the slave receive function will grab exactly the amount of data that was received in the last tranmission (or the maximum buffer size).

== Example ==
'''
	uint8_t data_buf[TWI_BUFFER_SIZE];
	uint8_t* i2c_data;
	i2c_data = data_buf;
	i2c_test.slave_receive(i2c_data);
'''


== Reading the TWI status register ==
TWI protocol has a useful register called the status register that can be used to see exactacly which state the bus is in. Having this register allows i2c hardware abstraction to be run easily on interrupts. This status register can also be used to debug and problems with the TWI protocol. If communications are not working as they should, check the value of ''I2C_SR ''which should contain a byte value corresponding to the state of the TWI bus. The values can be easily interpreted with the enumeration defined as ''I2C_status_code''. 

== Example ==
'''
	uint8_t state = I2C_SR;
	switch (state)
	{
		case NO_INFO_TWINT_NOT_SET:
		{
			// error analysis
		}
		case BUS_ERROR:
		{
			// error analysis
		}
		.
		.
		.
	}
'''


=== Pre-defined Variables ===
All definitions can be found in the ''i2c.cpp  i2c.hpp  i2c_platform.hpp  ''files.  

'''
TWI_BUFFER_SIZE		20 (this is an arbitrary number)
MAX_SCL_CPU_RATIO	16
I2C_SR			TWSR (value of TWSR)
'''


==== Implementation Status ====

	Incomplete general call functionality.
	No arbitration lost functionality.

	ATmega2560  - Implementation complete.
	AT90CAN128  - Implementation completed.
	ATmega64M1/C1 - TWI not available, (use LIN)
	
