Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2014-11-28T15:25:52+13:00

====== GPIO Test Code ======
Created Friday 28 November 2014

The following article details the operation of the GPIO test module.

=== Required Files ===
test_hal_gpio_avr.cpp
test_hal_gpio_avr.hpp^{*}

=== Currently Supported Boards ===
//AVR ATmega64M1//
//AVR ATmega64C1//

=== Todo ===
[ ] Debouncing †

===== How Do I Use this Module? =====

	1. Open a terminal and ValleyForge. 
	2. Modify the VForge settings to reflect the board that the program will be uploaded to.
	3. Build test_hal_gpio_avr .
	4. Connect and upload to the board, mounted on the AVR test apparatus.
	5. All of the LEDs should light up, or if an alternate setup is used, all of the outputs on Port B should be low. If this is not the case, there is a problem with the GPIO pin set-up. Either the port is incorrect, pin addresses used by the program are wrong, the program's port address is incorrect, or there is a problem with the LEDs. If almost all of the LEDs turn on, but some don't, there may be a problem with several of the LEDs.
	6. Push button 1. LED 1 should turn off. Release button 1 and the LED should turn on again. If the LED does not change, then there is likely a problem with the port connection, the buttons, or the port and/or pin addresses used by the program. It may be a good idea to check the connections, and to try step 7 to see if the problem is confined to button 1.
	7. Push button 2. LED 2 should toggle. Press it again to toggle LED2 on again.
	8. Leave button 0 toggled such that LED 0 is on. Verify that the behaviour every odd numbered button is the same as button 1, and that every even numbered button (apart from 0) behaves the same as LED2.  
	9. Push button 0. The light on LED 0 should turn off, indicating that the button presses will now be detected via interrupt. Repeat steps 6 and 7, ensuring that the behaviour is the same. If no response is given, refer to the **Errors** section of this guide. Press button zero again to return to polling mode.


===== Description =====

7	6	5	4	3	2	1	 0		⇒		7	6	5	4	3	2	1	 0	
__∅__	__∅__	__∅__	__∅__	__∅__	__∅__	__∅__	__∅__		⇒		__∅__	__∅__	__∅__	__∅__	__∅__	__∅__	∅	__∅__
↑	↑	↑	↑	↑	↑	↑	↑		⇒		↑	↑	↑	↑	↑	↑	↓	↑
_{Figure 1:  	A representation of the test I/O setup. Button are arrows and LEDs are crossed circles. } 

	1. The test_hal_gpio_avr code uses the GPIO module two 8-bit ports. One of these ports (usually port B) is connected to a set of 8 active low LEDs, one for each bit. The other port is connected to 8 active high push buttons. A representation of this system is shown in Figure 1. 
	2. The system has two modes of operation.  In each loop, the state of the button (stored in a special array) is updated to reflect the current state, and appropriate actions (as summarised in Table 1) are carried out. 
		a. //The first uses polling to determine the current states of the buttons. When the mode is POLLING, buttons 1 to 3 are polled.//
		b. //If the mode is set to INTERRUPT, the buttons (except for button 0‡) are no longer polled. Instead, the state of the button is updated if an interrupt occurs on the port.// 


_{Table  1:  	Buttons and the action that results from their use}
**Button	  Polled or Interrupts		  Action**
0			Always polled				 	If pressed, switches the button checking mode from polling to  interrupt-based.
1			Mode-dependent				If button 1 is held down, LED 1 turns off, else, 
2			Mode-dependent				If button 2 is pressed, LED2 toggles state.
3			Mode-dependent				Always on — the LED is bright and its brightness is not dependent on button presses
4			Mode-dependent				Always on — the LED is bright and its brightness is not dependent on button presses
5			Mode-dependent				Always on — the LED is bright and its brightness is not dependent on button presses
6			Mode-dependent				Always on — the LED is bright and its brightness is not dependent on button presses
7			Mode-dependent				Always on — the LED is bright and its brightness is not dependent on button presses


===== Error Messages =====
7	6	5	4	3	2	1	 0		⇒		7	6	5	4	3	2	1	 0	
__∅__	__∅__	__∅__	__∅__	__∅__	__∅__	__∅__	∅		⇒		__∅__	__∅__	__∅__	__∅__	__∅__	__∅__	∅	∅
↑	↑	↑	↑	↑	↑	↑	↑		⇒		↑	↑	↑	↑	↑	↑	↓	↑
_{Figure 2:  	LED 0 is off if interrupts enabled, and is toggled by toggling button 0. The behaviour should otherwise be the same as in polling mode.}


7	6	5	4	3	2	1	 0		⇒		7	6	5	4	3	2	1	 0	
∅	∅	∅	∅	∅	∅	__∅__	∅		⇒		∅	∅	∅	∅	∅	__∅__	∅	∅
↑	↑	↑	↑	↑	↑	↑	↑		⇒		↑	↑	↑	↑	↑	↑	↓	↑
_{Figure 3:  	Possible error codes (not counting a combination of the two messages) are shown above. (Left) GPIO_INT_OUT_OF_RANGE (right) GPIO_INT_ALREADY_TAKEN.}


When button 0 is toggled (such that LED0 is off), interrupt based checking of the button states is enabled (see Fig 2). Error messages are displayed if interrupt enabling fails. If an error has occurred in the interrupt enable function,  the error code is displayed on the LEDs array. As seen in Figure 3, there are two different error codes that can be displayed. The first is GPIO_INT_OUT_OF_RANGE, indicating that pin interrupts are not available on at least one of the pins. The second is GPIO_INT_ALREADY_TAKEN, which indicates that at least one of the pins is trying to initialise an interrupt on a pin whose interrupt is already taken.

_________________________________________________________________
* Refer to test_hal_gpio_avr.hpp for a complete list
† Debouncing is not implemented in this test module. Some boards may have problems, particularly in interrupt based polling, due to button bouncing on the IO ports.
‡ Button 0 is always polled. This is a safeguard put in place in case the interrupt mode is dysfunctional, allowing the mode to be switched back to polling.
