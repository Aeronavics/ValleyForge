Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2015-12-16T08:47:10+13:00

====== Usage ======
Created Wednesday 16 December 2015

=== Usage ===
The HAL library currently supports one AVR target the ATmega328p. The HAL interface has been designed to support a wide range of targets including but not limitted to 8-bit AVR, 32-bit AVR, STM32 ARM Cortex m, and Xilinx Zynq. This has ment that the interface class has functions and arguments of functions for features that are not supported on all targets. For functions of features not supported they will only return ADC_CMD_IMMUTABLE indicating that it isn't supported. Also enumarated arguments for these functions have the suffix NONE insead of argument type. For functions where not all arguments are used the enumerations have only one entry indicating the operating mode.


=== Initialisation ===
ADC units on all targets have a common set of initialisations that must be performed before an analogue to digital conversion can be made. These are setting the ADC clock, selecting the reference voltage (not all targets), setting the operating mode and selecting an input channel. All these steps are performed by calling the relavent function of the HAL library. For convinience an initialisation function has been provided which returns the ADC to its reset configuration should the ADC state become unknown or a complex configuration isto be cleared.

== Example ==
'''
Adc* adc = Adc::bind();
adc->set_clock_mode({ADC_SRC_INT_PRE_128, ADC_SPEED_MODE_NORMAL});
adc->initialise(ADC_UNIT_0);
adc->enable(ADC_UNIT_0);
adc->set_reference_source(ADC_UNIT_0, ADC_REFERENCE_SOURCE_AVCC_CAP);
adc->set_operating_mode(ADC_UNIT_0, ADC_OPERATING_MODE_MANUAL);
Adc_input_channel input = ADC_INPUT_CHANNEL_2;
adc->set_single_conversion_input(ADC_UNIT_0, ADC_CONV_CHANNEL_REGULAR, &input);
'''


== Default Configuration ==
The default configuration on calling ''initialise(ADC_UNIT_0)'' has AREF selected as the reference voltage, result right aligned, ADC0 selected as input, ADC disabled, manual conversion trigger, interrupts disabled and trigger source free running.

=== Getting an ADC reading ===
Using the above configuration an ADC reading can be taken by starting a conversion and waiting until the conversion is complete.

== Example ==
'''
uint32_t result;
adc->start_conversion(ADC_UNIT_0, ADC_CONV_CHANNEL_REGULAR);
while (adc->is_conversion_complete(ADC_UNIT_0, ADC_CONV_CHANNEL_REGULAR) != ADC_CONVERSION_COMPLETE)
{
}
result = adc->get_result(ADC_UNIT_0, ADC_CONV_CHANNEL_REGULAR, 1);
'''

For more advanced applications a callback can be assigned which is called when a conversion is complete.

=== Callback ===
The call back can be used to immediately notify the user of a completed ADC conversion with the result. The callback is assigned when enabling the interrupt.

== Example ==
'''
// Called when the callback is desired
adc->enable_interrupt(ADC_UNIT_0, ADC_INTERRUPT_SOURCE_CONVERSION_COMPLETE, adc_callback);
'''


'''
// An example callback that sets a result variable.
void adc_callback(void* context)
{
	result = *(uint32_t*)context;
}
'''


=== Supported Features and Settings ===

== ATmega328p ==
Refer to the ATmega328p data sheet for detailed information about configuration options. As there is only one ADC unit pass the default of ''ADC_UNIT_0'' for all ADC unit operations. To set any of these configuration options call the relavent library function.
Clock:
	The ADC clock is generated by a 7-bit prescalar from the system clock. The prescalar devision ratios are 1/2, 1/4, 1/8, 1/16, 1/32, 1/64 and 1/128. For maximum resolution the ADC clock must be between 50kHz and 200 kHz but can be run faster if only a lower resolution is requried. There are no modes for fast or slow operation. Options for prescalar: ''ADC_SRC_INT_PRE_2, ADC_SRC_INT_PRE_4, ADC_SRC_INT_PRE_8, ADC_SRC_INT_PRE_16, ADC_SRC_INT_PRE_32, ADC_SRC_INT_PRE_64, ADC_SRC_INT_PRE_128''. Options for speed mode: ''ADC_SPEED_MODE_NORMAL''.
Auxiliary Supplies:
	There are no auxiliary supplies. Options: ''ADC_AUXILIARY_SUPPLY_NONE''
Multi ADC and Multi ADC DMA Modes:
	There are no multi ADC and multi ADC DMA modes as there is only one ADC. Options: ''ADC_MULTI_ADC_MODE_NONE''.
Conversion Channels:
	There is only one conversion channel. Options: ''ADC_CONVERSION_CHANNEL_NORMAL''.
Conversion Sequence:
	Only one input channel can be selected at a time, hence the sequence length is fixed at 1. For ease of use use set_single_conversion_input as this takes care of setting the sequence length correctly.
Input Channels:
	There are 7 external input channels and 3 internal input channels. The 3 internal channels are the thermometer on ADC8, the 1.1V bandgap reference and GND. Options: ''ADC_INPUT_CHANNEL_0, ADC_INPUT_CHANNEL_1, ADC_INPUT_CHANNEL_2, ADC_INPUT_CHANNEL_3, ADC_INPUT_CHANNEL_4, ADC_INPUT_CHANNEL_5, ADC_INPUT_CHANNEL_6, ADC_INPUT_CHANNEL_7, ADC_INPUT_CHANNEL_8, ADC_INPUT_CHANNEL_1_1V, ADC_INPUT_CHANNEL_0V''.
Input Mode:
	Setting of the input mode is not supported as it is linked to the input selected. All inputs are single ended. Options: ''ADC_INPUT_MODE_NONE''.
Results:
	Only the most recent conversion result is available. When getting the result pass 0 for the result number.
Conversion Status:
	The conversion status is either complete or not complete. Options: ''ADC_CONVERSION_COMPLETE, ADC_CONVERSION_NOT_COMPLETE''.
Data Alignment:
	The returned conversion result can be either left or right aligned. When left aligned the data is byte aligned. The format is as follows.
	'''
		B31 ... B16 B15 B14 B12 B11 B10 B9  B8  B7  B6  B5  B4  B3  B2  B1  B0
	Left:	 0  ...  0  D9  D8  D7  D6  D5  D4  D3  D2  D1  D0   0   0   0   0   0
	Right:	 0  ...  0   0   0   0   0   0  D9  D8  D7  D6  D5  D4  D3  D2  D1  D0
	'''
	Options: ''ADC_DATA_RIGHT_ALIGNED, ADC_DATA_LEFT_ALIGNED''.
Resolution:
	A full 10 bit conversion is always performed. Options: ''ADC_RESOLUTION_NONE''.
Operating Modes:
	Two operating modes are supported, manual conversion start and triggered conversions. Options: ''ADC_OPERATING_MODE_MANUAL, ADC_OPERATING_MODE_TRIGGERED''.
Trigger Source:
	The follwing trigger sources are supported, Free Running mode, Analog Comparator, External Interrupt Request 0, Timer/Counter0, Compare Match A, Timer/Counter0 Overflow, Timer/Counter1 Compare Match B, Timer/Counter1 Overflow, Timer/Counter1 Capture Event. For all but Free Running the ADC conversion is triggered by a rising edge of the associated interrupt flag. For Free Running the ADC will continously convert the selected input channel beginning a new conversion immediately after completing the previous one, ''start_conversion(Adc_unit adc_unit)'' must be called to start the first conversion. Options for trigger sources: ''ADC_TRIGGER_SOURCE_FR, ADC_TRIGGER_SOURCE_ACOMP, ADC_TRIGGER_SOURCE_EXTI0, ADC_TRIGGER_SOURCE_TC0OCA, ADC_TRIGGER_SOURCE_TC0OVF, ADC_TRIGGER_SOURCE_TC1OCB, ADC_TRIGGER_SOURCE_TC1OVF, ADC_TRIGGER_SOURCE_TC1ICA''. Options for trigger edges: ''ADC_TRIGGER_EDGE_RISING''.
Sampling Time:
	The sampling time is fixed and not user adjustable. Options: ''ADC_SAMPLING_TIME_NONE''.
Reference Sources:
	There are 3 reference sources available: AREF, the voltaged applied to the AREF pin; AVCC, VCC which has been decoupled with an external capacitor at AREF; and 1.1V, the internal bandgap which has been decoupled with an external capacitor at AREF. Options: ''ADC_REFERENCE_SOURCE_AREF, ADC_REFERENCE_SOURCE_AVCC_CAP, ADC_REFERENCE_SOURCE_1_1V_CAP''.
Interrupts:
	There is one interrupt available which triggers on conversion complete. The library supports a callback which is passed a ''void*'' to the ''uint32_t'' result. Options for interrupt source: ''ADC_INTERRUPT_SOURCE_CONVERSION_COMPLETE''.
Watchdog:
	Not available.
DMA:
	Not available.
Oversampling:
	Not available.
ADC Calibration:
	Not available.
	
