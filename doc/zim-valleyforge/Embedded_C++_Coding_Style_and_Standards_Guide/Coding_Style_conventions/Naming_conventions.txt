Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2015-02-17T17:34:23+13:00

====== Naming conventions ======

In General, choose names that are meaningful and readable. If the name is appropriate everything fits together naturally, relationships are clear, meaning is derivable, and reasoning from common human expectations works as expected.

All names should be written in English.

===== File Names =====

25. **C source files should have the file extension .c. Each source file should have a matching header file of the same name, with the file extension .h.**	

26. **C++ source files should have the file extension .cpp. Each source file should have a matching header file of the same name, with the file extension .hpp.**

27. **File names should not contain space characters, or special characters other than underscore.**
	
28. **File names should not contain upper-case characters (to avoid confusion in the case of file systems** **which are not case-sensitive).**

===== Naming identifiers =====

The choice of identifier names should:

	* Suggest the usage of the identifier.
	* Consist of a descriptive name that is short yet meaningful.
	* Be long enough to avoid name conflicts, but not excessive in length.
	* Include abbreviations that are generally accepted.

**NOTE -** In general, the above guidelines should be followed. However, conventional usage of simple identifiers (i, x, y, p, etc.) in small scopes can lead to cleaner code and will therefore be permitted. Additionally, the term ‘word’ in the following naming convention rules may be used to refer to a word, an acronym, an abbreviation, or a number.

29. **All words in an identifier will be separated by the ‘_’ character.**
	
30. **Identifiers will not begin with the underscore character ‘_’.**

31. **Identifiers will not differ by:**

	* Only a mixture of case
	* The presence/absence of the underscore character
	* The interchange of the letter ‘O’, with the number ‘0’ or the letter ‘D’
	* The interchange of the letter ‘I’, with the number ‘1’ or the letter ‘l’
	* The interchange of the letter ‘S’ with the number ‘5’
	* The interchange of the letter ‘Z’ with the number 2
	* The interchange of the letter ‘n’ with the letter ‘h’.
	* All acronyms in an identifier will be composed of uppercase letters.

==== Class, Struct & Type Names ====

32. **Names of classes, structures, namespaces, enumeration and types created with typedef should begin with an upper case character, then be in lower case:**

'''
class Dinosaur
{
'''
	'''
	private:
	
	'''
			'''
			void roar()
			{
			'''
				'''
				Uint32 = 128;
				Noise rawwww = "Rawwww!!!";
				'''
			'''
			}
			}
			'''


33. **Names of classes, structures and types should be underscore separated.**

'''
class Bicycle_bell
'''


34. **Names of class templates should be a single upper case letter:**

'''
template<class T> void do_something(T a, T b)
{
'''
	'''
	T c = T.new_widget();
	a.do_something_else(b, c);
	}
	'''


==== Function & Method Names ====

35. **Names of functions and methods should be all lower case, underscore separated:**

'''
void do_something()
{
'''
	'''
	do_something_else();
	eat_dinosaur(Dinosaur dinosaur);
	}
	'''


36. **Names of functions and methods should begin with a verb:**

'''
void do_something()
{
'''
	'''
	get_something();
	catch_something();
	enable_something_else();
	}
	'''


==== Variable & Constant Names ====

37. **Variable names should be all lower case, underscore separated:**

'''
Uint16 critter_type = i + 1;
Dinosaur dinosaur = Dinosaur.create_new_dinosaur(critter_type);
'''


38. **Constant names should be all upper case, underscore separated:**

'''
const Uint16 MAXIMUM_NUMBER_OF_HATS = 16;
'''


39. **Variables of the same name as the underlying type are allowed:**

'''
Address address = "69 Creyke Rd";
House house = get_house(address);
'''


40. **Generic variables may have the same name as their type.**

'''
void set_topic(Topic topic)
'''


This arrangement is useful in situations when there is otherwise not an obvious single choice for the variable name for an argument or internal variable.

This arrangement should obviously not be used whenever there is more than one variable of the same type in the same scope.

41. **Literal suffixes should use uppercase letters rather than lowercase letters in order to improve readability.**

'''
const int64 fs_frame_rate = 64l;	// Wrong! Looks too much like 641
const int64 fs_frame_rate = 64L;	// Okay
'''


42. **Plural form should be used on names representing a collection of objects.**

'''
vector<Point> points;
int values[];
'''


This enhances readability since the name gives the user an immediate clue of the type of the variable and the operations that can be performed on its elements.

43. **The prefix n should be used for variables representing a number of objects.**

'''
nPoints, nLines;
'''

	
The notation is taken from mathematics where it is an established convention for indicating a number of objects.

44. **Iterator variables should be called i,j,k etc.**

'''
for (int i = 0; i < ntables; i++)
{
'''
	'''
	...
	}
	for (vector<my_class>::iterator i = list.begin(); i != list.end(); i++)
	{
	'''
	'''
	Element element = *i;
	...
	}
	'''


Variables named ''j'', ''k'' etc. should only be used for nested loops, or when the value ''i'' needs to be retained outside the scope of the for loop, but another iterator is required.

45. **The prefix is should be used for boolean variables and methods.**

'''
is_set, is_visible, is_finished, is_found, is_open
'''


Common practice in the C++ development community and partially enforced in Java. Using the //is// prefix solves a common problem of choosing bad boolean names like //status// or //flag//. //isStatus// or //isFlag// simply doesn't fit, and the programmer is forced to choose more meaningful names.

46. **Complement names must be used for complement operations.**

'''
get/set, add/remove, create/destroy, start/stop, insert/delete,
increment/decrement, old/new, begin/end, first/last, up/down, min/max,
next/previous, old/new, open/close, show/hide, suspend/resume etc.
'''


47. **Abbreviations in names should be avoided.**

'''
compute_average();		// NOT: comp_avg();
'''


There are two types of words to consider. First are the common words listed in a language dictionary. These must never be abbreviated. Never write:

	''cmd''   instead of   ''command''
	''cp''    instead of   ''copy''
	''pt''    instead of  ''point''
	''comp''  instead of   ''compute''
	''init''  instead of   ''initialize ''etc.

Then there are domain specific phrases that are more naturally known through their abbreviations/acronym. These phrases should be kept abbreviated. Never write:

	''HypertextMarkupLanguage''  instead of   ''html''
	''CentralProcessingUnit''    instead of  ''cpu''
	''PriceEarningRatio''        instead of   ''pe ''etc.
	
48. **Naming pointers specifically should be avoided.**

'''
Line* line;		// NOT: Line* p_line;
'''
				'''
					  // NOT: Line* line_ptr;
				'''


Many variables in a C/C++ environment are pointers, so a convention like this is almost impossible to follow. Also objects in C++ are often oblique types where the specific implementation should be ignored by the programmer. Only when the actual type of an object is of special significance, the name should emphasize the type.

An exception to this is when both object and pointer types exist in the same body of code:

'''
Line line = Line();
Line* line_ptr = &line;
'''

	
49. **Negated Boolean variable names must be avoided.**

'''
bool is_error;		// NOT: is_not_error
bool is_found;		// NOT: is_not_found
'''


The problem arises when such a name is used in conjunction with the logical negation operator as this results in a double negative. It is not immediately apparent what ''!is_not_found'' means.

50. **Enumeration constants should be prefixed by a common type name.**

'''
enum Color
{
'''
	'''
	COLOR_RED,
	COLOR_GREEN,
	COLOR_BLUE
	};
	'''


This gives additional information of where the declaration can be found, which constants belongs together, and what concept the constants represent.
