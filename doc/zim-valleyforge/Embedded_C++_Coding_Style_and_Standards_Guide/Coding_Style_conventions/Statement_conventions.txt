Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2015-02-17T18:05:01+13:00

====== Statement conventions ======

	1. Each expression statement will be on a separate line.

=== Including Files ===

	1. All header files should contain a mechanism ([[https://en.wikipedia.org/wiki/Include_guard|include guard]]) that prevents multiple inclusions of itself.
{{{code: lang="cpp" linenumbers="true"
// Ensure we only include this header file once.
#ifndef __PATH_TO_HEADER_FILE_NAME_HPP__
#define __PATH_TO_HEADER_FILE_NAME_HPP__
...
#endif // __PATH_TO_HEADER_FILE_NAME_HPP__
}}}


	The name of the guard macro should be based on the relative path of the file, within the component's source tree: this avoids the possibility of naming conflicts. The name of the macro is prefixed and suffixed with a pair of underscore characters.

	2. Header files should only include those files necessary to compile the header file. Files which are necessary to compile the corresponding source file should be included in the source file directly.

	3. Include statements should be sorted and grouped:
{{{code: lang="cpp" linenumbers="true"
// INCLUDE REQUIRED DEPENDENCIES.

// Include system dependencies.
#include <stdio>
#include <stdlib>

// Include the 'some' package.
#include "some/file.hpp"
#include "some/other_file.hpp"
}}}


	Include statements should be sorted such that the lowest level dependencies are included first.

	Include statements for related dependencies should be grouped together, separated by a single blank line.

	4. Include statements should always use relative path-names. Absolute path-names are not allowed.

	5. Include statements must always appear at the top of the file.

=== Flow Control Statements ===

	1. Flow control statements (if, for, while, switch and do) should be followed by a block, even if the block is empty:
{{{code: lang="cpp" linenumbers="true"
while (something)
{
	// Do nothing.
}
}}}


	An empty block should be explained by a comment, to indicate that this expected.

	2. The block following a flow control statement should be contained within braces, even if only a single line:
{{{code: lang="cpp" linenumbers="true"
if (something)
{
	do_something();
}
}}}


	3. There shall be no unreachable code. If any such code is present, it should be denoted using the comment ''// We should not reach here.''

	4. Labels will not be used, except in switch statements.

	5. The ''goto'' statement should not be used.

=== Functions ===

	1. All exit points of value-returning functions shall be through return statements.

=== Constants ===

	1. Numeric values in code will not be used; symbolic values will be used instead. 

	**Rationale:** Improved readability and maintenance.
	
	**Exception:** A class/structure constructor may initialize an array member with numeric values.
{{{code: lang="cpp" linenumbers="true"
class A
{
	A()
	{
		coefficient[0] = 1.23; 	// Good
		coefficient[1] = 2.34; 	// Good
		coefficient[2] = 3.45; 	// Good
	}
	private:
		float64 coefficient[3]; // Cannot be initialized via the member initialization list.
};

}}}


	**Note:** In many cases ‘0’ and ‘1’ are not magic numbers but are part of the fundamental logic of the code (e.g. ‘0’ often represents a NULL pointer). In such cases, ‘0’ and ‘1’ may be used. 
