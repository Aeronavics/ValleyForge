Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2015-02-17T18:05:01+13:00

====== Statement conventions ======

===== Including Files =====
51. **Include statements should be sorted and grouped:**

'''
// INCLUDE REQUIRED DEPENDENCIES.

// Include system dependencies.
#include <stdio>
#include <stdlib>

// Include the 'some' package.
#include "some/file.hpp"
#include "some/other_file.hpp"
'''


Include statements should be sorted such that the lowest level dependencies are included first. Include statements for related dependencies should be grouped together, separated by a single blank line.

52. **Include statements should always use relative path-names. Absolute path-names are not allowed.**

53. **Include statements must always appear at the top of the file.**

===== Flow Control Statements =====
54. **Flow control statements (if, for, while, switch and do) should be followed by a block, even if the block is empty:**

'''
while (something)
{
'''
	'''
	// Do nothing.
	}
	'''


An empty block should be explained by a comment, to confirm that this expected and the code is not missing.

55. **Only loop control statements must be included in the for() construction.**

'''
sum = 0;				// NOT: for (i = 0, sum = 0; i < 100; i++)
for (i = 0; i < 100; i++)		//	{
{					//		sum += value[i];
'''
	'''
	sum += value[i];		    //	     }
	}
	'''


This increases maintainability and readability. It is also helpful to make a clear distinction of what controls and what is contained in the loop.

56. **Loop variables should be initialized immediately before the loop.**

'''
is_done = false;			// NOT: bool is_done = false;
while (!is_done)			// ...
{					// while (!is_done)
	...				// {
}					//	...
'''
							'''
									// }
							'''


57. **The form while (true) should be used for infinite loops.**

'''
while (true)
{
'''
	'''
	...
	}
	
	for (;;)		// Non-compliant.
	{
	'''
	'''
	...
	}
	
	while (1)		// Non-compliant.
	{
	'''
	'''
	...
	}
	'''


Testing against 1 is neither necessary nor meaningful. The form ''for (;;)'' is not very readable and is not apparent that this actually is an infinite loop.

===== Constants =====

58. **Numeric values in code will not be used; symbolic values will be used instead.** 

'''
class A
{
'''
	'''
	A()
	{
	'''
		'''
		coefficient[0] = 1.23; 	// Compliant.
		coefficient[1] = 2.34; 	// Good
		coefficient[2] = 3.45; 	// Good
		'''
	'''
	}
	private:
	'''
		'''
		float64 coefficient[3]; // Cannot be initialized via the member initialization list.
		};
		'''


This is to improve readability and maintenance. Note that an exception is when a class/structure constructor initializes an array member with numeric values.

**NOTE** - In many cases ‘0’ and ‘1’ are not magic numbers but are part of the fundamental logic of the code (e.g. ‘0’ often represents a NULL pointer). In such cases, ‘0’ and ‘1’ may be used. 

59. **Floating point constants should always be written with decimal point and at least one decimal.**

'''
double total = 0.0;		// NOT: double total = 0;
double speed = 3.0e8;		// NOT: double speed = 3e8;
'''


This emphasizes the different nature of integer and floating point numbers. Mathematically the two model completely different and non-compatible concepts.

60. **Floating point constants should always be written with a digit before the decimal point.**

'''
double total = 0.5;		// NOT: double total = .5;
'''


The number and expression system in C++ is borrowed from mathematics and one should adhere to mathematical conventions for syntax wherever possible. Also, 0.5 is a lot more readable than .5; There is no way it can be mixed with the integer 5.

61. **When comparing with constants, the constant should be the second operand.**

'''
if (i == 5)		// NOT: if (5 == i)
'''


===== Variables =====

62. **Multiple variable declarations shall not be allowed on the same line.**

'''
int32* p,q;			// Non-compliant.  This is probably a bug.
int32 first_button_on_top, i;	// Non-compliant.  Too easy to overlook 'i'.
'''


===== Conditionals =====

63. **Complex conditional expressions must be avoided. Introduce temporary Boolean variables instead.**

'''
bool is_finsished = (element_no < 0) || (element_no > max_element);
bool is_repeated_entry = element_no == last_element;
if (is_finished || is_repeated_entry)
{
'''
	'''
	...
	}
	
	// NOT:
	if (element_no < 0) || (element_no > max_element) ||
	'''
	'''
	element_no == last_element)
	{
	'''
	'''
	...
	}
	'''


By assigning Boolean variables to expressions, the program gets automatic documentation. The construction will be easier to read, debug and maintain.

64. **When assigning to bool variables, the logical expression should be parenthesized.**

'''
bool b = (i > j);
'''


65. **Do not compare bool variables and expressions to true or false; use the value of bool or its negated value:**

'''
bool b = true;
if (b)		// NOT: if (b == true)
{
'''
	'''
	...
	}
	
	if (!b)		// NOT: if (b == false)
	{
	'''
	'''
	...
	}
	'''

