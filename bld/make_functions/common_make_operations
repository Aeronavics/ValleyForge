#!/usr/bin/env bash

#	Copyright (C) 2015 Aeronavics Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

###########################################################################################################################
###
### Name:           common_make_operations
###
### Author:         Edwin Hayes
###
### Date Created:	19-03-2012
###
### Type:           Bash Script
###
### Purpose:        Provides functions for common build process operations.
###
###########################################################################################################################

# Indicate the file was imported successfully.
echo -e "${CYAN}Imported common make operations.\n${NO_COLOUR}"

######################################## FUNCTION #########################################
###
### Name:           configure_crosscompile_sysroot
###
### Inputs:         None
###
### Outputs:        Returns zero for success, non-zero for failure.
###
### Purpose:        Sets VF_CROSS_COMPILE_SYSROOT appropriatly, to allow performing cross
###                 compilation for a Linux target.
###
###########################################################################################

configure_crosscompile_sysroot()
{
       # See if the user wants to use a different sysroot for the compilation.

        # NOTE - We ask this before the standard precompile stuff, so that once they answer, the rest of the process is non-interactive.

        # Check if the component/build configuration set specified this.
        if [ ! -z "${VF_CROSS_COMPILE_SYSROOT}" ]; then
                # The setting was specified, probably because it was listed in the component config file.  Check if the user wants to use this.
                echo -e "${CYAN}The configuration for component $COMPONENT specifies to use '${BOLD_CYAN}${VF_CROSS_COMPILE_SYSROOT}${CYAN}' as the sysroot directory for compilation.\n${NO_COLOUR}"
                echo -e -n "${GREEN}Do you wish to use this setting? (Y/N) ${NO_COLOUR}"
                read -n 1
                echo -e "\n" # NOTE - This is because the read command won't put a newline after it reads a character.

                # If they responded YES, then use the setting.  If NO, then we'll need to ask them what to use.
                if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                        unset VF_CROSS_COMPILE_SYSROOT
                fi
        fi

       # Check if the sysroot setting has been chosen yet.
        if [ -z ${VF_CROSS_COMPILE_SYSROOT} ]; then
                # Since the user might be a moron and keep entering invalid names, we loop until a suitable name is entered.

                while :
                do
                        # We will need to prompt the user for the value to use.
                        echo -e -n "${GREEN}Enter the path to the sysroot to use when cross-compiling (this will be something like '/media/username/sd_root'): ${NO_COLOUR}"
                        read
                        echo -e "" 

                        # Check the user actually entered something.
                        if [ -z "$REPLY" ]; then
                                # We'll just prompt again.
                                continue

                        # Check if the user actually just wants to exit without building anything.
                        elif [ "$REPLY" == "exit" ]; then
                                # Exit the script.
                                return 1
                        fi

                        # Test if the entered value is actually a real directory.
                        if [ ! -d "$REPLY" ]; then
                                # The specified directory does not exist, so we abort.
                                echo -e "${RED}Directory $REPLY does not exist.  Aborting...\n${NO_COLOUR}"
                                return 1
                        fi

                        # Else we use whatever they entered.
                        VF_CROSS_COMPILE_SYSROOT="$REPLY"
                        break
                done
        fi

        # Check if the sysroot setting seems sane.
        if [ ! -d "${VF_CROSS_COMPILE_SYSROOT}/bin" ]; then
                echo -e "${RED}Sysroot ${VF_CROSS_COMPILE_SYSROOT} doesn't contain 'bin'.  This isn't a real sysroot!\n${NO_COLOUR}"
                return 1
        fi

	# All done.
	return 0
}

######################################## FUNCTION #########################################
###
### Name:           make_filesystem_from_image
###
### Inputs/Outputs:	None
###
### Purpose:        Builds a filesystem from a prebuilt image.
###
###########################################################################################

make_filesystem_from_image()
{
	local GEN_CACHE=${TCPATH}/tmp/gen_cache/plat_images

	local FS_ARCHIVE=

	# Check to make sure we were given a URL to download the image from.
	if [ -z "${VF_PLAT_PREBUILT_IMAGE_PATH}" ]; then
		# Seems to be no URL specified.
		echo -e "${RED}\tNo image URL configured.\n${NO_COLOUR}"
		return 1
	fi

	# Download the filesystem image if we haven't already.

	# Else, check if the specified file actually exists.
	if [ -f "$1/${VF_PLAT_PREBUILT_IMAGE_PATH}" ]; then
		# A matching file is in the source tree.
		echo -e "${CYAN}\tFound ${VF_PLAT_PREBUILT_IMAGE_PATH} in the source tree.\n${NO_COLOUR}"
		FS_ARCHIVE="$1/${VF_PLAT_PREBUILT_IMAGE_PATH}"
	elif [ -f "$TCPATH/${VF_PLAT_PREBUILT_IMAGE_PATH}" ]; then
		# A matching file is somewhere else in the sandpit.
		echo -e "${CYAN}\tFound ${VF_PLAT_PREBUILT_IMAGE_PATH} in the sandpit.\n${NO_COLOUR}"
		FS_ARCHIVE="$TCPATH/${VF_PLAT_PREBUILT_IMAGE_PATH}"
	else
		# We're going to need to use wget.
		if [ -z "$(which wget)" ]; then
			echo -e "${RED}\tUnable to find wget executable.  Make sure you have wget installed.\n${NO_COLOUR}"
			return 1
		fi

		# We try to see if the path is a URL we can download.
		if [ -n "$(wget -S --spider ${VF_PLAT_PREBUILT_IMAGE_PATH} 2>&1 | grep "HTTP/1.1 200 OK")" ]; then
			# The file seems to exist, so we try to download it.
			echo -e "${CYAN}\tDownloading image from ${VF_PLAT_PREBUILT_IMAGE_PATH}...\n${NO_COLOUR}"
			WGET_OUT="$(wget -N -P "$GEN_CACHE" ${VF_PLAT_PREBUILT_IMAGE_PATH} 2<&1)"

			# See if the file was already downloaded.
			if [ -n "$(echo ${WGET_OUT} | grep "Server file no newer than local file")" ]; then
				# We already seem to have the correct file, so not problem.
				FS_ARCHIVE="$( echo ${WGET_OUT} | grep -o 'Server file no newer than local file .*' | iconv -f utf-8 -t ascii//translit | cut -d " " -f 8 | tr -d "'" )"
				FS_ARCHIVE="${FS_ARCHIVE##*/}"
				#FS_ARCHIVE="${FS_ARCHIVE%?}"
				echo -e "${CYAN}\tFile ${FS_ARCHIVE} already available.\n${NO_COLOUR}"
				FS_ARCHIVE="${GEN_CACHE}/${FS_ARCHIVE}"
			elif [ -n "$(echo ${WGET_OUT} | grep "Not Modified File")" ]; then
				# We already seem to have the correct file, so not problem.
				FS_ARCHIVE="$( echo ${WGET_OUT} | grep -o 'Not Modified File .*' | iconv -f utf-8 -t ascii//translit |  cut -d " " -f 4 | tr -d "'" )"
				FS_ARCHIVE="${FS_ARCHIVE##*/}"
				#FS_ARCHIVE="${FS_ARCHIVE%?}"
				echo -e "${CYAN}\tFile ${FS_ARCHIVE} already available.\n${NO_COLOUR}"
				FS_ARCHIVE="${GEN_CACHE}/${FS_ARCHIVE}"
			else
				# Else, we actually downloaded it.
				FS_ARCHIVE="$(echo ${WGET_OUT} | grep -o " - .* saved" | cut -s -d " " -f 3 )"
				FS_ARCHIVE="${FS_ARCHIVE##*/}"
				FS_ARCHIVE="${FS_ARCHIVE%?}"
				echo -e "${CYAN}\tFile ${FS_ARCHIVE} downloaded successfully.\n${NO_COLOUR}"
				FS_ARCHIVE="${GEN_CACHE}/${FS_ARCHIVE}"
			fi
		elif [ -f "${GEN_CACHE}/${VF_PLAT_PREBUILT_IMAGE_PATH##*/}" ]; then
			# We've already downloaded a file which seems to match.
			echo -e "${CYAN}\tExisting file ${VF_PLAT_PREBUILT_IMAGE_PATH##*/} seems to be a match.\n${NO_COLOUR}"
			FS_ARCHIVE="${GEN_CACHE}/${VF_PLAT_PREBUILT_IMAGE_PATH##*/}"
		fi

		# Check if we actually ended up with a file to use.
		if [ -z "${FS_ARCHIVE}" ]; then
			echo -e "${RED}\tCould not locate image ${VF_PLAT_PREBUILT_IMAGE_PATH}.\n${NO_COLOUR}"
			return 1
		fi
		if [ ! -f "${FS_ARCHIVE}" ]; then
			echo -e "${RED}\tFailed to fetch image ${FS_ARCHIVE}.\n${NO_COLOUR}"
			return 1
		fi
	fi

	# Unpackage the filesystem image to the output folder.

	# Work out what the name of the image file we're going to unpack should be.
	local FS_FILE=
	FS_FILE="${FS_ARCHIVE%.*}"
	if [ "${FS_FILE##*.}" != "img" ]; then
		FS_FILE="${FS_FILE##*/}.img"
	else
		FS_FILE="${FS_FILE##*/}"
	fi

	# Check if there is already an unpacked version of the same file in the output folder.
	if [ -f "$TCPATH/${OUTPUT_DIR}/${COMPONENT}/${COMPONENT_NAME}_image.img" ] && [ $(stat ${VF_OSCFG_STAT_FMTPARAM} %Y "$TCPATH/${OUTPUT_DIR}/${COMPONENT}/${COMPONENT_NAME}_image.img") -ge  $(stat ${VF_OSCFG_STAT_FMTPARAM} %Y "${FS_ARCHIVE}") ]; then
		# There is not need to update the existing image.
		echo -e "${CYAN}\tFilesystem image already up to date.\n${NO_COLOUR}"
	else
		# Unzip (or otherwise unarchive) the image.
		echo -e "${CYAN}\tUnpacking filesystem image into output directory...\n${NO_COLOUR}"
		if [ "${FS_ARCHIVE##*.}" == "zip" ]; then
			unzip -u -o ${FS_ARCHIVE} -d $TCPATH/${OUTPUT_DIR}/${COMPONENT}
		elif [ "${FS_ARCHIVE##*.}" == "xz" ]; then
			unxz -k -f ${FS_ARCHIVE}
			mv "${GEN_CACHE}/${FS_FILE}" "$TCPATH/${OUTPUT_DIR}/${COMPONENT}"
		fi

		# Then rename the unzipped image to the actual name we want.
		mv "$TCPATH/${OUTPUT_DIR}/${COMPONENT}/${FS_FILE}" "$TCPATH/${OUTPUT_DIR}/${COMPONENT}/${COMPONENT_NAME}_image.img"
		if [ -f "$TCPATH/${OUTPUT_DIR}/${COMPONENT}/${COMPONENT_NAME}_image.img" ]; then
			# Update the modification time for this file.
			touch "$TCPATH/${OUTPUT_DIR}/${COMPONENT}/${COMPONENT_NAME}_image.img"
		fi
		echo -e "${CYAN}\n\tFilesystem image written to ${OUTPUT_DIR}/${COMPONENT}.\n${NO_COLOUR}"
	fi

	# In addition to the image, there might also be a partial filesystem included as part of the component.
	make_partial_filesystem

	# All done.
	return 0
}

######################################## FUNCTION #########################################
###
### Name:           make_partial_filesystem
###
### Inputs/Outputs:	None
###
### Purpose:        Builds an archive containing a partial rootfs image.
###
###########################################################################################

make_partial_filesystem()
{
	local FS_ROOT_DIR="fs_root"

	# Check if there is a folder which might contain a partial root filesystem to use.
	if [ -d "$TCPATH/$TMP_SRC_DIR/$COMPONENT/${FS_ROOT_DIR}" ]; then
		# There is.  We can't add it to the image directly, so we copy it to the output folder, so that it can be added to the target when its being loaded.
		echo -e "${CYAN}\tPacking ${FS_ROOT_DIR} to output directory...\n${NO_COLOUR}"
		pushd "$TCPATH/$TMP_SRC_DIR/$COMPONENT/${FS_ROOT_DIR}" > /dev/null
		tar cf "$TCPATH/${OUTPUT_DIR}/${COMPONENT}/${COMPONENT_NAME}_filesystem.tar" *
		popd > /dev/null
	else
		# There isn't one (so we delete the one in the output folder if its there, in case it shouldn't be).
		rm -rf $TCPATH/${OUTPUT_DIR}/${COMPONENT}/${FS_ROOT_DIR}
	fi

	# All done.
	return 0
}

# ALL DONE.
