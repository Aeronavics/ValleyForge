#!/bin/bash

#	Copyright (C) 2012 Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

###########################################################################################################################
###
### Name:			dependency_detection
###
### Author:			Zane Barker
###
### Date Created:	14-01-2015
###
### Type:			Bash Script
###
### Purpose:		Produces various lists of dependencies for the ValleyForge build process
###
###########################################################################################################################

######################################## FUNCTION ####################################################
###
### Name:			list_source_dependencies
###
### Inputs:			1. The directory containing the file which is being examined for dependencies.
###					2. The name of the file which is being examined for dependencies.
###
### Outputs:		SRC_STRING: The list of all detected source files.
###					ASRCS:		The list of detected assembly source files.
###					CSRCS:		The list of detected C/C++ source files.
###
### Purpose:		Finds the list of .c/.cpp/.s source files that are required depended on to
###					compile a given file.
###
######################################################################################################

find_source_dependencies() {
	pushd $1 >/dev/null

	echo -e "${CYAN}\t\t\tDetecting source dependencies for $2....\n${NO_COLOUR}"
	SRC_STRING=
	ASRCS=
	CSRCS=
	# Find the source files required to build the application
	find_source_dependencies_recursive $2

	# Split up the assembly and C/CPP files
	for SRC in $SRC_STRING; do
		if [[ ${SRC} == *.s ]]; then
			ASRCS="$SRC $ASRCS"
		else
			CSRCS="$SRC $CSRCS"
		fi
	done
	echo -e "${CYAN}\t\t\tC source files detected: ${CSRCS}\n${NO_COLOUR}"
	echo -e "${CYAN}\t\t\tAssembly source files detected: ${ASRCS}\n${NO_COLOUR}"

	popd >/dev/null

	# Perhaps this stage could be completed by the calling function?
	# echo $SRC_STRING > FILENAME
}

######################################## FUNCTION ####################################################
###
### Name:			find_source_dependencies_recursive
###
### Inputs/Outputs:	1. The name of the file which is being examined for dependencies.
###
### Purpose:		Recusively examines each source file that is found to discover any nested
###					dependencies.
###
######################################################################################################

find_source_dependencies_recursive() {
	local DEPENDENCIES

	# Use gcc to detect the local .h dependencies, remove the object file reference, convert assembly headers into assembly filenames, swap all remaining instances of .h for .c and remove any instances of $1.
	DEPENDENCIES=$(gcc -MM ${1} | sed "s^.*: ^^g" | sed "s^\\.hs^\\.s^g" | sed "s^\\.h^\\.c^g" | sed "s^${1}^^g")
	# Add each dependency to the list and search of any dependencies of its own.
	for WORD in $DEPENDENCIES; do
		SRC_STRING="${WORD} $SRC_STRING"
		find_source_dependencies_recursive $WORD
	done
}

######################################## FUNCTION ####################################################
###
### Name:			find_object_dependencies
###
### Inputs:			1. The directory containing the file which is being examined for dependencies.
###					2. The name of the file which is being examined for dependencies.
###
### Outputs:		OBJ_STRING: The list of all detected object files.
###
### Purpose:		Finds the list of object files that are required depended on to
###					compile a given file.
###
######################################################################################################
find_object_dependencies() {
	# Reset the OBJ_STRING variable
	OBJ_STRING=
	pushd $1 >/dev/null
	# Ensure we were passed a source file, and not an object file.
	if [ ${2##*.} != "c" -a ${2##*.} != "cpp" ]; then
		ROOT_FILE="$(ls | grep -e "${2%.*}\.\(c\|cpp\)$")"
	else
		ROOT_FILE=$2
	fi

	# Find the list of source dependencies
	find_source_dependencies $1 $ROOT_FILE
	# Convert the source file names into object file names.
	for SRC in $SRC_STRING; do
		OBJ_STRING="${SRC%.*}.o $OBJ_STRING"
	done
	echo -e "${CYAN}\t\t\tObject files dependencies detected: ${OBJ_STRING}\n${NO_COLOUR}"

	pushd >/dev/null
}

######################################## FUNCTION ####################################################
###
### Name:			list_source_dependencies
###
### Inputs:			1. The directory containing the file which is being examined for dependencies.
###					2. The name of the file which is being examined for dependencies.
###
### Outputs:		Writes the source dependencies to $2.sd
###
### Purpose:		Writes the list of object dependencies to a .(c|cpp).sd file. Each source file 
###					on its own line.
###
######################################################################################################
list_source_dependencies() {
	pushd $1 >/dev/null
	# Remove the output file if it already exists.
	rm -f "$2.sd"
	find_source_dependencies $1 $2
	# Append each file name to the output file.
	for SRC in $SRC_STRING; do
		echo "$SRC" >> "$2.sd"
	done
	pushd >/dev/null
}

######################################## FUNCTION ####################################################
###
### Name:			list_object_dependencies
###
### Inputs:			1. The directory containing the file which is being examined for dependencies.
###					2. The name of the file which is being examined for dependencies.
###
### Outputs:		Writes the object dependencies to $2.ld
###
### Purpose:		Writes the list of object dependencies to a .ld file. Each object file on
###					its own line.
###
######################################################################################################
list_object_dependencies() {
	pushd $1 >/dev/null
	# Remove the output file if it already exists.
	rm -f "${2%.*}.ld"
	find_object_dependencies $1 $2
	# Append each file name to the output file.
	for OBJ in $OBJ_STRING; do
		echo "$OBJ" >> "${2%.*}.ld"
	done
	# Sort and remove duplicate entries
	sort -u "${2%.*}.ld" -o "${2%.*}.ld"
	pushd >/dev/null	
}

######################################## FUNCTION ####################################################
###
### Name:			list_library_dependencies
###
### Inputs:			1. The directory containing the file which is being examined for dependencies.
###					2. The name of the file which is being examined for dependencies.
###
### Outputs:		OBJ_STRING:	The list of all detected object files.
###
### Purpose:		Finds the list of object files that are required depended on to
###					compile a given file.
###
######################################################################################################
list_library_dependencies() {
	pushd $1 >/dev/null
	find . -name "lib*.a" > ${2%.*}.lld
	popd >/dev/null
}