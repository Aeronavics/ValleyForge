#!/usr/bin/env bash

#	Copyright (C) 2012 Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

###########################################################################################################################
###
### Name:			dependency_detection
###
### Author:			Zane Barker
###
### Date Created:	14-01-2015
###
### Type:			Bash Script
###
### Purpose:		Produces various lists of dependencies for the ValleyForge build process
###
###########################################################################################################################

######################################## FUNCTION ####################################################
###
### Name:			list_source_dependencies
###
### Inputs:			1. The directory containing the file which is being examined for dependencies.
###					2. The name of the file which is being examined for dependencies.
###
### Outputs:		SRC_STRING: The list of all source and header files that the examined file depends on.
###					ASRCS:		The list of assembly source files that the examined file depends on.
###					CSRCS:		The list of C source files that the examined file depends on.
###					PSRCS:		The list of CPP source files that the examined file depends on.
###					HSRCS:		The list of header files that the examined file depends on.
###
### Purpose:		Finds the list of .c/.cpp/.s/.h/.hpp/.hs source files that are depended on by
###					a given file.
###
######################################################################################################

find_source_dependencies()
{
	# Push into the folder containing the source.
	pushd "$1" >/dev/null

	# Reset the output variables
	SRC_STRING=
	ASRCS=
	CSRCS=
	PSRCS=
	HSRCS=

	# A flag we use to indicate if some source files don't meet our dependency detection specifications (but we can still guess our way through).
	local VF_WARN_ONCE_DEPENDENCY_DETECTION_COMPLIANCE=

	# If the target file starts with "./" remove it, because that screws some things up.
	local TARGET_FILE=$(echo "${2}" | ${VF_OSCFG_SED} "s#^\./##g")

	# Find the source files required to build the application.
	echo -e "${CYAN}\tDetecting source dependencies for ${TARGET_FILE}...\n${NO_COLOUR}"

	if [ ${VF_DEBUG} ]; then
		echo -e "Using: ${C_COMPILER} ${CFLAGS} -MM ***"
		echo -e "Using: ${P_COMPILER} ${PFLAGS} -MM ***"
		echo -e "Using: ${ASSEMBLER} ${AFLAGS} -MM ***"
	fi

	if ! find_source_dependencies_recursive ${TARGET_FILE}; then
		# Something went wrong.
		echo -e "${RED}\tUnable to calculate source dependencies for ${TARGET_FILE}.\n${NO_COLOUR}"
		return 1
	fi

	# Remove anything where a relative path goes up a level, then down the same way again, because that might screw things up.
	SRC_STRING=$(echo "$SRC_STRING" | ${VF_OSCFG_SED} ${VF_OSCFG_SED_EXTPARAM} "s^[^/]+/\\.\\./^^g" | ${VF_OSCFG_SED} ${VF_OSCFG_SED_EXTPARAM} "s^/\\./^/^g")

	# Sort the object files and remove any duplicate entries. tr is used to turn the space-delimited list into a newline delimited list for sort, before converting it back again.
	SRC_STRING=$(echo "$SRC_STRING" | tr " " "\n" | sort -u | tr "\n" " ")

	# Split up the assembly, C/CPP and header files
	for SRC in $SRC_STRING; do
		if [[ ${SRC} == *\.s ]]; then
			ASRCS="$SRC $ASRCS"
		elif [[ ${SRC} == *\.c ]]; then
			CSRCS="$SRC $CSRCS"
		elif [[ ${SRC} == *\.cpp ]]; then
			PSRCS="$SRC $PSRCS"
		elif [[ ${SRC} == *\.h* ]]; then
			HSRCS="$SRC $HSRCS"
		fi
	done

	# Remove any leading spaces
	ASRC="$(echo "$ASRCS" | ${VF_OSCFG_SED} 's/^ *//')"
	CSRCS="$(echo "$CSRCS" | ${VF_OSCFG_SED} 's/^ *//')"
	PSRCS="$(echo "$PSRCS" | ${VF_OSCFG_SED} 's/^ *//')"
	HSRCS="$(echo "$HSRCS" | ${VF_OSCFG_SED} 's/^ *//')"
	SRC_STRING="$(echo "$SRC_STRING" | ${VF_OSCFG_SED} 's/^ *//')"

	# Print out the dependencies that we found.
	if [ -n "${CSRCS}" ]; then
		echo -e "${CYAN}\tC source dependencies detected:\n\t${NO_COLOUR}${CSRCS}${NO_COLOUR}"
	fi
	if [ -n "${PSRCS}" ]; then
		echo -e "${CYAN}\tCPP source dependencies detected:\n\t${NO_COLOUR}${PSRCS}${NO_COLOUR}"
	fi
	if [ -n "${ASRCS}" ]; then
		echo -e "${CYAN}\tAssembly source dependencies detected:\n\t${NO_COLOUR}${ASRCS}\n${NO_COLOUR}"
	fi
	if [ -n "${HSRCS}" ]; then
		echo -e "${CYAN}\tHeader dependencies detected:\n\t${NO_COLOUR}${HSRCS}\n${NO_COLOUR}"
	fi

	# Leave the folder containing the source.
	popd >/dev/null

	# All done.
	return 0
}

######################################## FUNCTION ####################################################
###
### Name:			find_source_dependencies_recursive
###
### Inputs:			1. The name of the file which is being examined for dependencies.
###
### Outputs:		SRC_STRING: A variable containing all of the detected source files.
###
### Purpose:		Recusively examines each source file that is found to discover any nested
###					dependencies.
###
######################################################################################################

find_source_dependencies_recursive()
{
	local DEPENDENCIES
	local SRC_FILE

	add_dependency_recursive()
	{
		#
		#	We define this here, to avoid repeating this code block a bunch of times in the case statement below.
		#
		#	$1 - The relative path to the source file to add as a dependency (then recurse into, if we haven't already).
		#

		# If this source file is already listed as a dependency, then we don't add it again, to avoid circular dependencies.
		if [ -n "$(echo ${SRC_STRING} | grep $1)" ]; then
			# This source file has already been added, so we don't want to recurse into it again.
			return 0
		else
			SRC_STRING="$1 ${SRC_STRING}"
			if ! find_source_dependencies_recursive $1; then
				return 1
			fi
		fi

		# All done.
		return 0
	}

	# The first argument is the relative path of the target file.
	local TARGET_FILE=${1}

	# If the target file starts with "./" remove it, because that screws some things up.
	TARGET_FILE=$(echo "${TARGET_FILE}" | ${VF_OSCFG_SED} "s#^\./##g")

	# Find the basename of examined file by removing any directory or filetype components.
	TARGET_BASENAME=${TARGET_FILE%.*}
	TARGET_BASENAME=${TARGET_BASENAME##*/}
	TARGET_DIRECTORY=${TARGET_FILE%/*}

	# Read in the content of the target file, but comment out any #error directives, since we aren't looking for errors, just dependencies.  Any actual errors will be picked up during the compilation stage.
	local TARGET_CONTENT="$(cat < ${TARGET_FILE} | ${VF_OSCFG_SED} 's^#error ^//TEMP_COMMENT#error ^g')"

	# NOTE - This stops #ifndef, #error issues when the definition being searched for is defined in a system directory, as these are not searched for at the dependency detection stage.
	
	# NOTE - This also causes GCC to be unable to find files in the same directory as the target, so we manually include this directory when we call GCC.
	
	# Prepend the content with a #line directive, so that GCC knows what file it's compiling (so errors are traceable).
	TARGET_CONTENT="#line 1 \"${TARGET_FILE}\"\n${TARGET_CONTENT}"

	# Detecting header dependencies is different for various source types, because you need to use the correct flags.
	case ${TARGET_FILE##*.} in
		"c")
			# Use C compiler to detect the local header dependencies.
			DEPENDENCIES=$(echo "${TARGET_CONTENT}" | ${C_COMPILER} ${CFLAGS} -I ${TARGET_DIRECTORY} -x c - -MM )
			;;
		"cpp")
			# Use CPP compiler to detect the local header dependencies.
			DEPENDENCIES=$(echo "${TARGET_CONTENT}" | ${P_COMPILER} ${PFLAGS} -I ${TARGET_DIRECTORY} -x c++ - -MM )
			;;
		"s")
			# Use assembler to detect the local header dependencies.
			DEPENDENCIES=$(echo "${TARGET_CONTENT}" | ${ASSEMBLER} ${AFLAGS} -I ${TARGET_DIRECTORY} - -MM )

			# TODO - Probably need to handle both gcc and as options, in case some targets want to call the assembler directly.

			# NOTE - For some insane reason, the -MM option doesn't work for the assembler, so if using as instead of gcc, need this craziness instead.

			#${ASSEMBLER} ${AFLAGS} -MD ${TARGET_BASENAME}.d ${TARGET_FILE} -o ${TARGET_BASENAME}.o > /dev/null
			#DEPENDENCIES=$(cat ${TARGET_BASENAME}.d)
			#if [ -z "$DEPENDENCIES" ]; then
			#	false
			#fi
			#rm "${TARGET_BASENAME}.d"
			;;
		"h")
			# Do nothing, since header files don't require a dependency list.
			;;
		"hpp")
			# Do nothing, since header files don't require a dependency list.
			;;
		"hs")
			# Do nothing, since header files don't require a dependency list.
			;;
		*)
			echo -e "${RED}\tUnable to detect dependencies for unsupported source file: ${TARGET_FILE}."
			return 1
	esac

	# NOTE - Don't put anything in here; we need the return value from the compiler below.

	if [ $? != 0 ]; then
		echo -e "\n${RED}\tUnable to detect dependencies for broken source file: ${TARGET_FILE}.\n${NO_COLOUR}"
		return 1
	fi

	# Insert a line break after the target, so that each actual dependency is on its own line.
	DEPENDENCIES=$(echo "${DEPENDENCIES}" | ${VF_OSCFG_SED} "s^\(.*:\)\(.*\)^\1 \\\\ \n\2^g" | ${VF_OSCFG_SED} "s^ ^ \\\\\n^g" | ${VF_OSCFG_SED} "/^[\\ ]*$/d")

	# Remove dependencies which share the target's basename, so that it doesn't depend on itself.
	DEPENDENCIES=$(echo "${DEPENDENCIES}" | ${VF_OSCFG_SED} "\^${TARGET_FILE%.*}\.\S*^d")

	# Add each dependency to the list and search for any dependencies of its own.

	# Iterate over each .h/.hpp/.hs file that is a dependency.
	for WORD in $DEPENDENCIES; do
		# Obviously, skip the first line, which contains the target (or just a dash, if GCC is reading from standard input, which currently is what we do above).
		if [ "${WORD}" == "-:" ]; then
			continue
		fi
		if [ "${WORD}" == "${TARGET_BASENAME}.o:" ]; then
			continue
		fi

		# Also, every second word is going to be the dependency file line continuation symbol, which we should also ignore.
		if [ "${WORD}" == "\\" ]; then
			continue
		fi

		# Check if the header itself actually exists.
		if [ ! -e ${WORD} ]; then
			# The header doesn't exist.  That seems a bit concerning.
			echo -e "${YELLOW}\tCannot find file: ${WORD}.  Build will probably fail.${NO_COLOUR}"
			continue
		fi

		# TODO - The below probably fails miserably for native builds.

		# Check if the header looks like a system header.
		if [ -n "${VF_CROSS_COMPILE_SYSROOT}" ]; then
			if (echo "${WORD}" | grep -e "${VF_CROSS_COMPILE_SYSROOT}/.*" >/dev/null); then
				# This looks like a system header, so we won't recurse into it: we assume system libraries don't need compiling!
				if [ ${VF_DEBUG} ]; then
					echo -e "${YELLOW}\t${WORD} is a system file, we'll ignore it.${NO_COLOUR}"
				fi
				continue
			fi
		fi

		# Then, check if a respective source file exists and if so, add it to SRC_STRING.  If necessary, then recurse its own dependencies.
		case ${WORD##*.} in
			"h")
				if [ -e ${WORD%.*}.c ]; then
					SRC_FILE="${WORD%.*}.c"
					if ! add_dependency_recursive ${SRC_FILE}; then
						return 1
					fi
				elif [ -e ${WORD%.*}.cpp ]; then
					if [ -z "${VF_WARN_ONCE_DEPENDENCY_DETECTION_COMPLIANCE}" ]; then
						echo -e "${YELLOW}\tC Header file (${WORD}) matches a CPP source file.  This is VF non-compliant. (Subsequent warnings will be suppressed.)${NO_COLOUR}"
						VF_WARN_ONCE_DEPENDENCY_DETECTION_COMPLIANCE=1
					fi
					SRC_FILE="${WORD%.*}.cpp"
					if ! add_dependency_recursive ${SRC_FILE}; then
						return 1
					fi
				else
					# There is no associated .cpp file, but we still need to keep track of the .h file.
					SRC_FILE=${WORD}
					if ! add_dependency_recursive ${SRC_FILE}; then
						return 1
					fi
				fi
				;;
			"hpp")
				if [ -e ${WORD%.*}.cpp ]; then
					SRC_FILE="${WORD%.*}.cpp"
					if ! add_dependency_recursive ${SRC_FILE}; then
						return 1
					fi
				else
					# There is no associated .cpp file, but we still need to keep track of the .hpp file.
					SRC_FILE=${WORD}
					if ! add_dependency_recursive ${SRC_FILE}; then
						return 1
					fi
				fi
				;;
			"hs")
				if [ -e ${WORD%.*}.s ]; then
					SRC_FILE="${WORD%.*}.s"
					if ! add_dependency_recursive ${SRC_FILE}; then
						return 1
					fi
				else
					# There is no associated .s file, but we still need to keep track of the .hs file.
					SRC_FILE=${WORD}
					if ! add_dependency_recursive ${SRC_FILE}; then
						return 1
					fi
				fi
				;;
		esac
	done

	# All done.
	return 0
}

######################################## FUNCTION ####################################################
###
### Name:			find_object_dependencies
###
### Inputs:			1. The directory containing the file which is being examined for dependencies.
###					2. The name of the file which is being examined for dependencies.
###
### Outputs:		OBJ_STRING: A variable containing the list of all detected object files.
###
### Purpose:		Finds the list of object files that are required depended on to
###					compile a given file.
###
######################################################################################################

find_object_dependencies()
{
	# Push into the folder containing the source.
	pushd "$1" >/dev/null

	# Reset the OBJ_STRING variable
	OBJ_STRING=

	# If the target file starts with "./" remove it, because that screws some things up.
	local TARGET_FILE=$(echo "${2}" | ${VF_OSCFG_SED} "s#^\./##g")

	# Ensure we were passed a source file, and not an object file.
	if [ "${TARGET_FILE##*.}" != "c" -a "${TARGET_FILE##*.}" != "cpp" -a "${TARGET_FILE##*.}" != "s" ]; then
		echo -e "${RED}\tCannot perform object dependency detection on non-source file: ${TARGET_FILE}\n${NO_COLOUR}"
		return 1
	fi
	ROOT_FILE=${TARGET_FILE}

	# Find the list of source dependencies.
	if ! find_source_dependencies . $ROOT_FILE; then
		# Something went wrong.
		echo -e "${RED}\tUnable to calculate object dependencies for ${2}.\n${NO_COLOUR}"
		return 1
	fi

	# Convert the source file names into object file names.
	for SRC in ${ASRCS} ${CSRCS} ${PSRCS}; do
		OBJ_STRING="${SRC%.*}.o $OBJ_STRING"
	done

	# Add the original file being examined to the list of objects. This is done here and not in find_source_dependencies since find_source_dependencies is also used for NuttX/Pixhawk, which do not want the main file being mixed in with the rest of the source files.
	OBJ_STRING="${ROOT_FILE%.*}.o ${OBJ_STRING}"

	# Append any loose objects (those which aren't detected by the dependency detection system) which the user might know are required.
	if [ -n "${LOOSE_OBJECTS}" ]; then
		echo -e "${YELLOW}\tIncluding loose objects: ${NO_COLOUR}${LOOSE_OBJECTS}${NO_COLOUR}"
		OBJ_STRING="${OBJ_STRING} ${LOOSE_OBJECTS}"
	fi

	# Sort the object files and remove any duplicate entries. tr is used to turn the space-delimited list into a newline delimited list for sort, before converting it back again.
	OBJ_STRING=$(echo "$OBJ_STRING" | tr " " "\n" | sort -u | tr "\n" " ")

	# Remove any leading spaces.
	OBJ_STRING="$(echo "$OBJ_STRING" | ${VF_OSCFG_SED} 's/^ *//')"
	echo -e "${CYAN}\tObject file dependencies detected:\n\t${NO_COLOUR}${OBJ_STRING}\n${NO_COLOUR}"

	# Leave the folder containing the source.
	pushd >/dev/null

	# All done.
	return 0
}

######################################## FUNCTION ####################################################
###
### Name:			list_source_dependencies
###
### Inputs:			1. The directory containing the file which is being examined for dependencies.
###					2. The name of the file which is being examined for dependencies.
###
### Outputs:		Writes the source dependencies to $2.sd
###
### Purpose:		Writes the list of object dependencies to a .(c|cpp).sd file. Each source file
###					on its own line.
###
######################################################################################################

list_source_dependencies()
{
	# Push into the folder containing the source.
	pushd "$1" >/dev/null

	# Remove the output file if it already exists.
	rm -f "$2.sd"

	# Calculate the source dependencies.
	if ! find_source_dependencies . $2; then
		# Something went wrong.
		echo -e "${RED}\tUnable to calculate source dependencies for ${2}.\n${NO_COLOUR}"
		return 1
	fi

	# Append each file name to the output file.
	for SRC in $SRC_STRING; do
		echo "$SRC" >> "$2.sd"
	done

	# Leave the folder containing the source.
	pushd >/dev/null

	# All done.
	return 0
}

######################################## FUNCTION ####################################################
###
### Name:			list_object_dependencies
###
### Inputs:			1. The directory containing the file which is being examined for dependencies.
###					2. The name of the file which is being examined for dependencies.
###
### Outputs:		Writes the object dependencies to $2.ld (with the original suffix removed).
###
### Purpose:		Writes the list of object dependencies to a .ld file. Each object file name on
###					its own line.
###
######################################################################################################

list_object_dependencies()
{
	# Push into the folder containing the source.
	pushd "$1" >/dev/null

	# Remove the output file if it already exists.
	rm -f "${2%.*}.ld"

	if ! find_object_dependencies . $2; then
		# Something went wrong.
		echo -e "${RED}\tUnable to calculate object dependencies for ${2}.\n${NO_COLOUR}"
		return 1
	fi

	echo "OBJS =${OBJ_STRING}" > "${2%.*}.ld"

	# Leave the folder containing the source.
	pushd >/dev/null

	# All done.
	return 0
}

######################################## FUNCTION ####################################################
###
### Name:			list_library_dependencies
###
### Inputs:			1. The directory containing the file which is being examined for dependencies.
###					2. The name of the file which is being examined for dependencies.
###
### Outputs:		Writes the list of library dependencies to $2.lld
###					(with the original suffix removed).
###
### Purpose:		Writes the list of library dependencies to a .lld file. Each library file name
###					on its own line.
###
######################################################################################################

list_library_dependencies()
{
	# Push into the folder containing the source.
	pushd "$1" >/dev/null

	# All we do is list anything that looks like it might be a library archive.
	find . -name "lib*.a" > ${2%.*}.lld

	# Leave the folder containing the source.
	popd >/dev/null
}

######################################## FUNCTION ####################################################
###
### Name:			generate_component_dependencies
###
### Inputs:			1. The directory containing the file which is being examined for dependencies.
###					2. The name of the file which is being examined for dependencies.
###
### Outputs:		Creates a file called "Make.deps" in the directory being examined. This file
###					is designed to be included in a makefile to fill in all of the recipes as well
###					as to provide the list of objects and library files for final linking.
###
### Purpose:		Produces all of the dependencies for compiling all of the modules in the project.
###
######################################################################################################

generate_component_dependencies()
{
	add_dependencies()
	{
		#
		#	We define this here, to avoid repeating this code block a bunch of times in the case statement below.
		#
		#	$1 - The dependency string to be added to the makefile definitions.
		#

		local DEPENDENCIES=$1

		# For some reason the target gets its base path chopped off, so we need to fix that back again incase of files with similar names.
		DEPENDENCIES=$(echo "${DEPENDENCIES}" | ${VF_OSCFG_SED} ${VF_OSCFG_SED_EXTPARAM} "s^.*:^${TARGET_FILE%.*}\.o:^g")

		# Remove anything where a relative path goes up a level, then down the same way again, because that might screw things up.
		DEPENDENCIES=$(echo "${DEPENDENCIES}" | ${VF_OSCFG_SED} ${VF_OSCFG_SED_EXTPARAM} "s^[^/]+/\\.\\./^^g" | ${VF_OSCFG_SED} ${VF_OSCFG_SED_EXTPARAM} "s^/\\./^/^g")

		echo "${DEPENDENCIES}" >> Make.deps
		echo " " >> Make.deps
	}

	# Push into the folder containing the source.
	pushd "$1" >/dev/null

	# Remove the Make.deps file if it exists already.
	rm -f Make.deps

	# Check the specified file actually exists.
	if [ ! -f "$2" ]; then
		# The file doesn't even exist!
		echo -e "${RED}\tCouldn't find parent source file.\n${NO_COLOUR}"
		return 1
	fi

	# List the executable linker dependencies.
	if ! find_object_dependencies . $2; then
		# Something went wrong.  Don't need to print a message, there will already be one.
		return 1
	fi

	# Else, we detected the executable dependencies ok.
	echo -e "# Executable Linker Dependencies.\n" >> Make.deps

	# Sort the object files and remove any duplicate entries. tr is used to turn the space-delimited list into a newline delimited list for sort, before converting it back again.
	OBJ_STRING=$(echo "${OBJ_STRING}" | tr " " "\n" | sort -u | tr "\n" " ")
	echo -e "OBJS =${OBJ_STRING}\n" >> Make.deps

	# List the library dependencies
	echo -e "# Executable Linker Library Dependencies.\n" >> Make.deps
	LIB_STRING=$(find . -name "lib*.a" | tr "\n" " ")
	echo -e "LIBS = ${LIB_STRING}\n" >> Make.deps

	# List the object dependencies
	echo -e "# Object File Dependencies.\n" >> Make.deps

	# Use the -MM flag to generate a rule describing the dependencies of each source file for make.
	for SRC in $ASRCS $CSRCS $PSRCS; do
		# Alias the source file, for consistency with the detect source deps function.
		local TARGET_FILE=${SRC}
		local TARGET_BASENAME

		# Find the basename of examined file by removing any directory or filetype components.
		TARGET_BASENAME=${TARGET_FILE%.*}
		TARGET_BASENAME=${TARGET_BASENAME##*/}

		local DEPENDENCIES
		case ${SRC##*.} in
			"c")
				DEPENDENCIES=$(${C_COMPILER} ${CFLAGS} -MM ${TARGET_FILE})

				add_dependencies ${DEPENDENCIES}
				;;
			"cpp")
				DEPENDENCIES=$(${P_COMPILER} ${PFLAGS} -MM ${TARGET_FILE})

				add_dependencies ${DEPENDENCIES}
				;;
			"s")
				# Use assembler to detect the local header dependencies.
				DEPENDENCIES=$(${ASSEMBLER} ${AFLAGS} -MM ${TARGET_FILE})

				# TODO - As above, some targets might want to use the assembler rather than just calling the compiler.

				# NOTE - For some insane reason, the -MM option doesn't work for the assembler, so need this craziness instead.

				#${ASSEMBLER} ${AFLAGS} -MD ${TARGET_BASENAME}.d ${TARGET_FILE} -o ${TARGET_BASENAME}.o > /dev/null
				#if [ -z "$(cat ${TARGET_BASENAME}.d)" ]; then
				#	false
				#fi
				#DEPENDENCIES=$(cat "${TARGET_BASENAME}.d")
				#rm "${TARGET_BASENAME}.d"

				add_dependencies ${DEPENDENCIES}
				;;
			*)
				echo -e "${RED}\tUnable to detect dependencies for unsupported source file: ${TARGET_FILE}."
				exit 1
				;;
		esac

		# NOTE - Don't put anything in here; we need the return value from the compiler below.

		if [ $? != 0 ]; then
			echo -e "\n${RED}\tUnable to detect dependencies for broken source file: ${TARGET_FILE}.\n${NO_COLOUR}"
			return 1
		fi
	done

	# Leave the folder containing the source.
	popd >/dev/null

	# All done.
	return 0
}

######################################## FUNCTION ####################################################
###
### Name:			generate_include_library_flags
###
### Inputs:			1. The directory containing the file which is being examined for dependencies.
###					2. The name of the file which is being examined for dependencies.
###
### Outputs:        Returns zero for success, non-zero for failure.
###
### Purpose:		Updates the compiler flag variables (CFLAGS, PFLAGS, AFLAGS) to include required
###                 header file paths and library linking flags to support whatever system libraries
###                 the component is going to link against.
###
######################################################################################################
generate_include_library_flags()
{
	# Check if we are cross compiling.
	if [ ! "${TARGET}" == "Native" ]; then
		if [ -n "${VF_CROSS_COMPILE_SYSROOT}" ]; then
			# Because we are cross compiling, we need to make sure pkg_config is looking to link to libraries on our target.
			export PKG_CONFIG_SYSROOT_DIR=${VF_CROSS_COMPILE_SYSROOT}
			export PKG_CONFIG_DIR=
			export PKG_CONFIG_LIBDIR=$(eval echo ${VF_PKG_CONFIG_LIBDIRS})
			if [ ${VF_DEBUG} ]; then
				echo -e "${BOLD_WHITE}PKG CONFIG LIBDIRS: ${NO_COLOUR}$(eval echo ${VF_PKG_CONFIG_LIBDIRS})\n${NO_COLOUR}"
			fi
		fi
	fi

	# Resolve system header and library references.
	if [ -n "${VF_LIB_DEPS}" ]; then
		# Iterate over each unique library name.
		echo -e "${CYAN}Detecting include details for required system libraries:\n${NO_COLOUR}"
		local LIB_NAME
		for LIB_NAME in $(echo ${VF_LIB_DEPS} | xargs -n1 | sort -u | xargs); do
			# Try to resolve include (header) flags for this library.
			local LIB_H_FLAGS=$(pkg-config --cflags ${LIB_NAME} 2>&1)
			if [ -n "$(echo ${LIB_H_FLAGS} | grep "No package '${LIB_NAME}' found")" ]; then
				# Something went wrong.
				echo -e "${RED}\t${LIB_NAME}: Could not find package.${NO_COLOUR}"
				continue
			elif [ -n "$(echo ${LIB_H_FLAGS} | grep "required by '${LIB_NAME}', not found")" ]; then
				# Something went wrong.
				echo -e "${RED}\t${LIB_NAME}: Could not find dependency.${NO_COLOUR}"
				continue
			fi
			echo -e "${CYAN}\t${LIB_NAME}: Include Flags: ${LIB_H_FLAGS}"
			CFLAGS+=" ${LIB_H_FLAGS}"
			PFLAGS+=" ${LIB_H_FLAGS}"
			AFLAGS+=" ${LIB_H_FLAGS}"

			# Try to resolve library (linker) flags for this library.
			local LIB_L_FLAGS=$(pkg-config --libs ${LIB_NAME})
			if [ -n "$(echo ${LIB_L_FLAGS} | grep "No package")" ]; then
				# Something went wrong.
				echo -e "${RED}\t${LIB_NAME}: Could not find package.${NO_COLOUR}"
				continue
			fi
			echo -e "${CYAN}\t${LIB_NAME}: Library Flags: ${LIB_L_FLAGS}"
			LFLAGS+=" ${LIB_L_FLAGS}"
		done
		echo ""
	fi

	# Restore pkg_config to normal operation.
	unset PKG_CONFIG_SYSROOT_DIR
	unset PKG_CONFIG_DIR
	unset PKG_CONFIG_LIBDIR
	unset PKG_CONFIG_DEBUG_SPEW
}

# ALL DONE.
