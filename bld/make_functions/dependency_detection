#!/bin/bash

#	Copyright (C) 2012 Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

###########################################################################################################################
###
### Name:			dependency_detection
###
### Author:			Zane Barker
###
### Date Created:	14-01-2015
###
### Type:			Bash Script
###
### Purpose:		Produces various lists of dependencies for the ValleyForge build process
###
###########################################################################################################################

######################################## FUNCTION ####################################################
###
### Name:			list_source_dependencies
###
### Inputs:			1. The directory containing the file which is being examined for dependencies.
###					2. The name of the file which is being examined for dependencies.
###
### Outputs:		SRC_STRING: The list of all source files that the examined file depends on.
###					ASRCS:		The list of assembly source files that the examined file depends on.
###					CSRCS:		The list of C/C++ source files that the examined file depends on.
###
### Purpose:		Finds the list of .c/.cpp/.s source files that are depended on by
###					a given file.
###
######################################################################################################

find_source_dependencies() {
	pushd $1 >/dev/null
	echo -e "${CYAN}\tDetecting source dependencies for ${2##*/}....\n${NO_COLOUR}"
	# Reset the output variables
	SRC_STRING=
	ASRCS=
	CSRCS=
	# Find the source files required to build the application.
	find_source_dependencies_recursive $2

	# Sort the object files and remove any duplicate entries. tr is used to turn the space-delimited
	# list into a newline delimited list for sort, before converting it back again.
	SRC_STRING=$(echo "$SRC_STRING" | tr " " "\n" | sort -u | tr "\n" " ")

	# Split up the assembly and C/CPP files
	for SRC in $SRC_STRING; do
		if [[ ${SRC} == *.s ]]; then
			ASRCS="$SRC $ASRCS"
		elif [[ ${SRC} == *.c ]]; then
			CSRCS="$SRC $CSRCS"
		elif [[ ${SRC} == *.cpp ]]; then
			CSRCS="$SRC $CSRCS"
		fi
	done
	# Remove any leading spaces
	ASRC="$(echo "$ASRCS" | sed 's/^ *//')"
	CSRCS="$(echo "$CSRCS" | sed 's/^ *//')"
	SRC_STRING="$(echo "$SRC_STRING" | sed 's/^ *//')"

	echo -e "${CYAN}\tC source files detected: ${CSRCS}\n${NO_COLOUR}"
	echo -e "${CYAN}\tAssembly source files detected: ${ASRCS}\n${NO_COLOUR}"

	popd >/dev/null
}

######################################## FUNCTION ####################################################
###
### Name:			find_source_dependencies_recursive
###
### Inputs:			1. The name of the file which is being examined for dependencies.
###
### Outputs:		SRC_STRING: A variable containing all of the detected source files.
###
### Purpose:		Recusively examines each source file that is found to discover any nested
###					dependencies.
###
######################################################################################################

find_source_dependencies_recursive() {
	local DEPENDENCIES
	local TARGET_FILE
	# Find the basename of examined file by removing any directory or filetype components
	TARGET_BASENAME=${1%.*}
	TARGET_BASENAME=${TARGET_BASENAME##*/}

	# Use gcc to detect the local .h dependencies, then remove any files with "TARGET_BASENAME" followed by a "." and any number of characters.
	DEPENDENCIES=$(gcc -MM ${1} | sed "s/${TARGET_BASENAME}\.\S*//g")
	# Add each dependency to the list and search of any dependencies of its own.

	# For each .h/.hpp/.hs file, check if a respective source file exists and if so, add it SRC_STRING.
	for WORD in $DEPENDENCIES; do
		case ${WORD##*.} in
			"h")
				if [ -e ${WORD%.*}.c ]; then
					SRC_STRING="${WORD%.*}.c ${SRC_STRING}"
					find_source_dependencies_recursive ${WORD%.*}.c
				elif [ -e ${WORD%.*}.cpp ]; then
					SRC_STRING="${WORD%.*}.cpp ${SRC_STRING}"
					find_source_dependencies_recursive ${WORD%.*}.cpp
				fi
				;;
			"hpp")
				if [ -e ${WORD%.*}.cpp ]; then
					SRC_STRING="${WORD%.*}.cpp ${SRC_STRING}"
					find_source_dependencies_recursive ${WORD%.*}.cpp
				fi
				;;
			"hs")
				if [ -e ${WORD%.*}.s ]; then
					SRC_STRING="${WORD%.*}.s ${SRC_STRING}"
					find_source_dependencies_recursive ${WORD%.*}.s
				fi
				;;
		esac
	done
}

######################################## FUNCTION ####################################################
###
### Name:			find_object_dependencies
###
### Inputs:			1. The directory containing the file which is being examined for dependencies.
###					2. The name of the file which is being examined for dependencies.
###
### Outputs:		OBJ_STRING: A variable containing the list of all detected object files.
###
### Purpose:		Finds the list of object files that are required depended on to
###					compile a given file.
###
######################################################################################################
find_object_dependencies() {
	# Reset the OBJ_STRING variable
	OBJ_STRING=
	pushd $1 >/dev/null
	# Ensure we were passed a source file, and not an object file.
	if [ ${2##*.} != "c" -a ${2##*.} != "cpp" ]; then
		ROOT_FILE="$(ls | grep -e "${2%.*}\.\(c\|cpp\)$")"
	else
		ROOT_FILE=$2
	fi
	# Find the list of source dependencies
	find_source_dependencies . $ROOT_FILE
	# Convert the source file names into object file names.
	for SRC in $SRC_STRING; do
		OBJ_STRING="${SRC%.*}.o $OBJ_STRING"
	done
	# Add the 
	OBJ_STRING="${ROOT_FILE%.*}.o ${OBJ_STRING}"
	# Sort the object files and remove any duplicate entries. tr is used to turn the space-delimited
	# list into a newline delimited list for sort, before converting it back again.
	OBJ_STRING=$(echo "$OBJ_STRING" | tr " " "\n" | sort -u | tr "\n" " ")
	# Remove any leading spaces
	OBJ_STRING="$(echo "$OBJ_STRING" | sed 's/^ *//')"
	echo -e "${CYAN}\tObject file dependencies detected: ${OBJ_STRING}\n${NO_COLOUR}"

	pushd >/dev/null
}

######################################## FUNCTION ####################################################
###
### Name:			list_source_dependencies
###
### Inputs:			1. The directory containing the file which is being examined for dependencies.
###					2. The name of the file which is being examined for dependencies.
###
### Outputs:		Writes the source dependencies to $2.sd
###
### Purpose:		Writes the list of object dependencies to a .(c|cpp).sd file. Each source file 
###					on its own line.
###
######################################################################################################
list_source_dependencies() {
	pushd $1 >/dev/null
	# Remove the output file if it already exists.
	rm -f "$2.sd"
	find_source_dependencies . $2
	# Append each file name to the output file.
	for SRC in $SRC_STRING; do
		echo "$SRC" >> "$2.sd"
	done
	pushd >/dev/null
}

######################################## FUNCTION ####################################################
###
### Name:			list_object_dependencies
###
### Inputs:			1. The directory containing the file which is being examined for dependencies.
###					2. The name of the file which is being examined for dependencies.
###
### Outputs:		Writes the object dependencies to $2.ld (with the original suffix removed).
###
### Purpose:		Writes the list of object dependencies to a .ld file. Each object file name on
###					its own line.
###
######################################################################################################
list_object_dependencies() {
	pushd $1 >/dev/null
	# Remove the output file if it already exists.
	rm -f "${2%.*}.ld"
	find_object_dependencies . $2
	echo "OBJS =${OBJ_STRING}" > "${2%.*}.ld"
	pushd >/dev/null	
}

######################################## FUNCTION ####################################################
###
### Name:			list_library_dependencies
###
### Inputs:			1. The directory containing the file which is being examined for dependencies.
###					2. The name of the file which is being examined for dependencies.
###
### Outputs:		Writes the list of library dependencies to $2.lld 
###					(with the original suffix removed).
###
### Purpose:		Writes the list of library dependencies to a .lld file. Each library file name
###					on its own line.
###
######################################################################################################
list_library_dependencies() {
	pushd $1 >/dev/null
	find . -name "lib*.a" > ${2%.*}.lld
	popd >/dev/null
}

######################################## FUNCTION ####################################################
###
### Name:			generate_component_dependencies
###
### Inputs:			1. The directory containing the file which is being examined for dependencies.
###					2. The name of the file which is being examined for dependencies.
###
### Outputs:		Creates a file called "Make.deps" in the directory being examined. This file
###					is designed to be included in a makefile to fill in all of the recipes as well
###					as to provide the list of objects and library files for final linking.
###
### Purpose:		Produces all of the dependencies for compiling all of the modules in the project.
###
######################################################################################################
generate_component_dependencies() {
	pushd "$1" >/dev/null
	# Remove the Make.deps file if it exists already.
	rm -f "./Make.deps"
	# List the executable linker dependencies
	echo "# Executable Linker Dependencies" >> "Make.deps"
	find_object_dependencies . $2
	# Sort the object files and remove any duplicate entries. tr is used to turn the space-delimited
	# list into a newline delimited list for sort, before converting it back again.
	OBJ_STRING=$(echo "${OBJ_STRING}" | tr " " "\n" | sort -u | tr "\n" " ")
	echo -e "OBJS =${OBJ_STRING}\n" >> "Make.deps"

	# List the library dependencies
	echo "# Executable Library Dependencies" >> "Make.deps"
	LIB_STRING=$(find . -name "lib*.a" | tr "\n" " ")
	echo -e "LIBS = ${LIB_STRING}\n" >> Make.deps

	# List the object dependencies
	echo "# Object File Dependencies" >> "Make.deps"
	# Use the -MM flag to generate a rule describing the dependencies of each source file for make.
	for SRC in $SRC_STRING; do
		case ${SRC##*.} in
			"c")
				${C_COMPILER} ${CFLAGS} -MM ${SRC} >> Make.deps
				echo " " >> Make.deps
				;;
			"cpp")
				${P_COMPILER} ${PFLAGS} -MM ${SRC} >> Make.deps
				echo " " >> Make.deps
				;;
			"s")
				${ASSEMBLER} ${AFLAGS} -MM ${SRC} >> Make.deps
				echo " " >> Make.deps
				;;
			*)
				echo "${RED}ERROR: Invalid Source File Extension\n${NO_COLOUR}"
				echo "$SRC"
				exit 1
				;;
		esac
	done
}