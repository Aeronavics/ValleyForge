#!/usr/bin/env bash

#	Copyright (C) 2012 Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

###########################################################################################################################
###															###
### Name:		make_avr32											###
###															###
### Author:		Edwin Hayes											###
###															###
### Date Created:	19-03-2012											###
###															###
### Type:		Bash Script											###
###															###
### Purpose:		Provides functions which makes AVR32 type components.						###
###															###
###########################################################################################################################

# Indicate the file was imported successfully.
echo -e "${CYAN}Imported AVR32 make-functions.\n${NO_COLOUR}"

######################################## FUNCTION #########################################
###											###
### Name:		makeavr32							###
###											###
### Inputs/Outputs:	None								###
###											###
### Purpose:		Copies AVR32 makefile into tmp directory, edits it, and uses it	###
### 			to compile the files that are already there.		     	###
###											###
###########################################################################################

makeavr32()
{
	# Perform the standard precompile routine.
	if ! generic_precompile; then
		# There isn't anything to do.
		echo -e "${YELLOW}Nothing to make for component $COMPONENT.\n${NO_COLOUR}"
		return 1
	fi

	# Set up the AVR32 compiler.
	unpack_avr32c

	# If we are using a linker script, then add the appropriate linker flags to use it.
	if [ ! -z $LINKSCRIPT ] && [ -r $LINKSCRIPT ]; then
		# Copy the relevant linker script in with the source.
		cp $LINKSCRIPT $TCPATH/$TMP_SRC_DIR/$COMPONENT/linker_script.ld

		# A linker script is specified, so set the linker flags to refer to it.
		LFLAGS="-T linker_script.ld $LFLAGS"
	fi

	# Update the flags in case they still contain some unevaluated variables.
	CFLAGS=$(eval echo $CFLAGS)
	PFLAGS=$(eval echo $PFLAGS)
	AFLAGS=$(eval echo $AFLAGS)
	LFLAGS=$(eval echo $LFLAGS)

	# AVR32 targets only support a single application executable, so it is named the same as the component.
	EXECUTABLE=${COMPONENT_NAME}

	# Copy the relevant makefile in with the source.
	echo -e "${CYAN}Constructing makefile for component $COMPONENT...\n${NO_COLOUR}"
	cp $MAKEFILE $TCPATH/$TMP_SRC_DIR/$COMPONENT
								
	# Update the working makefile with the appropriate values for this component.	
	${VF_OSCFG_SED} ${VF_OSCFG_SED_EXTPARAM} ${VF_OSCFG_SED_INLPARAM} "s^(MCU *= *)BUILD_INSERTS_MCU_CODE_HERE(\\s.*)?^\1$MCU_CODE\2^" $TCPATH/$TMP_SRC_DIR/$COMPONENT/Makefile
	${VF_OSCFG_SED} ${VF_OSCFG_SED_EXTPARAM} ${VF_OSCFG_SED_INLPARAM} "s^(CC *= *)BUILD_INSERTS_C_COMPILER_HERE(\\s.*)?^\1$C_COMPILER\2^" $TCPATH/$TMP_SRC_DIR/$COMPONENT/Makefile
	${VF_OSCFG_SED} ${VF_OSCFG_SED_EXTPARAM} ${VF_OSCFG_SED_INLPARAM} "s^(PC *= *)BUILD_INSERTS_P_COMPILER_HERE(\\s.*)?^\1$P_COMPILER\2^" $TCPATH/$TMP_SRC_DIR/$COMPONENT/Makefile
	${VF_OSCFG_SED} ${VF_OSCFG_SED_EXTPARAM} ${VF_OSCFG_SED_INLPARAM} "s^(AS *= *)BUILD_INSERTS_ASSEMBLER_HERE(\\s.*)?^\1$ASSEMBLER\2^" $TCPATH/$TMP_SRC_DIR/$COMPONENT/Makefile
	${VF_OSCFG_SED} ${VF_OSCFG_SED_EXTPARAM} ${VF_OSCFG_SED_INLPARAM} "s^(LD *= *)BUILD_INSERTS_LINKER_HERE(\\s.*)?^\1$LINKER\2^" $TCPATH/$TMP_SRC_DIR/$COMPONENT/Makefile
	${VF_OSCFG_SED} ${VF_OSCFG_SED_EXTPARAM} ${VF_OSCFG_SED_INLPARAM} "s^(OBJCOPY *= *)BUILD_INSERTS_OBJCOPY_HERE(\\s.*)?^\1$OBJCOPY\2^" $TCPATH/$TMP_SRC_DIR/$COMPONENT/Makefile
	${VF_OSCFG_SED} ${VF_OSCFG_SED_EXTPARAM} ${VF_OSCFG_SED_INLPARAM} "s^(OBJDUMP *= *)BUILD_INSERTS_OBJDUMP_HERE(\\s.*)?^\1$OBJDUMP\2^" $TCPATH/$TMP_SRC_DIR/$COMPONENT/Makefile
	${VF_OSCFG_SED} ${VF_OSCFG_SED_EXTPARAM} ${VF_OSCFG_SED_INLPARAM} "s^(COMPONENT *= *)BUILD_INSERTS_COMPONENT_HERE(\\s.*)?^\1${COMPONENT_NAME}\2^" $TCPATH/$TMP_SRC_DIR/$COMPONENT/Makefile
	${VF_OSCFG_SED} ${VF_OSCFG_SED_EXTPARAM} ${VF_OSCFG_SED_INLPARAM} "s^(EXECUTABLE *= *)BUILD_INSERTS_EXECUTABLE_HERE(\\s.*)?^\1${COMPONENT_NAME}\2^" $TCPATH/$TMP_SRC_DIR/$COMPONENT/Makefile
	${VF_OSCFG_SED} ${VF_OSCFG_SED_EXTPARAM} ${VF_OSCFG_SED_INLPARAM} "s^(CFLAGS *= *.* *)BUILD_INSERTS_CFLAGS_HERE(\\s.*)?^\1$CFLAGS\2^" $TCPATH/$TMP_SRC_DIR/$COMPONENT/Makefile
	${VF_OSCFG_SED} ${VF_OSCFG_SED_EXTPARAM} ${VF_OSCFG_SED_INLPARAM} "s^(PFLAGS *= *.* *)BUILD_INSERTS_PFLAGS_HERE(\\s.*)?^\1$PFLAGS\2^" $TCPATH/$TMP_SRC_DIR/$COMPONENT/Makefile
	${VF_OSCFG_SED} ${VF_OSCFG_SED_EXTPARAM} ${VF_OSCFG_SED_INLPARAM} "s^(AFLAGS *= *.* *)BUILD_INSERTS_AFLAGS_HERE(\\s.*)?^\1$AFLAGS\2^" $TCPATH/$TMP_SRC_DIR/$COMPONENT/Makefile
	${VF_OSCFG_SED} ${VF_OSCFG_SED_EXTPARAM} ${VF_OSCFG_SED_INLPARAM} "s^(LFLAGS *= *.* *)BUILD_INSERTS_LFLAGS_HERE(\\s.*)?^\1$LFLAGS\2^" $TCPATH/$TMP_SRC_DIR/$COMPONENT/Makefile
	${VF_OSCFG_SED} ${VF_OSCFG_SED_EXTPARAM} ${VF_OSCFG_SED_INLPARAM} "s^(LOOSE_OBJECTS *= *.* *)BUILD_INSERTS_LOOSE_OBJECTS_HERE(\\s.*)?^\1$LOOSE_OBJECTS\2^" $TCPATH/$TMP_SRC_DIR/$COMPONENT/Makefile
    
	# Generate the Make.deps dependency file.    
	pushd $TCPATH/$TMP_SRC_DIR/$COMPONENT >/dev/null
	local PARENT_SOURCE_FILE=$(find . -name ${EXECUTABLE##*/}.cpp -o -name ${EXECUTABLE##*/}.c -o -name ${EXECUTABLE##*/}.s | ${VF_OSCFG_SED} "s^[.]/^^g" | grep -E "^${EXECUTABLE}[.](cpp|c|s)")
	generate_component_dependencies . ${PARENT_SOURCE_FILE}
	popd >/dev/null
    
	# Actually make the component.
	echo -e "${CYAN}Making component $COMPONENT ...\n${NO_COLOUR}"
	make -C $TCPATH/$TMP_SRC_DIR/$COMPONENT all			

	# NOTE - Don't put anything in here; we need the return value from 'make' below.

	# Check the return value from make, to determine if an error occurred during compilation.
	if [ $? != 0 ]; then
		# Something went wrong.
		echo -e "\n${RED}Compilation error.  Failed to build component $COMPONENT.\n${NO_COLOUR}"
		return 1
	fi
	
	# The compilation worked, so now just copy across the output binaries.
	mkdir -p $TCPATH/$OUTPUT_DIR/$COMPONENT
	$OBJCOPY -O ihex $TCPATH/$TMP_SRC_DIR/$COMPONENT/$COMPONENT_NAME $TCPATH/${OUTPUT_DIR}/${COMPONENT}/${COMPONENT_NAME}.hex

	# Check the return value from the object copy.
	if [ $? != 0 ]; then
		# Something went wrong.
		echo -e "\n${RED}Object copy error.  Failed to build component $COMPONENT.\n${NO_COLOUR}"			
		return 1
	fi
	echo -e ""	

	# Print out details of the size of the generated hex file.
	echo -e "${WHITE}Output file size details:${NO_COLOUR}"
	$SIZE --format=SysV --totals $TCPATH/${OUTPUT_DIR}/${COMPONENT}/${COMPONENT_NAME}.hex					

	# All done.
	echo -e "${BOLD_WHITE}Build successful.  Output files written to $OUTPUT_DIR/$COMPONENT.\n${NO_COLOUR}"
	return 0
}

