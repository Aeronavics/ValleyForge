#!/bin/bash

#	Copyright (C) 2012 Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

###########################################################################################################################
###															###
### Name:		make_avr											###
###															###
### Author:		Edwin Hayes											###
###															###
### Date Created:	19-03-2012											###
###															###
### Type:		Bash Script											###
###															###
### Purpose:		Provides functions which makes AVR type components.						###
###															###
###########################################################################################################################

# Indicate the file was imported successfully.
echo -e "${CYAN}Imported AVR make-functions.\n${NO_COLOUR}"

######################################## FUNCTION #########################################
###											###
### Name:		makeavr								###
###											###
### Inputs/Outputs:	None								###
###											###
### Purpose:		Copies AVR makefile into tmp directory, edits it, and uses it 	###
### 			to compile the files that are already there.		     	###
###											###
###########################################################################################

makeavr() 
{
	# Set up the AVR compiler.
	unpack_avrc

	# Copy the relevant makefile in with the source.
	echo -e "${CYAN}Constructing makefile for component $COMPONENT...\n${NO_COLOUR}"
	cp $MAKEFILE $TCPATH/$TMP_SRC_DIR/$COMPONENT

	if [ ! -z $LINKSCRIPT ] && [ -r $LINKSCRIPT ]; then
		# Copy the relevant linker script in with the source.
		cp $LINKSCRIPT $TCPATH/$TMP_SRC_DIR/$COMPONENT/linker_script.x

		# A linker script is specified, so set the linker flags to refer to it.
		LFLAGS="-T linker_script.x $LFLAGS"
	fi

	# Get a list of names of source and header files.
	C_FILES=$(ls $TCPATH/$TMP_SRC_DIR/$COMPONENT/*.c 2>/dev/null | sed ':a;N;$!ba;s/\n/ /g')
	P_FILES=$(ls $TCPATH/$TMP_SRC_DIR/$COMPONENT/*.cpp 2>/dev/null | sed ':a;N;$!ba;s/\n/ /g')
	H_FILES=$(ls $TCPATH/$TMP_SRC_DIR/$COMPONENT/*.h $TCPATH/$TMP_SRC_DIR/$COMPONENT/*.hpp 2>/dev/null | sed ':a;N;$!ba;s/\n/ /g')
	S_FILES=$(ls $TCPATH/$TMP_SRC_DIR/$COMPONENT/*.s 2>/dev/null | sed ':a;N;$!ba;s/\n/ /g')
	
	# Get a list of all the library source and header files.
	C_LIBFILES=$(ls $TCPATH/$TMP_SRC_DIR/$COMPONENT/lib/*/*.c 2>/dev/null | sed ':a;N;$!ba;s/\n/ /g')
	P_LIBFILES=$(ls $TCPATH/$TMP_SRC_DIR/$COMPONENT/lib/*/*.cpp 2>/dev/null | sed ':a;N;$!ba;s/\n/ /g')
	H_LIBFILES=$(ls $TCPATH/$TMP_SRC_DIR/$COMPONENT/lib/*/*.h $TCPATH/$TMP_SRC_DIR/$COMPONENT/lib/*/*.hpp 2>/dev/null | sed ':a;N;$!ba;s/\n/ /g')
	S_LIBFILES=$(ls $TCPATH/$TMP_SRC_DIR/$COMPONENT/lib/*/*.s 2>/dev/null | sed ':a;N;$!ba;s/\n/ /g')
	O_LIBFILES=$(ls $TCPATH/$TMP_SRC_DIR/$COMPONENT/lib/*/*.o 2>/dev/null | sed ':a;N;$!ba;s/\n/ /g')	

	# Get a list of all the HAL source and header files.
	C_HALFILES=$(ls $TCPATH/$TMP_SRC_DIR/$COMPONENT/hal/*.c 2>/dev/null | sed ':a;N;$!ba;s/\n/ /g')
	P_HALFILES=$(ls $TCPATH/$TMP_SRC_DIR/$COMPONENT/hal/*.cpp 2>/dev/null | sed ':a;N;$!ba;s/\n/ /g')
	H_HALFILES=$(ls $TCPATH/$TMP_SRC_DIR/$COMPONENT/hal/*.h $TCPATH/$TMP_SRC_DIR/$COMPONENT/hal/*.hpp 2>/dev/null | sed ':a;N;$!ba;s/\n/ /g')
	S_HALFILES=$(ls $TCPATH/$TMP_SRC_DIR/$COMPONENT/hal/*.s 2>/dev/null | sed ':a;N;$!ba;s/\n/ /g')
	O_HALFILES=$(ls $TCPATH/$TMP_SRC_DIR/$COMPONENT/hal/*.o 2>/dev/null | sed ':a;N;$!ba;s/\n/ /g')
							
	# Update the working makefile with the appropriate values for this component.	
	sed -i "s^\(MCU *= *\).*^\1$MCU_CODE^" $TCPATH/$TMP_SRC_DIR/$COMPONENT/Makefile	# NOTE - Using '^' as delimiters.
	sed -i "s^\(CC *= *\)BUILD_INSERTS_C_COMPILER_HERE^\1$C_COMPILER^" $TCPATH/$TMP_SRC_DIR/${COMPONENT}/Makefile
	sed -i "s^\(PC *= *\)BUILD_INSERTS_P_COMPILER_HERE^\1$P_COMPILER^" $TCPATH/$TMP_SRC_DIR/${COMPONENT}/Makefile
	sed -i "s^\(OBJCOPY *= *\)BUILD_INSERTS_OBJCOPY_HERE^\1$OBJCOPY^" $TCPATH/$TMP_SRC_DIR/${COMPONENT}/Makefile
	sed -i "s^\(OBJDUMP *= *\)BUILD_INSERTS_OBJDUMP_HERE^\1$OBJDUMP^" $TCPATH/$TMP_SRC_DIR/${COMPONENT}/Makefile
	sed -i "s^\(PRJSRC *= *\)BUILD_INSERTS_SOURCE_FILES_HERE^\1$C_FILES $P_FILES $S_FILES^" $TCPATH/$TMP_SRC_DIR/$COMPONENT/Makefile
	sed -i "s^\(LIBSRC *= *\)BUILD_INSERTS_LIBRARY_SOURCE_FILES_HERE^\1$C_LIBFILES $P_LIBFILES $S_LIBFILES $C_HALFILES $P_HALFILES $S_HALFILES^" $TCPATH/$TMP_SRC_DIR/$COMPONENT/Makefile
	sed -i "s^\(LIBOBJ *= *\)BUILD_INSERTS_LIBRARY_OBJECT_FILES_HERE^\1$O_LIBFILES $O_HALFILES^" $TCPATH/$TMP_SRC_DIR/$COMPONENT/Makefile
	sed -i "s/\(PROJECTNAME *= *\)BUILD_INSERTS_PROJECT_NAME_HERE/\1$COMPONENT/" $TCPATH/$TMP_SRC_DIR/$COMPONENT/Makefile
	sed -i "s^\(LFLAGS *= *.* *\)BUILD_INSERTS_LFLAGS_HERE^\1$LFLAGS^" $TCPATH/$TMP_SRC_DIR/$COMPONENT/Makefile
	sed -i "s^\(CFLAGS *= *.* *\)BUILD_INSERTS_CFLAGS_HERE^\1$CFLAGS^" $TCPATH/$TMP_SRC_DIR/$COMPONENT/Makefile
    
	# Actually make the component.
	echo -e "${CYAN}Making component $COMPONENT ...\n${NO_COLOUR}"
	make -C $TCPATH/$TMP_SRC_DIR/$COMPONENT all			

	# NOTE - Don't put anything in here; we need the return value from 'make' below.

	# Check the return value from make, to determine if an error occurred during compilation.
	if [ $? != 0 ]; then
		# Something went wrong.
		echo -e "\n${RED}Compilation error.  Failed to build component $COMPONENT.\n${NO_COLOUR}"
		return 1
	fi
	
	# The compilation worked, so now just copy across the output binaries.
	$OBJCOPY -O ihex $TCPATH/$TMP_SRC_DIR/$COMPONENT/$COMPONENT.out $TCPATH/$OUTPUT_DIR/$COMPONENT.hex

	# Check the return value from the object copy.
	if [ $? != 0 ]; then
		# Something went wrong.
		echo -e "\n${RED}Object copy error.  Failed to build component $COMPONENT.\n${NO_COLOUR}"			
		return 1
	fi

	# Print out details of the size of the generated hex file.
	echo -e "\n${WHITE}Output file size details:${NO_COLOUR}"
	$SIZE --format=SysV --totals $TCPATH/$OUTPUT_DIR/${COMPONENT}.hex									

	# All done.
	echo -e "${BOLD_WHITE}Build successful.  Output binary written to $OUTPUT_DIR/$COMPONENT.hex.\n${NO_COLOUR}"
	return 0
}

######################################## FUNCTION #########################################
###											###
### Name:		makeavr_bootloader						###
###											###
### Inputs/Outputs:	None								###
###											###
### Purpose:		Builds the AVR bootloader for the current component.	     	###
###											###
###########################################################################################

makeavr_bootloader() 
{
	# Set up the AVR compiler.
	unpack_avrc

	# Make sure there aren't any old files in the spot we are about to put new files.
	rm -rf $TCPATH/$TMP_SRC_DIR/${COMPONENT}_bootloader
	mkdir -p $TCPATH/$TMP_SRC_DIR/${COMPONENT}_bootloader

	# Copy all the source files into the tmp directory, where the actual making will occur.
	cp $SOURCEPATH/*.c $SOURCEPATH/*.cpp $SOURCEPATH/*.h $SOURCEPATH/*.hpp $TCPATH/$TMP_SRC_DIR/${COMPONENT}_bootloader 2>/dev/null

	# Preprocess the copied header files.
	shopt -s nullglob
	FILES=$TCPATH/$TMP_SRC_DIR/${COMPONENT}_bootloader/*.h
	for FILE in $FILES; do
		# Preprocess this header file.
		preprocess_bootloader $FILE
	done
	shopt -u nullglob

	# Preprocess the copied header files.
	shopt -s nullglob
	FILES=$TCPATH/$TMP_SRC_DIR/${COMPONENT}_bootloader/*.hpp
	for FILE in $FILES; do
		# Preprocess this header file.
		preprocess_bootloader $FILE
	done
	shopt -u nullglob

	# Preprocess the copied source files.
	shopt -s nullglob
	FILES=$TCPATH/$TMP_SRC_DIR/${COMPONENT}_bootloader/*.c
	for FILE in $FILES; do
		# Preprocess this source file.
		preprocess_bootloader $FILE
	done
	shopt -u nullglob

	# Preprocess the copied source files.
	shopt -s nullglob
	FILES=$TCPATH/$TMP_SRC_DIR/${COMPONENT}_bootloader/*.cpp
	for FILE in $FILES; do
		# Preprocess this source file.
		preprocess_bootloader $FILE
	done
	shopt -u nullglob

	# Fetch the HAL library files (need to specify the output location, since we don't want to use the default). NOTE we aren't using any HAL anymore!!
	#get_hal ${COMPONENT}_bootloader/hal

	# Copy the relevant makefile in with the source.
	echo -e "${CYAN}Constructing makefile for component $COMPONENT bootloader...\n${NO_COLOUR}"
	cp $MAKEFILE $TCPATH/$TMP_SRC_DIR/${COMPONENT}_bootloader

	# Get a list of names of source and header files.
	C_FILES=$(ls $TCPATH/$TMP_SRC_DIR/${COMPONENT}_bootloader/*.c 2>/dev/null | sed ':a;N;$!ba;s/\n/ /g')
	P_FILES=$(ls $TCPATH/$TMP_SRC_DIR/${COMPONENT}_bootloader/*.cpp 2>/dev/null | sed ':a;N;$!ba;s/\n/ /g')
	H_FILES=$(ls $TCPATH/$TMP_SRC_DIR/${COMPONENT}_bootloader/*.h 2>/dev/null | sed ':a;N;$!ba;s/\n/ /g')
	S_FILES=$(ls $TCPATH/$TMP_SRC_DIR/${COMPONENT}_bootloader/*.s 2>/dev/null | sed ':a;N;$!ba;s/\n/ /g')	

	# Get a list of all the HAL source and header files.
	C_HALFILES=$(ls $TCPATH/$TMP_SRC_DIR/${COMPONENT}_bootloader/hal/*.c 2>/dev/null | sed ':a;N;$!ba;s/\n/ /g')
	P_HALFILES=$(ls $TCPATH/$TMP_SRC_DIR/${COMPONENT}_bootloader/hal/*.cpp 2>/dev/null | sed ':a;N;$!ba;s/\n/ /g')
	H_HALFILES=$(ls $TCPATH/$TMP_SRC_DIR/${COMPONENT}_bootloader/hal/*.h 2>/dev/null | sed ':a;N;$!ba;s/\n/ /g')
	S_HALFILES=$(ls $TCPATH/$TMP_SRC_DIR/${COMPONENT}_bootloader/hal/*.s 2>/dev/null | sed ':a;N;$!ba;s/\n/ /g')
	O_HALFILES=$(ls $TCPATH/$TMP_SRC_DIR/${COMPONENT}_bootloader/hal/*.o 2>/dev/null | sed ':a;N;$!ba;s/\n/ /g')
								
	# Update the working makefile with the appropriate values for this component.	
	sed -i "s^\(MCU *= *\).*^\1$MCU_CODE^" $TCPATH/$TMP_SRC_DIR/${COMPONENT}_bootloader/Makefile	# NOTE - Using '^' as delimiters.
	sed -i "s^\(CC *= *\)BUILD_INSERTS_C_COMPILER_HERE^\1$C_COMPILER^" $TCPATH/$TMP_SRC_DIR/${COMPONENT}_bootloader/Makefile
	sed -i "s^\(PC *= *\)BUILD_INSERTS_P_COMPILER_HERE^\1$P_COMPILER^" $TCPATH/$TMP_SRC_DIR/${COMPONENT}_bootloader/Makefile
	sed -i "s^\(OBJCOPY *= *\)BUILD_INSERTS_OBJCOPY_HERE^\1$OBJCOPY^" $TCPATH/$TMP_SRC_DIR/${COMPONENT}_bootloader/Makefile
	sed -i "s^\(OBJDUMP *= *\)BUILD_INSERTS_OBJDUMP_HERE.*^\1$OBJDUMP^" $TCPATH/$TMP_SRC_DIR/${COMPONENT}_bootloader/Makefile
	sed -i "s^\(PRJSRC *= *\)BUILD_INSERTS_SOURCE_FILES_HERE^\1$C_FILES $P_FILES $S_FILES^" $TCPATH/$TMP_SRC_DIR/${COMPONENT}_bootloader/Makefile
	sed -i "s^\(LIBSRC *= *\)BUILD_INSERTS_LIBRARY_SOURCE_FILES_HERE^\1$C_HALFILES $P_HALFILES $S_HALFILES^" $TCPATH/$TMP_SRC_DIR/${COMPONENT}_bootloader/Makefile
	sed -i "s^\(LIBOBJ *= *\)BUILD_INSERTS_LIBRARY_OBJECT_FILES_HERE^\1$O_HALFILES^" $TCPATH/$TMP_SRC_DIR/${COMPONENT}_bootloader/Makefile
	sed -i "s/\(PROJECTNAME *= *\)BUILD_INSERTS_PROJECT_NAME_HERE/\1${COMPONENT}_bootloader/" $TCPATH/$TMP_SRC_DIR/${COMPONENT}_bootloader/Makefile
	sed -i "s/\(BOOTSTART *= *\)BUILD_INSERTS_BOOTLOADER_ADDRESS_HERE/\1$BOOTSTART/" $TCPATH/$TMP_SRC_DIR/${COMPONENT}_bootloader/Makefile
    
	# Actually make the component.
	echo -e "${CYAN}Making bootloader for component $COMPONENT ...\n${NO_COLOUR}"
	make -C $TCPATH/$TMP_SRC_DIR/${COMPONENT}_bootloader -B all			

	# NOTE - Don't put anything in here; we need the return value from 'make' below.

	# Check the return value from make, to determine if an error occurred during compilation.
	if [ $? != 0 ]; then
		# Something went wrong.
		echo -e "\n${RED}Compilation error.  Failed to build bootloader for component $COMPONENT.\n${NO_COLOUR}"
		return 1
	fi
	
	# The compilation worked, so now just copy across the output binaries.
	$OBJCOPY -O ihex $TCPATH/$TMP_SRC_DIR/${COMPONENT}_bootloader/${COMPONENT}_bootloader.out $TCPATH/$OUTPUT_DIR/${COMPONENT}_bootloader.hex

	# Check the return value from the object copy.
	if [ $? != 0 ]; then
		# Something went wrong.
		echo -e "\n${RED}Object copy error.  Failed to build bootloader for component $COMPONENT.\n${NO_COLOUR}"			
		return 1
	fi

	# Print out details of the size of the generated hex file.
	echo -e "\n${WHITE}Output file size details:${NO_COLOUR}"
	$SIZE --format=SysV --totals $TCPATH/$OUTPUT_DIR/${COMPONENT}_bootloader.hex							

	# All done.
	echo -e "${BOLD_WHITE}Build successful.  Output binary written to $OUTPUT_DIR/${COMPONENT}_bootloader.hex.\n${NO_COLOUR}"
	return 0
}
