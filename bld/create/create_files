#!/usr/bin/env bash

#	Copyright (C) 2011 Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

###########################################################################################################################
###
### Name:		create_files
###
### Author:		Edwin Hayes
###
### Date Created:	15-11-2011
###
### Type:		Bash Script
###
### Purpose:    This script is used to create a new set of blank source files in an existing component, from	###
###			the available template files.
###
###########################################################################################################################

# MAKE SURE WE'RE IN A SANE ENVIRONMENT.

# Determine which operating system we are using.
VF_OS="$(uname)"
unset VF_OS_DARWIN
unset VF_OS_LINUX
if [ "${VF_OS}" == "Darwin" ]; then
	VF_OS_DARWIN=1
	VF_OSCFG_READLINK='greadlink'
	VF_OSCFG_SED='gsed'
	VF_OSCFG_SED_EXTPARAM='-E'
	VF_OSCFG_SED_INLPARAM='-i'
else
	VF_OS_LINUX=1
	VF_OSCFG_READLINK='readlink'
	VF_OSCFG_SED='sed'
	VF_OSCFG_SED_EXTPARAM='-r'
	VF_OSCFG_SED_INLPARAM='-i'
fi

# Check if we've got a sufficiently advanced version of BASH to actually run the toolchain.
if [[ ${BASH_VERSINFO[0]} < 4 ]]; then
	# BASH version before v4 are missing things we required, such as "read -i".
	echo -e "\033[0;31mBASH versions prior to 4.x are not supported.  Upgrade to a never version of BASH."
	exit 1
fi

# Check if all the tools we're expecting are installed.
VF_REQUIRED="${VF_OSCFG_READLINK} ${VF_OSCFG_SED}"
for VF_REQUIRED_ITEM in ${VF_REQUIRED}; do
	if [ -z "$(which ${VF_REQUIRED})" ]; then
		echo -e "\033[0;31mUnabled to find: ${VF_REQUIRED}.  Install this utility then try again."
		exit 1
	fi
done
unset VF_REQUIRED_ITEM
unset VF_REQUIRED

# Determine what the absolute path to the root of the toolchain is.
VF_SCRIPTPATH=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
TCPATH=$(echo $VF_SCRIPTPATH | ${VF_OSCFG_SED} 's/\/bld.*//')

# DEFINE CONSTANTS.

# Define file names.

TEMPLATE_C_FILE="res/templates/c_template.c"
TEMPLATE_RTOS_C_FILE="res/templates/freertos/c_template.c"
TEMPLATE_CPP_FILE="res/templates/cpp_template.cpp"
TEMPLATE_RTOS_CPP_FILE="res/templates/freertos/cpp_template.cpp"
TEMPLATE_H_FILE="res/templates/h_template.h"
TEMPLATE_HPP_FILE="res/templates/hpp_template.hpp"
USER_CONFIG_FILE="var/config.cfg"
BUILD_CONFIG_FILE="bld/build_configs.cfg"

# Define the colours used for interface output.
source $TCPATH/bld/common/def_colours

# Define the functions used for preprocessing.
source $TCPATH/bld/preprocess/preprocess

# Create directories which don't come automatically with the toolchain.
source $TCPATH/bld/common/create_empty_dirs

##################################### MINOR FUNCTIONS ####################################

# Print a usage message.
usage()
{
	# Block-concatenate the message.
	cat << EOF

Usage: $0 [Options] [File Name]

This script is used, as part of the 'Valley Forge' Embedded Toolchain to create empty source files to develop with.

Parameters:

	[File Name]			Specify the name of the files to add to the current project.

Options:
	-h --help			Show this message.
	-b --batch			Operate in 'batch mode', wherein there are no interactive prompts.
	-n --name <File Name>		Specify the name of the files to add to the current project.
	-c --component			Specify the component to add the files to.  Defaults to the 'active component'.
	-t --type <File Type>		Specify the kind of files to create (either 'C' or 'CPP').
EOF
	# All done.
	return
}

################################ SCRIPT PROPER STARTS HERE ###############################

# PARSE ANY COMMAND LINE PARAMETERS.

# Reset fields to be extracted from the parameters.
FILENAMES=
BATCHMODE=
COMPONENT=
TYPE=

# Define variables required for 'getopt' to work.
PROGNAME=${0##*/} 
SHORTOPTS="hbn:c:t:"
LONGOPTS="help,batch,name:,component:,type:"

# Use 'getopt' to parse the command line options.
if [ VF_OS_DARWIN ]; then
	ARGS=$(getopt $SHORTOPTS "$*")
else
	ARGS=$(getopt -s bash --options $SHORTOPTS --longoptions $LONGOPTS --name $PROGNAME -- "$@")
fi
eval set -- "$ARGS"

# Handle the parsed parameters.
while true; do
	# Select the appropriate behaviour for each parameter.
	case $1 in
		-h|--help)
			# Just print the usage message and then exit.
			usage
			exit 0
			;;
		-b|--batch)
			# Select batch mode.
			BATCHMODE=1
			;;
		-n|--name)
			# Specify the name of the files to create.
			shift
			FILENAMES="$FILENAMES$1 " # NOTE - The space in intentional!
			;;
		-c|--component)
			# Specify the name of the component to add files to.
			shift
			COMPONENT="$1"
			;;
		-t|--type)
			# Specify the type of files to create.
			shift
			TYPE="$1"
			;;
		--)
			# We're done parsing options.  Anything else must be parameters.
			shift
			FILENAMES="$FILENAMES$* " # NOTE - The space in intentional!
			break
			;;
		*)
			# Anything else must be parameters.
			shift
			FILENAMES="$FILENAMES$* " # NOTE - The space in intentional!
			break
			;;
	esac

	# Advance on to the next parameter.
	shift
done

# PROMPT THE USER FOR ANY ADDITIONAL INFORMATION.

# Check if we have been supplied the name of some files to create and that we're not in batch mode.
if [ -z "${FILENAMES% }" ] && [ ! ${BATCHMODE} ]; then
	# We haven't been given a file name, so we need the user to enter one.

	# We will need to prompt the user for the name of the component to create.
	echo -e -n "${GREEN}Enter basenames for the files to be created: (Space separated) ${NO_COLOUR}"
	read
	echo -e ""

	# Pretty much anything goes here.
	FILENAMES=$REPLY

# Check if we have been supplied the name of some files to create and that we're in batch mode.
elif [ -z "$FILENAMES" ] && [ $BATCHMODE ]; then
	# We haven't been given a filename, and we're in batch mode, so can't ask.  So we just have to bail.
	echo -e "${RED}No filenames supplied in batch mode.\n${NO_COLOUR}"
	exit 1
fi

# Check if we were explicitly told which component to add files to.
if [ -z $COMPONENT ]; then
	# We use the 'active component' by default.
	
	# Check to make sure the user configuration file is there.
	if [ ! -r $TCPATH/$USER_CONFIG_FILE ]; then
		# The configuration file is missing, so we don't know what to compile.
		echo -e "${BOLD_RED}FATAL - User configuration file ($USER_CONFIG_FILE) was not found.\n${NO_COLOUR}"
		exit 1
	fi

	# Extract the value of the 'active component' from the user configuration file.
	COMPONENT=$(grep -v "#" $TCPATH/$USER_CONFIG_FILE | grep tc_curr | cut -d '=' -f 2)

	# Check if the toolchain has an 'active component' to build.
	if [ "$COMPONENT" == "none" ] || [ -z "$COMPONENT" ]; then
		# Tell the user there is nothing to compile, then exit.
		echo -e "${RED}No active component is set; cannot create files for it!\n${NO_COLOUR}"
		exit 1
	fi
fi

# Check if the specified component actually exists.
if [ ! -d "$TCPATH/src/$COMPONENT" ]; then
	# The component does't have a matching source folder, we bail.
	echo -e "${RED}Component $COMPONENT does not exist.\n${NO_COLOUR}"
	exit 1
fi

# Check if we have been told which type of files to create and that we're not in batch mode.
if [ -z "$TYPE" ] && [ ! $BATCHMODE ]; then
	# We haven't been given a type, so we need the user to enter one.

	# Prompt the user to select a file type.
	echo -e "${GREEN}Please choose which file type to create:${NO_COLOUR}"
		# Create a menu of choices and have the user select one.
		select TYPE in C CPP
		do
			# Check if the selected file type is actually valid.
			TYPE=$(echo "C CPP" | grep -w -o "$TYPE")
			if [ -z "$TYPE" ]; then
				# The selected file type was not in the list of supported types, so the user is apparently a moron.
				echo -e "${RED}Invalid choice.  Try again.\n${NO_COLOUR}"
			else
				# A legitimate option was selected, so we can go now.
				echo -e "${CYAN}Selected file type $TYPE.\n${NO_COLOUR}"
				break
			fi
		done

# Check if we have been told which type of files to create and that we're in batch mode.
elif [ -z "$TYPE" ] && [ $BATCHMODE ]; then
	# We haven't been given a type, and we're in batch mode, so can't ask.  So we just have to bail.
	echo -e "${RED}No file type specified in batch mode.\n${NO_COLOUR}"
	exit 1

# Check if we're been told to create an invalid type of file.
elif [ ! "$TYPE" == "C" ] && [ ! "$TYPE" == "CPP" ]; then
	# An invalid file type was specified.
	echo -e "${RED}Invalid file type ($TYPE). Use either 'C' or 'CPP'.\n${NO_COLOUR}"
	exit 1
fi

# CREATE THE FILES.

# Parse the build configurations file.
source $TCPATH/bld/common/load_build_configs

# Since the component might be nested, figure out what the actual name of the component will be.
COMPONENT_NAME=${COMPONENT##*/}

# Check if we can find the config file for this component.
if ! [ -r "$TCPATH/src/$COMPONENT/$COMPONENT_NAME.cfg" ]; then
	# The configuration file isn't there.  Ask the user if they want to create the file, or skip this component.
	echo -e "${RED}No configuration file found for component $COMPONENT.\n${NO_COLOUR}"
	echo -e -n "${GREEN}Do you wish to create the missing configuration file now? (Y/N) ${NO_COLOUR}"
	read -n 1
	echo -e "\n" # NOTE - This is because the read command won't put a newline after it reads a character.
		
	# If they responded YES, then rebuild the configuration file.  If NO, then skip this component.
	if [[ "$REPLY" =~ ^[Yy]$ ]]; then
		# Rebuild the configuration file.
			
		# Call the 'component_create' script: it will handle rebuilding the configuration file.
		bash $TCPATH/bld/create/create_component --component $COMPONENT

		# Check that the component was actually created.
		if [ ! -f ${TCPATH}/src/${COMPONENT}/${COMPONENT_NAME}.cfg ]; then
			echo -e "${RED}Creation of the configuration file has failed. Exiting...\n${NO_COLOUR}"
			exit 1
		fi
	else
		# Just skip this component and move on.
		echo -e "${YELLOW}No configuration file.  Cannot create files for component $COMPONENT.\n${NO_COLOUR}"
		exit 0
	fi
fi

# Extract relevant configuration information from the configuration file.
source $TCPATH/src/$COMPONENT/$COMPONENT_NAME.cfg

# Reset any variables which may have been set by a previous component.
source $TCPATH/bld/common/clear_bconf_vars

# Check to see if we can find a matching build configuration.
BCONF="bconf_${TARGET}_${PLATFORM}"
if [ `declare -f | grep "$BCONF ()" | wc -l` == 0 ]; then
	# No matching build configuration was found, so we can't do the preprocessing.
	echo -e "${RED}No suitable build configuration found.  Cannot create files for component $COMPONENT.\n${NO_COLOUR}"
	exit 1
else
	# There is a matching build configuration, so load it.
	echo -e "${CYAN}Loading build configuration ($BCONF)...\n${NO_COLOUR}"
	$BCONF

	# Check that all the required variables were set by the build configuration.
	if [ -z "$BCONF_NAME" ] || [ -z "$C_COMPILER" ] || [ -z "P_$COMPILER" ] || [ -z "$MAKEFUNCTION" ] || [ -z "$MAKEFILE" ] || [ -z "$OBJCOPY" ]; then
		# At least one of the required variables was not set, so skip this component and move on.
		echo -e "${RED}Build configuration incomplete. Cannot create files for component $COMPONENT.\n${NO_COLOUR}"
		exit 1
	fi

	# TODO - Actually, maybe some of these would be optional, if they aren't need by all targets?

	# The build configuration was loaded successfully.
	echo -e "${CYAN}Loaded build configuration '$BCONF_NAME'.\n${NO_COLOUR}"
fi

# Iterate through all the filenames in the list provided.
echo -e "${CYAN}Creating template files...\n${NO_COLOUR}"
for FILENAME in $FILENAMES; do
	# Check if there is already a file with the specified name in the source directory. If so, do not generate the template file.
	TYPE_LOWERCASE=${TYPE,,}
	if [ -f ${TCPATH}/src/${COMPONENT}/${FILENAME}${TEMPLATE_SUFFIX}.${TYPE_LOWERCASE} -o -f ${TCPATH}/src/${COMPONENT}/${FILENAME}${TEMPLATE_SUFFIX}.${TYPE_LOWERCASE/c/h} ]; then
		echo -e "${YELLOW}File \"${FILENAME}${TEMPLATE_SUFFIX}\" already exists in source directory. Skipping template generation for this file...\n${NO_COLOUR}"
		continue
	fi

	# If the following four variables are defined, we can simply use the template files stored at their location.

	# There is also the option of a template suffix. If not defined, it resolves to an empty string which has no effect on the final file name.

	if [ -n "${TEMPLATE_C_SOURCE}" -a -n "${TEMPLATE_H_SOURCE}" -a -n "${TEMPLATE_CPP_SOURCE}" -a -n "${TEMPLATE_HPP_SOURCE}" ]; then
		# If the file basename actually contains some directory nesting, then we need to make sure these directories exist.
		if [ "${FILENAME##*/}" != "${FILENAME}" ]; then
			mkdir -p "$TCPATH/src/$COMPONENT/${FILENAME%/*}"
		fi

		# Check which kind of file we are creating.
		if [ "${TYPE}" == "C" ]; then
			# Create the actual files by copying the templates into the source directory.
			cp $TEMPLATE_C_SOURCE $TCPATH/src/$COMPONENT/${FILENAME}${TEMPLATE_SUFFIX}.c
			cp $TEMPLATE_H_SOURCE $TCPATH/src/$COMPONENT/${FILENAME}${TEMPLATE_SUFFIX}.h

			# Preprocess the two template files.
			preprocess_template $TCPATH/src/$COMPONENT/${FILENAME}${TEMPLATE_SUFFIX}.c
			preprocess_template $TCPATH/src/$COMPONENT/${FILENAME}${TEMPLATE_SUFFIX}.h
		elif [ ${TYPE} == "CPP" ]; then
			# Create the actual files by copying the templates into the source directory.
			cp $TEMPLATE_CPP_SOURCE $TCPATH/src/$COMPONENT/${FILENAME}${TEMPLATE_SUFFIX}.cpp
			cp $TEMPLATE_HPP_SOURCE $TCPATH/src/$COMPONENT/${FILENAME}${TEMPLATE_SUFFIX}.hpp

			# Preprocess the two template files.
			preprocess_template $TCPATH/src/$COMPONENT/${FILENAME}${TEMPLATE_SUFFIX}.cpp
			preprocess_template $TCPATH/src/$COMPONENT/${FILENAME}${TEMPLATE_SUFFIX}.hpp
		else
			echo -e "${RED}Correct options not specified to create files ${NO_COLOUR}\n"
			exit -1
		fi

	# Else, the template source files are not defined in the build config, we must determine where to look manually. Eventually this section will be unecessary.
	else
		echo -e "${RED}Correct options not specified to create files. Please update the build configuration.\n${NO_COLOUR}"
		exit 1
	fi
done

# TODO - Does this still need to be here?  This is probably the old FreeRTOS stuff, which should be removed.

# Create FreeRTOSConfig.h if it doesn't exist already.
if [ "${PLATFORM,,}" == "freertos" ]; then
	if ! [ -r "$TCPATH/src/$COMPONENT/FreeRTOSConfig.h" ]; then
		echo -e "${CYAN}No FreeRTOSConfig.h file found in component directory. Copying FreeRTOSConfig.h template...${NO_COLOUR}\n"
		cp $FREERTOS_CONFIG_FILE $TCPATH/src/$COMPONENT/FreeRTOSConfig.h
		echo -e "${CYAN}FreeRTOSConfig.h file copied.${NO_COLOUR}\n"
	fi
fi

# All done.
echo -e "${CYAN}All done.\n${NO_COLOUR}"	
exit 0
