#!/bin/bash

#	Copyright (C) 2013 Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

###########################################################################################################################
###																														###
### Name:		gen_nuttx_build																							###
###																														###
### Author:		Zane Barker																								###
###																														###
### Date Created:	27-11-2014																							###
###																														###
### Type:		Bash Script																								###
###																														###
### Purpose:		Provides functions which generate code which implements the NuttX platform.		 					###
###																														###
###########################################################################################################################

# Indicate the file was imported successfully.
echo -e "${CYAN}Imported NuttX code generation functions.\n${NO_COLOUR}"

source "${TCPATH}/bld/code_generation/gen_nuttx_app_configuration"

# NOTE - Because extended globbing is used inside this function, it needs to be enabled for the function DEFINITION as well.

# NOTE - Extended globbing is used here, but we turn it back off as soon as we are done, since it can plausibly break other things.

shopt -s extglob
######################################## FUNCTION #########################################
###																						###
### Name:		gen_nuttx_build															###
###																						###
### Inputs/Outputs:	Takes the path to the source location where to place the code.		###
###																						###
### Purpose:		Fetches files which implements the NuttX platform. The 				###
###			fetched files are then integrated with the user's application code.			###
###																						###
###########################################################################################
gen_nuttx_build()
{
	# DEFINE CONSTANTS

	GEN_CACHE=${TCPATH}/tmp/gen_cache

	# PRIVATE INTERNAL FUNCTIONS

	# FUNCTION PROPER STARTS HERE

	# TODO - Don't think you should do this here.  All the configuration settings should already be loaded by this point.

	# Load the configuration variables from the project .cfg file.
	source $1/$COMPONENT_NAME.cfg

	# Check if the specified location is actually legit.
	if [ ! -d $1 ]; then
		# The specified location is not a directory.
		echo -e "${RED}Invalid source location for code generation.\n${NO_COLOUR}"
		return 1
	fi
	echo -e "${CYAN}Fetching Nuttx platform code...\n${NO_COLOUR}"

	# Check to see if the required platform configuration settings are present.
	if [ -z "${NUTTX_COMMON_SOURCE}" -o -z "${NUTTX_CONFIG_SOURCE}" -o -z "${NUTTX_TEMPLATE_SOURCE}" ]; then
		# Some of the required platform configuration settings are missing, so we must abort.
		echo -e "${RED}NuttX platform configuration incomplete. Cannot fetch NuttX files.\n${NO_COLOUR}"
		return 1
	fi

	# Unpack the NuttX source files where they are needed.
	unpack_nuttx
	if [ $? -ne 0 ]; then
		# We couldn't unpack the NuttX source, so we have to abort
		return 1
	fi

	# First we copy the original NuttX source files across to where they are needed.
	echo -e "${CYAN}\tImporting NuttX source files...\n${NO_COLOUR}"

	# Copy the Nuttx source files across to where they are needed.
	cp -fr ${NUTTX_COMMON_SOURCE}/nuttx $1/nuttx/
	cp -fr ${NUTTX_COMMON_SOURCE}/apps $1/apps/

	# Move the NuttX configuration files into the /nuttx/ directory, overwriting any pre-existing files.
	echo -e "${CYAN}\tReplacing NuttX configuration files...\n${NO_COLOUR}"

	# defconfig also needs to be renamed to .config at this stage.
	mv -f $1/defconfig $1/nuttx/.config
	mv -f $1/Make.defs $1/nuttx/Make.defs
	mv -f $1/setenv.sh $1/nuttx/setenv.sh

	# Create the ValleyForge application directory. This is called 'external' due to peculiarities with NuttX. Read the bottom of /apps/README.txt for details.
	#cp -fr ${NUTTX_TEMPLATE_SOURCE}/external $1/apps/external
	mkdir -p $1/apps/external
	# Move the NuttX application files to the new ValleyForge application directory.
	shopt -s extglob
	mv -f $1/!(apps|nuttx) $1/apps/external/
	shopt -u extglob

	# Restrict the scope of some variables used in the loop
	local APP_EXECUTABLES_ARRAY
	local APP_PRIORITIES_ARRAY
	local APP_STACKSIZE_ARRAY
	local APP_LOOP_MAX
	local C_SOURCE_FILES
	local ASSEMBLY_SOURCE_FILES

	APP_EXECUTABLES_ARRAY=($EXECUTABLES)
	APP_PRIORITIES_ARRAY=($PRIORITIES)
	APP_STACKSIZE_ARRAY=($STACKSIZES)
	APP_LOOP_MAX=$((${#APP_EXECUTABLES_ARRAY[@]}-1))

	# Assign default values to anything that isn't already assigned a value.
	for APP_INDEX in $(seq 0 $APP_LOOP_MAX)
	do
		APP_PRIORITIES_ARRAY[$APP_INDEX]=${APP_PRIORITIES_ARRAY[$APP_INDEX]:=$DEFAULT_APP_PRIORITY}
		APP_STACKSIZE_ARRAY[$APP_INDEX]=${APP_STACKSIZE_ARRAY[$APP_INDEX]:=$DEFAULT_APP_STACKSIZE}
	done

	for APP_INDEX in $(seq 0 $APP_LOOP_MAX)
	do
		# Create the application directory.
		mkdir -p $1/apps/external/${APP_EXECUTABLES_ARRAY[$APP_INDEX]}
		# Move the _main files to their respective directory
		mv $(find $1/apps/external -iname "*_main*" | grep "${APP_EXECUTABLES_ARRAY[$APP_INDEX]}_main") $1/apps/external/${APP_EXECUTABLES_ARRAY[$APP_INDEX]}
		# Update the external Kconfig file with the new application
		echo -e "source \"\$APPSDIR/external/${APP_EXECUTABLES_ARRAY[$APP_INDEX]}/Kconfig\"\n" >> $1/apps/external/Kconfig
		# Update the external Make.defs file with the new application
		#echo -e -n "ifeq(\$(CONFIG_VALLEYFORGE_${APP_EXECUTABLES_ARRAY[$APP_INDEX]^^}),y)\nCONFIGURED_APPS += external/${APP_EXECUTABLES_ARRAY[$APP_INDEX]}\nendif\n\n" >> $1/apps/external/Make.defs
		echo -e -n "CONFIGURED_APPS += external/${APP_EXECUTABLES_ARRAY[$APP_INDEX]}\n\n" >> $1/apps/external/Make.defs

		# Copy the Kconfig file and Makefile for the application
		cp -f ${NUTTX_TEMPLATE_SOURCE}/Kconfig $1/apps/external/${APP_EXECUTABLES_ARRAY[$APP_INDEX]}/Kconfig
		cp -f ${NUTTX_TEMPLATE_SOURCE}/Makefile $1/apps/external/${APP_EXECUTABLES_ARRAY[$APP_INDEX]}/Makefile
		# Update the fields in the Kconfig file
		sed -i s^"<APP_NAME>"^"${APP_EXECUTABLES_ARRAY[$APP_INDEX]}"^g $1/apps/external/${APP_EXECUTABLES_ARRAY[$APP_INDEX]}/Kconfig
		sed -i s^"<APP_NAME_UPPER>"^"${APP_EXECUTABLES_ARRAY[$APP_INDEX]^^}"^g $1/apps/external/${APP_EXECUTABLES_ARRAY[$APP_INDEX]}/Kconfig
		# Update the fields in the Makefile
		sed -i s^"<APP_NAME>"^"${APP_EXECUTABLES_ARRAY[$APP_INDEX]}"^g $1/apps/external/${APP_EXECUTABLES_ARRAY[$APP_INDEX]}/Makefile
		sed -i s^"<APP_NAME_UPPER>"^"${APP_EXECUTABLES_ARRAY[$APP_INDEX]^^}"^g $1/apps/external/${APP_EXECUTABLES_ARRAY[$APP_INDEX]}/Makefile
		sed -i s^"<APP_PRIORITY>"^"${APP_PRIORITIES_ARRAY[$APP_INDEX]}"^g $1/apps/external/${APP_EXECUTABLES_ARRAY[$APP_INDEX]}/Makefile		
		sed -i s^"<APP_STACK>"^"${APP_STACKSIZE_ARRAY[$APP_INDEX]}"^g $1/apps/external/${APP_EXECUTABLES_ARRAY[$APP_INDEX]}/Makefile
		sed -i s^"<APP_MAIN>"^$(ls $1/apps/external/${APP_EXECUTABLES_ARRAY[$APP_INDEX]} | grep "_main.c")^g $1/apps/external/${APP_EXECUTABLES_ARRAY[$APP_INDEX]}/Makefile

		# Find all the C and CPP files in the directory that aren't suffixed by "_main".
		C_SOURCE_FILES=($(find $1/apps/external/${APP_EXECUTABLES_ARRAY[$APP_INDEX]} -iname "*.c" -o -iname "*.cpp" | grep -v "_main"))
		# Find all the assembly files in the directory.
		ASSEMBLY_SOURCE_FILES=($(find $1/apps/external -iname '*.s'))
		# Update the makefile with the source files
		sed -i s^"<C_SOURCE_FILES>"^"${C_SOURCE_FILES}"^g $1/apps/external/${APP_EXECUTABLES_ARRAY[$APP_INDEX]}/Makefile
		sed -i s^"<ASSEMBLY_SOURCE_FILES>"^"${ASSEMBLY_SOURCE_FILES}"^g $1/apps/external/${APP_EXECUTABLES_ARRAY[$APP_INDEX]}/Makefile
	done

	# Add the Kconfig entry for the new ValleyForge application directory so that 'make menuconfig' can find it.
	sed -i '6i\menu \"ValleyForge\"\nsource \"$APPSDIR/external/Kconfig\"\nendmenu\n' ${1}/apps/Kconfig

	##### CHANGE HERE #####

	# Enable the ValleyForge applications by default.
	echo -e "\n#\n# ValleyForge\n#" >> $1/nuttx/.config
	for EXECUTABLE in $EXECUTABLES
	do
		echo -e "CONFIG_VALLEYFORGE_${EXECUTABLE^^}=y" >> $1/nuttx/.config
	done

	# TODO - This stuff looks target specific.

	# Update the .config file for building on a Linux system.
	sed -i -e s/'CONFIG_HOST_WINDOWS=y'/'# CONFIG_HOST_WINDOWS is not set'/ $1/nuttx/.config
	sed -i -e s/'CONFIG_WINDOWS_CYGWIN=y'/'# CONFIG_WINDOWS_CYGWIN is not set'/ $1/nuttx/.config
	sed -i -e s/'# CONFIG_HOST_LINUX is not set'/'CONFIG_HOST_LINUX=y'/ $1/nuttx/.config
	
	# Update the .config file to use the gcc-arm-none-eabi toolchain
	sed -i -e s/'CONFIG_ARMV7M_TOOLCHAIN_BUILDROOT=y'/'# CONFIG_ARMV7M_TOOLCHAIN_BUILDROOT is not set'/ $1/nuttx/.config
	sed -i -e s/'# CONFIG_ARMV7M_TOOLCHAIN_GNU_EABIL is not set'/'CONFIG_ARMV7M_TOOLCHAIN_GNU_EABIL=y'/ $1/nuttx/.config

	# All done.
	return 0
}
shopt -u extglob
