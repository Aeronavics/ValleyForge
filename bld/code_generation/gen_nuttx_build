#!/bin/bash

#	Copyright (C) 2013 Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

###########################################################################################################################
###
### Name:		gen_nuttx_build
###
### Author:		Zane Barker
###
### Date Created:	27-11-2014
###
### Type:		Bash Function Definitions
###
### Purpose:		Provides functions which generate code which implements the NuttX platform.
###
###########################################################################################################################

# Indicate the file was imported successfully.
echo -e "${CYAN}Imported NuttX code generation functions.\n${NO_COLOUR}"

source "${TCPATH}/bld/code_generation/gen_nuttx_app_configuration"

######################################## FUNCTION #########################################
###
### Name:		gen_nuttx_build
###
### Inputs/Outputs:	Takes the path to the source location where to place the code.
###
### Purpose:		Fetches files which implements the NuttX platform.
###
###########################################################################################
gen_nuttx_build()
{
	# DEFINE CONSTANTS

	GEN_CACHE=${TCPATH}/tmp/gen_cache

	# PRIVATE INTERNAL FUNCTIONS

	# FUNCTION PROPER STARTS HERE

	# TODO - Don't think you should do this here.  All the configuration settings should already be loaded by this point.

	# Load the configuration variables from the project .cfg file.
	source $1/$COMPONENT_NAME.cfg

	# Check if the specified location is actually legit.
	if [ ! -d $1 ]; then
		# The specified location is not a directory.
		echo -e "${RED}Invalid source location for code generation.\n${NO_COLOUR}"
		return 1
	fi
	echo -e "${CYAN}Fetching Nuttx platform code...\n${NO_COLOUR}"

	# Check to see if the required platform configuration settings are present.
	if [ -z "${NUTTX_COMMON_SOURCE}" -o -z "${NUTTX_CONFIG_SOURCE}" -o -z "${NUTTX_TEMPLATE_SOURCE}" ]; then
		# Some of the required platform configuration settings are missing, so we must abort.
		echo -e "${RED}NuttX platform configuration incomplete. Cannot fetch NuttX files.\n${NO_COLOUR}"
		return 1
	fi

	# Unpack the NuttX source files where they are needed.
	unpack_nuttx
	if [ $? -ne 0 ]; then
		# We couldn't unpack the NuttX source, so we have to abort
		return 1
	fi

	# First we copy the original NuttX source files across to where they are needed.
	echo -e "${CYAN}\tImporting NuttX source files...\n${NO_COLOUR}"

	# Copy the Nuttx source files across to where they are needed.
	cp -fr ${NUTTX_COMMON_SOURCE}/nuttx $1/nuttx/
	cp -fr ${NUTTX_COMMON_SOURCE}/apps $1/apps/
	cp -fr ${NUTTX_COMMON_SOURCE}/misc $1/misc/

	# Move the NuttX configuration files into the /nuttx/ directory, overwriting any pre-existing files.
	echo -e "${CYAN}\tReplacing NuttX configuration files...\n${NO_COLOUR}"

	# defconfig also needs to be renamed to .config at this stage.
	mv -f $1/defconfig $1/nuttx/.config
	mv -f $1/Make.defs $1/nuttx/Make.defs
	mv -f $1/setenv.sh $1/nuttx/setenv.sh

	# Configure C++ support with uCLibc++
	pushd $1/misc/uClibc++ >/dev/null

	for FILE in $(find libxx -type f); do
		install -D ${FILE} ../../nuttx/${FILE}
	done

	for FILE in $(find include -type f); do
		install -D ${FILE} ../../nuttx/${FILE}
	done

	popd >/dev/null

	# Update the .config file to enable C++ support.
	sed -i -e s/'# CONFIG_HAVE_CXX is not set'/'CONFIG_HAVE_CXX=y'/ $1/nuttx/.config
	sed -i -e s/'# CONFIG_HAVE_CXXINITIALIZE is not set'/'CONFIG_HAVE_CXXINITIALIZE=y'/ $1/nuttx/.config

	# TODO - This stuff looks target specific.

	# Update the .config file for building on a Linux system.
	sed -i -e s/'CONFIG_HOST_WINDOWS=y'/'# CONFIG_HOST_WINDOWS is not set'/ $1/nuttx/.config
	sed -i -e s/'CONFIG_WINDOWS_CYGWIN=y'/'# CONFIG_WINDOWS_CYGWIN is not set'/ $1/nuttx/.config
	sed -i -e s/'# CONFIG_HOST_LINUX is not set'/'CONFIG_HOST_LINUX=y'/ $1/nuttx/.config
	
	# Update the .config file to use the gcc-arm-none-eabi toolchain
	sed -i -e s/'CONFIG_ARMV7M_TOOLCHAIN_BUILDROOT=y'/'# CONFIG_ARMV7M_TOOLCHAIN_BUILDROOT is not set'/ $1/nuttx/.config
	sed -i -e s/'# CONFIG_ARMV7M_TOOLCHAIN_GNU_EABIL is not set'/'CONFIG_ARMV7M_TOOLCHAIN_GNU_EABIL=y'/ $1/nuttx/.config

	# type kconfig-mconf >/dev/null 2>&1
	if type kconfig-mconf >/dev/null 2>&1; then
		while :
		do
			# # Ask if the user wants to run the NuttX configuration tool.
			echo -e -n "${GREEN}Do you wish to run the NuttX configuration tool? (Y/N) ${NO_COLOUR}"
			read -n 1
			echo -e "\n" # Note - this is because the read command won't put a newline after it reads a character.

			case "$REPLY" in
				"Y" | "y" )
					# If they responded YES, run "make menuconfig" in the /nuttx directory.
					make menuconfig -C $1/nuttx
					break
					;;
				"N" | "n" )
					# Otherwise, continue with the build process.
					break
					;;
			esac
		done
	else
		echo -e "${YELLOW}\tkconfig-mconf not installed, skipping additional user configuration.\n${NO_COLOUR}"
	fi

	# All done.
	return 0
}

# ALL DONE.
