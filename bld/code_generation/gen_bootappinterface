#!/bin/bash

#	Copyright (C) 2013 Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

###########################################################################################################################
###															###
### Name:		gen_bootappinterface										###
###															###
### Author:		Edwin Hayes											###
###															###
### Date Created:	29-01-2013											###
###															###
### Type:		Bash Script											###
###															###
### Purpose:		Provides functions which generate code which provides functions through which the application	###
###			code may access bootloader functionality (such as reading bootloader version information). 	###
###															###
###########################################################################################################################

# Indicate the file was imported successfully.
echo -e "${CYAN}Imported bootloader application interface code generation functions.\n${NO_COLOUR}"

######################################## FUNCTION #########################################
###											###
### Name:		gen_bootappinterface_avr					###
###											###
### Inputs/Outputs:	Takes the path to the source location where to generate code.	###
###											###
### Purpose:		Generates files which allow application code to access some	###
###			convenience functions provided by the modular AVR bootloader.	###
###			This is trivial, because all this involves is copying across	###
###			the required files to the output directory.			###
###											###
###########################################################################################

gen_bootappinterface_avr()
{
	# PRIVATE INTERNAL FUNCTIONS.

	# FUNCTION PROPER STARTS HERE.

	# Check if the specified location is actually legit.
	if [ ! -d $1 ]; then
		# The specified location is not a directory.
		echo -e "${RED}Invalid source location for code generation.\n${NO_COLOUR}"
		return 1
	fi

	# Check if we are using the bootloader.
	if [ -z $BOOTLOADER ]; then
		# The component isn't using a bootloader, so the interface isn't going to work.  Just skip this section.
		echo -e "${Yellow}No bootloader in use, skipping the bootloader application interface.\n${NO_COLOUR}"
		return 0
	fi

	# Let the user know what is going on.
	echo -e "${CYAN}Generating bootloader application interface libraries...\n${NO_COLOUR}"

	# The location of the bootloader application interface files.
	BOOTAPP_FOLDER="${TCPATH}/res/avr/bootloader/application_interface"

	# Copy across the header file.
	mkdir $1/bootloader_interface
	cp ${BOOTAPP_FOLDER}/* $1/bootloader_interface

	# All done.
	return 0
}

# ALL DONE.
