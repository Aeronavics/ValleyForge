#!/usr/bin/env bash
TMP_CACHE=${TCPATH}/tmp/gen_cache/vendor/
#	Copyright (C) 2018 Aeronavics Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

###########################################################################################################################
###															###
### Name:		gen_libcanard											###
###															###
### Author:		Anton Slooten											###
###															###
### Date Created:	26-02-2019											###
###															###
### Type:		Bash Script											###
###															###
### Purpose:		Provides library functions to communicate over uavcan from a C/C++ application.                 ###
###															###
###########################################################################################################################

# Indicate the file was imported successfully.
echo -e "${CYAN}Imported libcanard code generation functions.\n${NO_COLOUR}"

######################################## FUNCTION #########################################
###											###
### Name:		gen_libcanard							###
###											###
### Inputs/Outputs:	Takes the path to the source location where to generate code.	###
###											###
### Purpose:		Generates library functions to communicate over uavcan from a C/C++ application.			###
###											###
###########################################################################################

gen_libcanard()
{
	# DEFINE CONSTANTS.

	# PRIVATE INTERNAL FUNCTIONS.

	# FUNCTION PROPER STARTS HERE.

	# Check if the specified location is actually legit.
	if [ ! -d $1 ]; then
		# The specified location is not a directory.
		echo -e "${RED}Invalid source location for code generation.\n${NO_COLOUR}"
		return 1
	fi

	# Let the user know what is going on.
	echo -e "${CYAN}Generating 'libcanard' library...\n${NO_COLOUR}"

	# Unpack the libcanard source.
	unpack_libcanard
	if [ $? -ne 0 ]; then
		# We couldn't unpack the libuavcan source, so we'll have to abort.
		return 1
	fi

	

	# Copy across the required files.
	rsync -a ${TMP_CACHE}libcanard $1

	# Get DSDL 
	unpack_uavcan_dsdl
	rsync -a ${TMP_CACHE}dsdl $1

	# Get DSDL Code Generator
	unpack_uavcan_dsdl_code_gen
	rsync -a ${TMP_CACHE}dronecan_dsdlc $1

	echo "Generating dsdlc"

	# Run DSDL code generator and only generate uavcan and aeronavics messages
	python3 ${1}"/dronecan_dsdlc/dronecan_dsdlc.py" -O ${1}"/dsdlc_generated" ${1}"/dsdl/uavcan" ${1}"/dsdl/com/aeronavics"
	
	# Copy src files to header folder
	cp -a ${1}"/dsdlc_generated/src/." ${1}"/dsdlc_generated/include/"

	echo ${1}"/dsdlc_generated"

	PREPROCESSOR_MASK+=" dsdl dsdlc_generated libcanard"
	#add the relevant include directories.
	CFLAGS+=" -Idsdlc_generated/include -Ilibcanard -Ilibcanard/drivers/stm32"
	PFLAGS+=" -Idsdlc_generated/include -Ilibcanard -Ilibcanard/drivers/stm32"

 #Enable the default libcanard functions.
	PFLAGS+=" -DLIBCANARD_ENABLED"
	CFLAGS+=" -DLIBCANARD_ENABLED"

	# All done.
	return 0
}

# ALL DONE.
