#!/bin/bash

#	Copyright (C) 2011 Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

###########################################################################################################################
###																														###
### Name:			gen_nuttx_app_configuation																			###
###																														###
### Author:			Zane Barker																							###
###																														###
### Date Created:	9-12-2014																							###
###																														###
### Type:			Bash Script																							###
###																														###
### Purpose:		Generates the application configuration inside the Makefile and Kconfig file for the ValleyForge 	###
###						applications. This script is called as part of the build process for a NuttX project.		 	###
###																														###
###########################################################################################################################

# The following variables contain the fragments of makefile that need to be replicated for each application and inserted into the makefile proper.
APP_INFO_TEMPLATE='APP<APP_NUMBER>NAME = <APP_NAME>\nPRIORITY = <APP_PRIORITY>\nSTACKSIZE = <APP_STACKSIZE>\n'
APP_SOURCE_TEMPLATE='APP<APP_NUMBER>SRC = <APP_EXEC_FILE>\n'
MAIN_SOURCE_TEMPLATE='MAINSRC = <APPSRC>\n'
APP_OBJS_TEMPLATE='APP<APP_NUMBER>OBJS = \$\(APP<APP_NUMBER>SRC:.c=\$\(OBJEXT\)\)\n'
APP_CONFIG_APPNAME_TEMPLATE='APP_CONFIG_APP<APP_NUMBER> ?= APP<APP_NUMBER>\$\(EXEEXT\)\nAPP<APP_NUMBER> = \$\(APP_CONFIG_APP<APP_NUMBER>\)\n'
APP_INSTALL_PART1_TEMPLATE='\$\(BIN_DIR\)\$\(DELIM\)\$\(APP<APP_NUMBER>\): \$\(OBJS\) \$\(APP<APP_NUMBER>OBJ\)\n\t@echo "LD: \$\(APP<APP_NUMBER>\)"\n\t\$\(Q\) \$\(LD\) \$\(LDELFFLAGS\) \$\(LDLIBPATH\) -o \$\(INSTALL_DIR\)\$\(DELIM\)\$\(APP<APP_NUMBER>\) \$\(ARCHCRT0OBJ\) \$\(MAINOBJ\) \$\(LDLIBS\)\n\t\$\(Q\) \$\(NM\) -u \$\(INSTALL_DIR\)\$\(DELIM\)\$\(APP<APP_NUMBER>\)\n\n'
APP_INSTALL_PART2_TEMPLATE='\$\(BIN_DIR\)\$\(DELIM\)\$\(APP<APP_NUMBER>\)'
APP_CONTEXT_PART1_TEMPLATE='\$\(BUILTIN_REGISTRY\)\$\(DELIM\)\$\(APP<APP_NUMBER>NAME\)_main.bdat: \$\(DEPCONFIG\) Makefile\n\t\$\(call REGISTER,\$\(APP<APP_NUMBER>NAME\),\$\(PRIORITY\),\$\(STACKSIZE\),\$\(APP<APP_NUMBER>NAME\)_main\)\n'
APP_CONTEXT_PART2_TEMPLATE='\$\(BUILTIN_REGISTRY\)\$\(DELIM\)\$\(APP<APP_NUMBER>NAME\)_main.bdat'
KCONFIG_TEMPLATE='config VALLEYFORGE_<UPPER_APP_NAME>\n\tbool "\\"<APP_NAME>\\""\n\tdefault n\n\t---help---\n\t\tEnable the \\"<APP_NAME>\\" application.\n\nif VALLEYFORGE_<UPPER_APP_NAME>\n\nconfig VALLEYFORGE_<UPPER_APP_NAME>_PROGNAME\n\tstring "<APP_NAME>"\n\tdefault "<APP_NAME>"\n\tdepends on BUILD_KERNEL\n\t---help---\n\t\tThis is the name of the program that will be used when the\n\t\tNSH ELF program is installed.\n\nendif\n\n'

######################################## FUNCTION #########################################
###																						###
### Name:			gen_nuttx_app_configuration											###
###																						###
### Inputs/Outputs:	The path to apps/ValleyForge 										###
###																						###
### Purpose:		Handles the task of updating all of the necessary fields in the		###
###						application Makefile and Kconfig files.							###
###																						###
###########################################################################################
gen_nuttx_app_configuration() {
	MAKEFILE_LOCATION=$1/Makefile
	KCONFIG_LOCATION=$1/Kconfig

	# Converting all the strings into arrays.
	APP_EXECUTABLES_ARRAY=($EXECUTABLES)
	APP_NAMES_ARRAY=(${APP_EXECUTABLES_ARRAY[@]%'_main'})
	APP_PRIORITIES_ARRAY=($PRIORITIES)
	APP_STACKSIZE_ARRAY=($STACKSIZES)

	# Find the total number of applications being processed. It is assumed that the EXECUTABLES contains all the applications being built.
	APP_COUNT_TOTAL=${#APP_EXECUTABLES_ARRAY[@]}

	# Create a variable for the number of times to repeat the for loop.
	APP_LOOP_MAX=$((${APP_COUNT_TOTAL}-1))

	# Assign default values to anything that isn't already assigned a value.
	for APP_INDEX in in $(seq 0 $APP_LOOP_MAX)
	do
		APP_PRIORITIES_ARRAY[$APP_INDEX]=${APP_PRIORITIES_ARRAY[$APP_INDEX]:=$DEFAULT_APP_PRIORITY}
		APP_STACKSIZE_ARRAY[$APP_INDEX]=${APP_STACKSIZE_ARRAY[$APP_INDEX]:=$DEFAULT_APP_STACKSIZE}
	done

	# Populate the makefile and Kconfig file
	for APP_COUNT_CURRENT in $(seq 0 $APP_LOOP_MAX)
	do
		# The following functions are for creating the makefile.
		update_app_info $APP_COUNT_CURRENT ${APP_NAMES_ARRAY[$APP_COUNT_CURRENT]} ${APP_PRIORITIES_ARRAY[$APP_COUNT_CURRENT]} ${APP_STACKSIZE_ARRAY[$APP_COUNT_CURRENT]} $APP_LOOP_MAX
		update_app_source $APP_COUNT_CURRENT ${APP_EXECUTABLES_ARRAY[$APP_COUNT_CURRENT]} $1 $APP_LOOP_MAX
		update_main_source $APP_COUNT_CURRENT $APP_LOOP_MAX
		update_app_objects $APP_COUNT_CURRENT $APP_LOOP_MAX
		update_app_configs $APP_COUNT_CURRENT $APP_LOOP_MAX
		update_app_install $APP_COUNT_CURRENT $APP_LOOP_MAX
		update_app_context $APP_COUNT_CURRENT $APP_LOOP_MAX
		# The following function is for creating the Kconfig file.
		update_kconfig ${APP_NAMES_ARRAY[$APP_COUNT_CURRENT]}
	done

	# Add the C and assembly source files to the makefile.
	update_source_file_lists $1
}

######################################## FUNCTION #########################################
###																						###
### Name:			update_source_file_lists											###
###																						###
### Inputs/Outputs:	The path to apps/ValleyForge 										###
###																						###
### Purpose:		Updates the CSRCS and ASRCS fields in the Makefile.					###
###																						###
###########################################################################################
update_source_file_lists() {
	# Find all the C and CPP files in the directory that aren't suffixed by "_main".
	C_SOURCE_FILES=($(find $1 -iname "*.c" -o -iname "*.cpp" | grep -v "_main"))
	# Find all the assembly files in the directory.
	ASSEMBLY_SOURCE_FILES=($(find $1 -iname '*.s'))

	# Convert the lists into strings, otherwise sed throws an error.
	C_SOURCE_FILES=${C_SOURCE_FILES[@]}
	ASSEMBLY_SOURCE_FILES=${ASSEMBLY_SOURCE_FILES[@]}

	# Place these files in the appropriate location of the makefile.
	sed -i s^"<C_SOURCE_FILES>"^"${C_SOURCE_FILES}"^# $MAKEFILE_LOCATION
	sed -i s^"<ASSEMBLY_SOURCE_FILES>"^"${ASSEMBLY_SOURCE_FILES}"^ $MAKEFILE_LOCATION
}

######################################## FUNCTION #########################################
###																						###
### Name:			update_app_info														###
###																						###
### Inputs/Outputs:	1. The number of the application									###
###					2. The app name														###
###					3. The app priority													###
###					4. The app stacksize												###
###					5. The total number of applications being included in the Makefile	###
###																						###
### Purpose:		Updates the <APP_INFO> fields in the Makefile.						###
###																						###
###########################################################################################
update_app_info() {
	# Copy the APP_INFO template so we don't corrupt the template for other iterations.
	UPDATED_APP_INFO=${APP_INFO_TEMPLATE}
	# Fill out the APP_INFO string with the various function parameters.
	UPDATED_APP_INFO=$(echo ${UPDATED_APP_INFO} | sed s^"<APP_NUMBER>"^$1^)
	UPDATED_APP_INFO=$(echo ${UPDATED_APP_INFO} | sed s^"<APP_NAME>"^$2^)
	UPDATED_APP_INFO=$(echo ${UPDATED_APP_INFO} | sed s^"<APP_PRIORITY>"^$3^)
	UPDATED_APP_INFO=$(echo ${UPDATED_APP_INFO} | sed s^"<APP_STACKSIZE>"^$4^)

	# Add the completed UPDATED_APP_INFO string to the makefile.
	if [ ${1} -lt ${5} ]; then
		# If we're not in the last iteration, also append the <APP_INFO> flag for future iterations.
		sed -i s^"<APP_INFO>"^"${UPDATED_APP_INFO}\n<APP_INFO>"^ $MAKEFILE_LOCATION
	elif [ ${1} -eq ${5} ]; then
		# If we're in the last iteration, clean up the <APP_INFO> flag in the template makefile.
		sed -i s^"<APP_INFO>"^"${UPDATED_APP_INFO}"^ $MAKEFILE_LOCATION
	fi
}

######################################## FUNCTION #########################################
###																						###
### Name:			update_app_source													###
###																						###
### Inputs/Outputs:	1. The number of the application									###
###					2. The app name														###
###					3. The directory the application is in 								###
###					4. The total number of applications being included in the Makefile	###
###																						###
### Purpose:		Updates the <APP_SOURCE> fields in the Makefile.					###
###																						###
###########################################################################################
update_app_source() {
	# Find the actual filename of the executable file.
	EXEC_FILENAME=$(find $3 -iname '*.c' -o -iname '*.cpp' | grep "${2}")
	# Extract the filename from the full path string.
	EXEC_FILENAME=${EXEC_FILENAME##*/}

	# Copy the APP_SOURCE template so we don't corrupt the template for other iterations.
	UPDATED_APP_SOURCE=${APP_SOURCE_TEMPLATE}
	# Fill out the APP_SOURCE string with the various function parameters.
	UPDATED_APP_SOURCE=$(echo ${UPDATED_APP_SOURCE} | sed s^"<APP_NUMBER>"^$1^)
	UPDATED_APP_SOURCE=$(echo ${UPDATED_APP_SOURCE} | sed s^"<APP_EXEC_FILE>"^$EXEC_FILENAME^)

	# Add the completed UPDATED_APP_INFO string to the makefile.
	if [ ${1} -lt ${4} ]; then
		# If we're not in the last iteration, also append the <APP_SOURCE> flag for future iterations.
		sed -i s^"<APP_SOURCE>"^"${UPDATED_APP_SOURCE}<APP_SOURCE>"^ $MAKEFILE_LOCATION
	elif [ ${1} -eq ${4} ]; then
		# If we're in the last iteration, clean up the <APP_SOURCE> flag in the template makefile.
		sed -i s/"<APP_SOURCE>"/"${UPDATED_APP_SOURCE}"/ $MAKEFILE_LOCATION
	fi
}

######################################## FUNCTION #########################################
###																						###
### Name:			update_main_source													###
###																						###
### Inputs/Outputs:	1. The number of the application 									###
###					2. The total number of applications being included in the Makefile	###
###																						###
### Purpose:		Updates the <MAIN_SOURCE> fields in the Makefile.					###
###																						###
###########################################################################################
update_main_source() {
	if [ ${1} -lt ${2} ]; then
		# If we're not in the last iteration, also append the <MAIN_SOURCE> flag for future iterations.
		sed -i s^"<MAIN_SOURCE>"^"\$\(APP${1}SRC\) <MAIN_SOURCE>"^ $MAKEFILE_LOCATION
	elif [ ${1} -eq ${2} ]; then
		# If we're in the last iteration, clean up the <MAIN_SOURCE> flag in the template makefile.
		sed -i s^"<MAIN_SOURCE>"^"\$\(APP${1}SRC\)"^ $MAKEFILE_LOCATION
	fi
}

######################################## FUNCTION #########################################
###																						###
### Name:			update_app_objects													###
###																						###
### Inputs/Outputs:	1. The number of the application 									###
###					2. The total number of applications being included in the Makefile	###
###																						###
### Purpose:		Updates the <APP_OBJS> fields in the Makefile.						###
###																						###
###########################################################################################
update_app_objects() {
	# Copy the APP_OBJS template so we don't corrupt the template for other iterations.
	UPDATED_APP_OBJS=${APP_OBJS_TEMPLATE}
	# Fill out the APP_OBJS string with the various function parameters.
	UPDATED_APP_OBJS=$(echo ${UPDATED_APP_OBJS} | sed s^"<APP_NUMBER>"^$1^g)

	# Add the completed UPDATED_APP_OBJS string to the makefile.
	if [ ${1} -lt ${2} ]; then
		# If we're not in the last iteration, also append the <APP_OBJS> flag for future iterations.
		sed -i s^"<APP_OBJS>"^"${UPDATED_APP_OBJS}<APP_OBJS>"^ $MAKEFILE_LOCATION
	elif [ ${1} -eq ${2} ]; then
		# If we're in the last iteration, clean up the <APP_OBJS> flag in the template makefile.
		sed -i s^"<APP_OBJS>"^"${UPDATED_APP_OBJS}"^ $MAKEFILE_LOCATION
	fi
}

######################################## FUNCTION #########################################
###																						###
### Name:			update_app_configs													###
###																						###
### Inputs/Outputs:	1. The number of the application 									###
###					2. The total number of applications being included in the Makefile	###
###																						###
### Purpose:		Updates the <APP_CONFIG_APPNAME> fields in the Makefile.			###
###																						###
###########################################################################################
update_app_configs() {
	# Copy the APP_CONFIG_APPNAME template so we don't corrupt the template for other iterations.
	UPDATED_APP_CONFIG=${APP_CONFIG_APPNAME_TEMPLATE}
	# Fill out the UPDATED_APP_CONFIG_APPNAME string with the various function parameters.
	UPDATED_APP_CONFIG=$(echo ${UPDATED_APP_CONFIG} | sed s^"<APP_NUMBER>"^$1^g)

	# Add the completed UPDATED_APP_OBJS string to the makefile.
	if [ ${1} -lt ${2} ]; then
		# If we're not in the last iteration, also append the <APP_OBJS> flag for future iterations.
		sed -i s^"<APP_CONFIG_APPNAME>"^"${UPDATED_APP_CONFIG}\n<APP_CONFIG_APPNAME>"^ $MAKEFILE_LOCATION
	elif [ ${1} -eq ${2} ]; then
		# If we're in the last iteration, clean up the <APP_OBJS> flag in the template makefile.
		sed -i s^"<APP_CONFIG_APPNAME>"^"${UPDATED_APP_CONFIG}"^ $MAKEFILE_LOCATION
	fi
}

######################################## FUNCTION #########################################
###																						###
### Name:			update_app_install													###
###																						###
### Inputs/Outputs:	1. The number of the application 									###
###					2. The total number of applications being included in the Makefile	###
###																						###
### Purpose:		Updates the <APP_INSTALL> fields in the Makefile.					###
###																						###
###########################################################################################
update_app_install() {
	# Copy the APP_INSTALL template so we don't corrupt the template for other iterations.
	UPDATED_APP_INSTALL_PART1=${APP_INSTALL_PART1_TEMPLATE}
	UPDATED_APP_INSTALL_PART2=${APP_INSTALL_PART2_TEMPLATE}
	# Fill out the UPDATED_APP_INSTALL string with the various function parameters.
	UPDATED_APP_INSTALL_PART1=$(echo ${UPDATED_APP_INSTALL_PART1} | sed s^"<APP_NUMBER>"^$1^g)
	UPDATED_APP_INSTALL_PART2=$(echo ${UPDATED_APP_INSTALL_PART2} | sed s^"<APP_NUMBER>"^$1^g)

	# Add the completed UPDATED_APP_INSTALL strings to the makefile.
	if [ ${1} -lt ${2} ]; then
		# If we're not in the last iteration, also append the <APP_INSTALL> flags for future iterations.
		sed -i s^"<APP_INSTALL_PART1>"^"${UPDATED_APP_INSTALL_PART1}\n<APP_INSTALL_PART1>"^ $MAKEFILE_LOCATION
		sed -i s^"<APP_INSTALL_PART2>"^"${UPDATED_APP_INSTALL_PART2} <APP_INSTALL_PART2>"^ $MAKEFILE_LOCATION
	elif [ ${1} -eq ${2} ]; then
		# If we're in the last iteration, clean up the <APP_INSTALL> flags in the template makefile.
		sed -i s^"<APP_INSTALL_PART1>"^"${UPDATED_APP_INSTALL_PART1}"^ $MAKEFILE_LOCATION
		sed -i s^"<APP_INSTALL_PART2>"^"${UPDATED_APP_INSTALL_PART2}"^ $MAKEFILE_LOCATION
	fi
}

######################################## FUNCTION #########################################
###																						###
### Name:			update_app_context													###
###																						###
### Inputs/Outputs:	1. The number of the application 									###
###					2. The total number of applications being included in the Makefile	###
###																						###
### Purpose:		Updates the <APP_CONTEXT> fields in the Makefile.					###
###																						###
###########################################################################################
update_app_context() {
	# Copy the APP_CONTEXT template so we don't corrupt the template for other iterations.
	UPDATED_APP_CONTEXT_PART1=${APP_CONTEXT_PART1_TEMPLATE}
	UPDATED_APP_CONTEXT_PART2=${APP_CONTEXT_PART2_TEMPLATE}
	# Fill out the UPDATED_APP_CONTEXT string with the various function parameters.
	UPDATED_APP_CONTEXT_PART1=$(echo ${UPDATED_APP_CONTEXT_PART1} | sed s^"<APP_NUMBER>"^$1^g)
	UPDATED_APP_CONTEXT_PART2=$(echo ${UPDATED_APP_CONTEXT_PART2} | sed s^"<APP_NUMBER>"^$1^g)

	# Add the completed UPDATED_APP_CONTEXT strings to the makefile.
	if [ ${1} -lt ${2} ]; then
		# If we're not in the last iteration, also append the <APP_CONTEXT> flags for future iterations.
		sed -i s^"<APP_CONTEXT_PART1>"^"${UPDATED_APP_CONTEXT_PART1}<APP_CONTEXT_PART1>"^ $MAKEFILE_LOCATION
		sed -i s^"<APP_CONTEXT_PART2>"^"${UPDATED_APP_CONTEXT_PART2} <APP_CONTEXT_PART2>"^ $MAKEFILE_LOCATION
	elif [ ${1} -eq ${2} ]; then
		# If we're in the last iteration, clean up the <APP_CONTEXT> flags in the template makefile.
		sed -i s^"<APP_CONTEXT_PART1>"^"${UPDATED_APP_CONTEXT_PART1}"^ $MAKEFILE_LOCATION
		sed -i s^"<APP_CONTEXT_PART2>"^"${UPDATED_APP_CONTEXT_PART2}"^ $MAKEFILE_LOCATION
	fi
}

######################################## FUNCTION #########################################
###																						###
### Name:			update_kconfig 														###
###																						###
### Inputs/Outputs:	1. The name of the applications 									###
###																						###
### Purpose:		Updates the the Kconfig file for a given application.				###
###																						###
###########################################################################################
update_kconfig() {
	# Copy the KCONFIG_TEMPLATE so we don't corrupt the template for future iterations.
	UPDATED_KCONFIG=${KCONFIG_TEMPLATE}
	# Fill out the KCONFIG string with the various function parameters.
	UPDATED_KCONFIG=$(echo ${UPDATED_KCONFIG} | sed s/"<UPPER_APP_NAME>"/${1^^}/g)
	UPDATED_KCONFIG=$(echo ${UPDATED_KCONFIG} | sed s^"<APP_NAME>"^${1}^g)

	echo -e $UPDATED_KCONFIG >> ${KCONFIG_LOCATION}
}