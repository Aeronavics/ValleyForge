#!/usr/bin/env bash

#	Copyright (C) 2013 Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

###########################################################################################################################
###															###
### Name:		gen_mavlink											###
###															###
### Author:		Edwin Hayes											###
###															###
### Date Created:	10-02-2013											###
###															###
### Type:		Bash Script											###
###															###
### Purpose:		Provides functions which generate code which implements the MAVlink communications protocol. 	###
###															###
###########################################################################################################################

# Indicate the file was imported successfully.
echo -e "${CYAN}Imported MAVlink code generation functions.\n${NO_COLOUR}"

######################################## FUNCTION #########################################
###											###
### Name:		gen_mavlink							###
###											###
### Inputs/Outputs:	Takes the path to the source location where to generate code.	###
###											###
### Purpose:		Generates files which implements the MAVlink communications	###
###			protocol.  The generated files will still require the user to	###
###			fill in the appropriate behaviour for particular messages,	###
###			plus implementing the actual TX/RX process.			###
###											###
###########################################################################################

gen_mavlink()
{
	# DEFINE CONSTANTS.

	GEN_CACHE=${TCPATH}/tmp/gen_cache
	DEFINITIONS=${TCPATH}/var/mavlink

	# PRIVATE INTERNAL FUNCTIONS.

	# FUNCTION PROPER STARTS HERE.

	# Check if the specified location is actually legit.
	if [ ! -d $1 ]; then
		# The specified location is not a directory.
		echo -e "${RED}Invalid source location for code generation.\n${NO_COLOUR}"
		return 1
	fi
	echo -e "${CYAN}Generating MAVlink protocol code...\n${NO_COLOUR}"

	# Check if a mavlink definitions file to use has been specified.
	if [ -z "${MAVLINK_DEFS}" ]; then
		# No mavlink definitions file was specified.
		echo -e "${RED}\tNo MAVlink definitions file was specified; cannot generate MAVlink library.\n${NO_COLOUR}"
		return 1
	fi
	# Else, check if the specified file actually exists.
	if [ -f "$1/mavlink/${MAVLINK_DEFS}" ]; then
		# A matching XML is in the mavlink folder in the source tree.
		echo -e "${CYAN}\tFound ${MAVLINK_DEFS} in the source tree.\n${NO_COLOUR}"
		DEFINITIONS="$1/mavlink/${MAVLINK_DEFS}"
	elif [ -f "${DEFINITIONS}/${MAVLINK_DEFS}" ]; then
		# A matching XML is in the common definitions folder.
		echo -e "${CYAN}\tFound ${MAVLINK_DEFS} in the common definitions folder.\n${NO_COLOUR}"
		DEFINITIONS=${DEFINITIONS}/${MAVLINK_DEFS}
	else
		# The XML is nowhere to be found.
		echo -e "${RED}\tCouldn't find the MAVlink definitions file ${MAVLINK_DEFS}.\n${NO_COLOUR}"
		return 1
	fi

	# Unpack the MAVlink source.
	unpack_mavlink
	if [ $? -ne 0 ]; then
		# We couldn't unpack the MAVlink source, so we'll have to abort.
		return 1
	fi

	# Copy the relevant makefile into the cache.
	echo -e "${CYAN}\tConstructing makefile for generating MAVlink code...\n${NO_COLOUR}"
	mkdir -p ${GEN_CACHE}
	cp -f ${TCPATH}/bld/code_generation/Makefile_mavlink ${GEN_CACHE}

	# Update the working makefile with the appropriate values for this component.
	${VF_OSCFG_SED} ${VF_OSCFG_SED_EXTPARAM} ${VF_OSCFG_SED_INLPARAM} "s^(MAVLINK_GENERATOR *= *)BUILD_INSERTS_MAVLINK_GENERATOR_HERE(\\s.*)?^\1${VENDOR_MAVLINK_LOCAL}/pymavlink/tools/mavgen.py\2^" ${GEN_CACHE}/Makefile_mavlink
	${VF_OSCFG_SED} ${VF_OSCFG_SED_EXTPARAM} ${VF_OSCFG_SED_INLPARAM} "s^(MAVLINK_DEFINITIONS *= *)BUILD_INSERTS_MAVLINK_DEFINITIONS_HERE(\\s.*)?^\1${DEFINITIONS}\2^" ${GEN_CACHE}/Makefile_mavlink
	${VF_OSCFG_SED} ${VF_OSCFG_SED_EXTPARAM} ${VF_OSCFG_SED_INLPARAM} "s^(MAVLINK_SANDPIT *= *)BUILD_INSERTS_MAVLINK_SANDPIT_HERE(\\s.*)?^\1${VENDOR_MAVLINK_LOCAL}\2^" ${GEN_CACHE}/Makefile_mavlink

	# Run the MAVlink code generator.
	echo -e "${CYAN}\tBuilding MAVlink protocol files...\n${NO_COLOUR}"
	export PYTHONPATH="${PYTHONPATH}:${VENDOR_MAVLINK_LOCAL}"
	make -C ${GEN_CACHE} -f Makefile_mavlink all

	# NOTE - Don't put anything in here; we need the return value from 'make' below.

	# Check if we actually generated some code.
	if [ $? != 0 ]; then
		# Something went wrong.
		echo -e "\n${RED}\tMAVlink code generation failed.\n${NO_COLOUR}"
		return 1
	fi
	echo -e ""

	# Copy the generated code into the source tree.
	echo -e "${CYAN}\tCopying across generated MAVlink files...\n${NO_COLOUR}"
	cp -rf ${GEN_CACHE}/mavlink $1/mavlink

	# All done.
	return 0
}

# ALL DONE.
