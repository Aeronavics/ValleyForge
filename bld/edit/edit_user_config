#!/usr/bin/env bash

#	Copyright (C) 2011 Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

###########################################################################################################################
###
### Name:           edit_user_config
###
### Author:         Zac Frank
###
### Date Created:	15-11-2011
###
### Type:           Bash Function Definitions
###
### Purpose:		Allows the user to edit project wide configuration settings.
###
###########################################################################################################################

# DEFINE CONSTANTS.

# Define file names.

USER_CONFIG_FILE="var/config.cfg"

# Import the colours used for interface output.
source $TCPATH/bld/common/def_colours

# Import functions for manipulating config files.
source $TCPATH/bld/common/config_helpers

# Import functions for editing configuration files.
source $TCPATH/bld/edit/edit_config_files

######################################## FUNCTION #########################################
###
### Name:		vf_config_ui
###
### Inputs/Outputs:	None
###
### Purpose:	Implements an interactive interface which prompts the user to select from
###             the range of possible project wide configuration settings to alter.
###
###########################################################################################

vf_config_ui()
{
	# Loop continuously until the user exits the script.
	while :
	do
		# Print the prompt to the user.
		echo -e  "${GREEN}Please select an option:\n${NO_COLOUR}"
		echo -en "\t${UNDERLINED}U${NO_COLOUR}SER Name    ${UNDERLINED}R${NO_COLOUR}ERUN Configuration Wizard    Edit Configuration ${UNDERLINED}K${NO_COLOUR}EYS    ${UNDERLINED}B${NO_COLOUR}ACK${NO_COLOUR}"
		
		# Read a single character input from the user and select the appropriate response.
		read -s -n 1
		echo -e "\n" # NOTE - This is required since read won't add a newline after reading a single character.
		case "$REPLY" in
			"U" | "u" )
				vf_config_setname
				;;

			"R" | "r" )
				vf_config_wizard
				;;

			"K" | "k" )
				vf_config_keys
				;;

			"B" | "b" | "X" | "x" )
				# We're done here.
				break
				;;
		esac
	done

	# All done.
	return 0
}

######################################## FUNCTION #########################################
###
### Name:		vf_config_wizard
###
### Inputs/Outputs:	None
###
### Purpose:	Implements an interactive 'wizard' which prompts the user to configure
###				various user/project wide configuration settings in one go.  This is
###				initially called the first time the toolchain is started.
###
###########################################################################################

vf_config_wizard()
{
	# Prompt for each of the configuration settings in turn.

	vf_config_setname

	# Record that we've now completed the setup process.
	push_key "$TCPATH/$USER_CONFIG_FILE" "tc_startup" "done"

	# All done.
	return 0
}

##################################### MINOR FUNCTIONS ####################################

vf_config_setname()
{
	# Prompt the user to enter their name.
	echo -e -n "${GREEN}Please enter your name: ${NO_COLOUR}"
	read
	echo -e ""

	# Update the user name in the configuration file.
	push_key "$TCPATH/$USER_CONFIG_FILE" "tc_authname" "${REPLY}"
	echo -e "${CYAN}Changed username to $REPLY.\n${NO_COLOUR}"

	# All done.
	return 0
}

# ALL DONE.
