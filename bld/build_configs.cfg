#! /bin/bash
# Having the shebang at the top makes my text editor colour the contents of the file nicely.  It isn't required though.

# This is a config file for the different targets of the ValleyForge toolchain.

# This section contains information on the application build profiles.

function bconf_ATmega64M1_BareMetal()
{
BCONF_NAME="ATmega64M1 Bare Metal"
COMPILER=avr-gcc
OBJCOPY=avr-objcopy
MAKEFUNCTION=makeavr
MAKEFILE=${TCPATH}/res/avr/Makefile
MCU_CODE=atmega64m1
IOHEADER="<avr/io.h>"
}

function bconf_ATmega2560_BareMetal()
{
BCONF_NAME="ATmega2560 Bare Metal"
COMPILER=avr-gcc
OBJCOPY=avr-objcopy
MAKEFUNCTION=makeavr
MAKEFILE=${TCPATH}/res/avr/Makefile
MCU_CODE=atmega2560
IOHEADER="<avr/io.h>"
}

function bconf_AT90CAN128_BareMetal()
{
BCONF_NAME="AT90CAN128 Bare Metal"
COMPILER=avr-gcc
OBJCOPY=avr-objcopy
MAKEFUNCTION=makeavr
MAKEFILE=${TCPATH}/res/avr/Makefile
MCU_CODE=at90can128
IOHEADER="<avr/io.h>"
}

function bconf_AT32UC3C0512C_BareMetal()
{
BCONF_NAME="AT32UC3C0512C Bare Metal"
COMPILER=${TCPATH}/res/avr32/avr32comp/bin/avr32-gcc
OBJCOPY=${TCPATH}/res/avr32/avr32comp/bin/avr32-objcopy
MAKEFUNCTION=makeavr32
MAKEFILE=${TCPATH}/res/avr32/Makefile
MCU_CODE=uc3c0512c
IOHEADER="<avr32/io.h>"
}

function bconf_PandaBoard_BareMetal()
{
BCONF_NAME="PandaBoard Bare Metal - This is very experimental.  It is ABSOLUTELY going to fail at this point."
COMPILER=arm-linux-gnueabi-gcc
ASSEMBLER=arm-linux-gnueabi-as
LINKER=arm-linux-gnueabi-ld
OBJCOPY=arm-linux-gnueabi-objcopy
MAKEFUNCTION=makearm
MAKEFILE=${TCPATH}/res/arm/Makefile
LINKSCRIPT=${TCPATH}/res/arm/bare_metal/link_script.ld
MCU_CODE=cortex-a9
IOHEADER=
CFLAGS=
AFLAGS=
LFLAGS="-nostdlib"
OUTPUT_TYPE="binary"
OUTPUT_NAME=${COMPONENT}.bin
}

function bconf_PandaBoard_Ubuntu()
{
BCONF_NAME="PandaBoard Ubuntu (Linux)"
COMPILER=arm-linux-gnueabi-gcc
ASSEMBLER=arm-linux-gnueabi-as
LINKER=arm-linux-gnueabi-gcc
OBJCOPY=arm-linux-gnueabi-objcopy
MAKEFUNCTION=makearm
MAKEFILE=${TCPATH}/res/arm/Makefile
LINKSCRIPT=
MCU_CODE=cortex-a9
IOHEADER=
CFLAGS=
AFLAGS=
LFLAGS=
OUTPUT_TYPE="elf32-littlearm"
OUTPUT_NAME=${COMPONENT}
}

# This section contains information on the bootloader build profiles.

function bload_ATmega64M1_ISP()
{
BLOAD_NAME="ATmega64M1 ISP Only Bootloader"
COMPILER=avr-gcc
OBJCOPY=avr-objcopy
MAKEFUNCTION=makeavr_bootloader
MAKEFILE=${TCPATH}/res/avr/bootloader/Makefile
SOURCEPATH=${TCPATH}/res/avr/bootloader
MCU_CODE=atmega64m1
IOHEADER="<avr/io.h>"
BOOTSTART="0x3000" # Starting address to place bootloader at.  See datasheet.
}

function bload_ATmega64M1_CAN()
{
BLOAD_NAME="ATmega64M1 CANbus Bootloader"
COMPILER=avr-gcc
OBJCOPY=avr-objcopy
MAKEFUNCTION=makeavr_bootloader
MAKEFILE=${TCPATH}/res/avr/bootloader/Makefile
SOURCEPATH=${TCPATH}/res/avr/bootloader
MCU_CODE=atmega64m1
IOHEADER="<avr/io.h>"
BOOTSTART="0x3000"
}

function bload_ATmega64M1_CANSPI()
{
BLOAD_NAME="ATmega64M1 CANbus via Microchip MCP2515 via SPI Bootloader"
COMPILER=avr-gcc
OBJCOPY=avr-objcopy
MAKEFUNCTION=makeavr_bootloader
MAKEFILE=${TCPATH}/res/avr/bootloader/Makefile
SOURCEPATH=${TCPATH}/res/avr/bootloader
MCU_CODE=atmega64m1
IOHEADER="<avr/io.h>"
BOOTSTART="0x3000"
}

