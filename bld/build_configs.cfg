#! /bin/bash
# Having the shebang at the top makes my text editor colour the contents of the file nicely.  It isn't required though.

#	Copyright (C) 2012 Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

# This is a config file for the different targets of the ValleyForge toolchain.

# This section contains information on the application build profiles.

function bconf_ATmega64M1_BareMetal()
{
BCONF_NAME="ATmega64M1 Bare Metal"
C_COMPILER=avr-gcc
P_COMPILER=avr-g++
OBJCOPY=avr-objcopy
OBJDUMP=avr-objdump
SIZE=avr-size
MAKEFUNCTION=makeavr
MAKEFILE=${TCPATH}/res/avr/Makefile
MCU_CODE=atmega64m1
IOHEADER="<avr/io.h>"
STDINTHEADER="<stdint.h>"
HAL_HEADER_PATH=res/common/hal
HAL_SOURCE_PATH=res/avr/hal
HAL_EN_LIST=
PORT_COUNT="B C D E"
BCONF_SPECIFIC_CONFIG=res/avr/bconf_specific_config
}

function bconf_ATmega64M1_freertos()
{
BCONF_NAME="ATmega64M1 FreeRTOS"
C_COMPILER=avr-gcc
P_COMPILER=avr-g++
OBJCOPY=avr-objcopy
OBJDUMP=avr-objdump
SIZE=avr-size
MAKEFUNCTION=makeavr
MAKEFILE=${TCPATH}/res/avr/Makefile
LINKSCRIPT=
FREERTOS_CONFIG_FILE=${TCPATH}/res/templates/freertos/atmega64m1/FreeRTOSConfig.h
MCU_CODE=atmega64m1
IOHEADER="<avr/io.h>"
STDINTHEADER="<stdint.h>"
HAL_HEADER_PATH=res/common/hal
HAL_SOURCE_PATH=res/avr/hal
HAL_EN_LIST="gpio"
PORT_COUNT="B C D E"
BCONF_SPECIFIC_CONFIG=res/avr/bconf_specific_config
BCONF_SPECIFIC_RTOS_PATH=res/avr/freertos/atmega64m1
BCONF_COMMON_RTOS_PATH=res/freertos
}

function bconf_ATmega2560_BareMetal()
{
BCONF_NAME="ATmega2560 Bare Metal"
C_COMPILER=avr-gcc
P_COMPILER=avr-g++
OBJCOPY=avr-objcopy
OBJDUMP=avr-objdump
SIZE=avr-size
MAKEFUNCTION=makeavr
MAKEFILE=${TCPATH}/res/avr/Makefile
MCU_CODE=atmega2560
IOHEADER="<avr/io.h>"
STDINTHEADER="<stdint.h>"
HAL_HEADER_PATH=res/common/hal
HAL_SOURCE_PATH=res/avr/hal
HAL_EN_LIST="gpio watchdog mem tc usart spi"
PORT_COUNT="A B C D E F G H I J K L"
BCONF_SPECIFIC_CONFIG=res/avr/bconf_specific_config
}

function bconf_ATmega2560_freertos()
{
BCONF_NAME="ATmega2560 FreeRTOS"
C_COMPILER=avr-gcc
P_COMPILER=avr-g++
OBJCOPY=avr-objcopy
OBJDUMP=avr-objdump
SIZE=avr-size
MAKEFUNCTION=makeavr
MAKEFILE=${TCPATH}/res/avr/Makefile
LINKSCRIPT=${TCPATH}/res/avr/freertos/atmega2560/linker_script.x
FREERTOS_CONFIG_FILE=${TCPATH}/res/templates/freertos/atmega2560/FreeRTOSConfig.h
CFLAGS="-D FREE_RTOS_INC"
AFLAGS=
MCU_CODE=atmega2560
IOHEADER="<avr/io.h>"
STDINTHEADER="<stdint.h>"
HAL_HEADER_PATH=res/common/hal
HAL_SOURCE_PATH=res/avr/hal
HAL_EN_LIST="gpio watchdog mem tc"
PORT_COUNT="A B C D E F G H I J K L"
BCONF_SPECIFIC_CONFIG=res/avr/bconf_specific_config
BCONF_SPECIFIC_RTOS_PATH=res/avr/freertos/atmega2560
BCONF_COMMON_RTOS_PATH=res/freertos
}

function bconf_AT90CAN128_BareMetal()
{
BCONF_NAME="AT90CAN128 Bare Metal"
C_COMPILER=avr-gcc
P_COMPILER=avr-g++
OBJCOPY=avr-objcopy
OBJDUMP=avr-objdump
SIZE=avr-size
MAKEFUNCTION=makeavr
MAKEFILE=${TCPATH}/res/avr/Makefile
MCU_CODE=at90can128
IOHEADER="<avr/io.h>"
STDINTHEADER="<stdint.h>"
HAL_HEADER_PATH=res/common/hal
HAL_SOURCE_PATH=res/avr/hal
HAL_EN_LIST=
PORT_COUNT="A B C D E F G"
BCONF_SPECIFIC_CONFIG=res/avr/bconf_specific_config
}

function bconf_AT90CAN128_freertos()
{
BCONF_NAME="AT90CAN128 FreeRTOS"
C_COMPILER=avr-gcc
P_COMPILER=avr-g++
OBJCOPY=avr-objcopy
OBJDUMP=avr-objdump
SIZE=avr-size
MAKEFUNCTION=makeavr
MAKEFILE=${TCPATH}/res/avr/Makefile
FREERTOS_CONFIG_FILE=${TCPATH}/res/templates/freertos/at90can128/FreeRTOSConfig.h
MCU_CODE=at90can128
IOHEADER="<avr/io.h>"
STDINTHEADER="<stdint.h>"
HAL_HEADER_PATH=res/common/hal
HAL_SOURCE_PATH=res/avr/hal
HAL_EN_LIST="gpio"
PORT_COUNT="A B C D E F G"
BCONF_SPECIFIC_CONFIG=res/avr/bconf_specific_config
BCONF_SPECIFIC_RTOS_PATH=res/avr/freertos/at90can128
BCONF_COMMON_RTOS_PATH=res/freertos
}

function bconf_AT32UC3C0512C_BareMetal()
{
BCONF_NAME="AT32UC3C0512C Bare Metal"
C_COMPILER=${TCPATH}/res/avr32/avr32comp/bin/avr32-gcc
P_COMPILER=${TCPATH}/res/avr32/avr32comp/bin/avr32-g++
OBJCOPY=${TCPATH}/res/avr32/avr32comp/bin/avr32-objcopy
OBJDUMP=${TCPATH}/res/avr32/avr32comp/bin/avr32-objdump
SIZE=${TCPATH}/res/avr32/avr32comp/bin/avr32-size
MAKEFUNCTION=makeavr32
MAKEFILE=${TCPATH}/res/avr32/Makefile
MCU_CODE=uc3c0512c
IOHEADER="<avr32/io.h>"
STDINTHEADER="<stdint.h>"
HAL_HEADER_PATH=res/common/hal
HAL_SOURCE_PATH=res/avr32/hal
HAL_EN_LIST="gpio"
PORT_COUNT="A B C D"
BCONF_SPECIFIC_CONFIG=
}

function bconf_AT32UC3C0512C_freertos()
{
BCONF_NAME="AT32UC3C0512C Bare Metal"
C_COMPILER=${TCPATH}/res/avr32/avr32comp/bin/avr32-gcc
P_COMPILER=${TCPATH}/res/avr32/avr32comp/bin/avr32-g++
OBJCOPY=${TCPATH}/res/avr32/avr32comp/bin/avr32-objcopy
OBJDUMP=${TCPATH}/res/avr32/avr32comp/bin/avr32-objdump
SIZE=${TCPATH}/res/avr32/avr32comp/bin/avr32-size
MAKEFUNCTION=makeavr32
MAKEFILE=${TCPATH}/res/avr32/Makefile
LINKSCRIPT=${TCPATH}/res/avr32/freertos/uc3c0512c/link_uc3c0512c.lds
FREERTOS_CONFIG_FILE=${TCPATH}/res/templates/freertos/uc3c0512c/FreeRTOSConfig.h
MCU_CODE=uc3c0512c
IOHEADER="<avr32/io.h>"
STDINTHEADER="<stdint.h>"
HAL_HEADER_PATH=res/common/hal
HAL_SOURCE_PATH=res/avr32/hal
HAL_EN_LIST="gpio"
PORT_COUNT="A B C D"
BCONF_SPECIFIC_CONFIG=
BCONF_SPECIFIC_RTOS_PATH=res/avr32/freertos/uc3c0512c
BCONF_COMMON_RTOS_PATH=res/freertos
}

function bconf_PandaBoard_BareMetal()
{
BCONF_NAME="PandaBoard Bare Metal - This is very experimental.  It is ABSOLUTELY going to fail at this point."
C_COMPILER=arm-linux-gnueabi-gcc
P_COMPILER=arm-linux-gnueabi-gcc
ASSEMBLER=arm-linux-gnueabi-as
LINKER=arm-linux-gnueabi-ld
OBJCOPY=arm-linux-gnueabi-objcopy
OBJDUMP=arm-linux-gnueabi-objdump
SIZE=
MAKEFUNCTION=makearm
MAKEFILE=${TCPATH}/res/arm/Makefile
LINKSCRIPT=${TCPATH}/res/arm/bare_metal/link_script.ld
MCU_CODE=cortex-a9
IOHEADER=
STDINTHEADER="<stdint.h>"
CFLAGS=
AFLAGS=
LFLAGS="-nostdlib"
OUTPUT_TYPE="binary"
OUTPUT_NAME=${COMPONENT}.bin
HAL_HEADER_PATH=res/common/hal
HAL_SOURCE_PATH=res/arm/hal
HAL_EN_LIST="gpio"
PORT_COUNT=
BCONF_SPECIFIC_CONFIG=
}

function bconf_PandaBoard_Ubuntu()
{
BCONF_NAME="PandaBoard Ubuntu (Linux)"
C_COMPILER=arm-linux-gnueabi-gcc
P_COMPILER=arm-linux-gnueabi-gcc
ASSEMBLER=arm-linux-gnueabi-as
LINKER=arm-linux-gnueabi-gcc
OBJCOPY=arm-linux-gnueabi-objcopy
OBJDUMP=arm-linux-gnueabi-objdump
SIZE=
MAKEFUNCTION=makearm
MAKEFILE=${TCPATH}/res/arm/Makefile
LINKSCRIPT=
MCU_CODE=cortex-a9
IOHEADER=
STDINTHEADER="<stdint.h>"
CFLAGS=
AFLAGS=
LFLAGS=
OUTPUT_TYPE="elf32-littlearm"
OUTPUT_NAME=${COMPONENT}
HAL_HEADER_PATH=res/common/hal
HAL_SOURCE_PATH=res/arm/hal
HAL_EN_LIST="gpio"
PORT_COUNT=
BCONF_SPECIFIC_CONFIG=
}

# This section contains information on the bootloader build profiles.

function bload_ATmega2560_ISP()
{
BLOAD_NAME="ATmega2560 ISP Only Bootloader"
C_COMPILER=avr-gcc
P_COMPILER=avr-g++
OBJCOPY=avr-objcopy
OBJDUMP=avr-objdump
SIZE=avr-size
MAKEFUNCTION=makeavr_bootloader
MAKEFILE=${TCPATH}/res/avr/bootloader/Makefile
SOURCEPATH=${TCPATH}/res/avr/bootloader
MCU_CODE=atmega2560
IOHEADER="<avr/io.h>"
STDINTHEADER="<stdint.h>"
BOOTSTART="3E000" # Starting address to place bootloader at.  See datasheet.
HAL_HEADER_PATH=res/common/hal
HAL_SOURCE_PATH=res/avr/hal
HAL_EN_LIST="gpio watchdog tc mem"
PORT_COUNT="A B C D E F G H I J K L"
BLOAD_SPECIFIC_CONFIG=res/avr/bload_specific_config
ACTIVE_MODULE=bootloader_module_isp
MAX_EEPROM_ADDRESS="0FFF"
}

function bload_ATmega2560_I2C()
{
BLOAD_NAME="ATmega2560 I2C Bootloader"
C_COMPILER=avr-gcc
P_COMPILER=avr-g++
OBJCOPY=avr-objcopy
OBJDUMP=avr-objdump
SIZE=avr-size
MAKEFUNCTION=makeavr_bootloader
MAKEFILE=${TCPATH}/res/avr/bootloader/Makefile
SOURCEPATH=${TCPATH}/res/avr/bootloader
MCU_CODE=atmega2560
IOHEADER="<avr/io.h>"
STDINTHEADER="<stdint.h>"
BOOTSTART="0x3E000" # Starting address to place bootloader at.  See datasheet.
HAL_HEADER_PATH=res/common/hal
HAL_SOURCE_PATH=res/avr/hal
HAL_EN_LIST="gpio watchdog tc mem"
PORT_COUNT="A B C D E F G H I J K L"
BLOAD_SPECIFIC_CONFIG=res/avr/bload_specific_config
ACTIVE_MODULE=bootloader_module_i2c
MAX_EEPROM_ADDRESS="0FFF"
}

function bload_ATmega2560_CANSPI()
{
BLOAD_NAME="ATmega2560 CANbus via Microchip MCP2515 via SPI Bootloader"
C_COMPILER=avr-gcc
P_COMPILER=avr-g++
OBJCOPY=avr-objcopy
OBJDUMP=avr-objdump
SIZE=avr-size
MAKEFUNCTION=makeavr_bootloader
MAKEFILE=${TCPATH}/res/avr/bootloader/Makefile
SOURCEPATH=${TCPATH}/res/avr/bootloader
MCU_CODE=atmega2560
IOHEADER="<avr/io.h>"
STDINTHEADER="<stdint.h>"
BOOTSTART="0x3E000" # Starting address to place bootloader at.  See datasheet.
PORT_COUNT="A B C D E F G H I J K L"
BLOAD_SPECIFIC_CONFIG=res/avr/bload_specific_config
ACTIVE_MODULE=bootloader_module_canspi
MAX_EEPROM_ADDRESS="0FFF"
}

function bload_ATmega64M1_ISP()
{
BLOAD_NAME="ATmega64M1 ISP Only Bootloader"
C_COMPILER=avr-gcc
P_COMPILER=avr-g++
OBJCOPY=avr-objcopy
OBJDUMP=avr-objdump
SIZE=avr-size
MAKEFUNCTION=makeavr_bootloader
MAKEFILE=${TCPATH}/res/avr/bootloader/Makefile
SOURCEPATH=${TCPATH}/res/avr/bootloader
MCU_CODE=atmega64m1
IOHEADER="<avr/io.h>"
STDINTHEADER="<stdint.h>"
BOOTSTART="0xE000" # Starting address to place bootloader at.  See datasheet.
PORT_COUNT="B C D E"
BLOAD_SPECIFIC_CONFIG=res/avr/bload_specific_config
ACTIVE_MODULE=bootloader_module_isp
MAX_EEPROM_ADDRESS="07FF"
}

function bload_ATmega64M1_I2C()
{
BLOAD_NAME="ATmega64M1 I2C Bootloader"
C_COMPILER=avr-gcc
P_COMPILER=avr-g++
OBJCOPY=avr-objcopy
OBJDUMP=avr-objdump
SIZE=avr-size
MAKEFUNCTION=makeavr_bootloader
MAKEFILE=${TCPATH}/res/avr/bootloader/Makefile
SOURCEPATH=${TCPATH}/res/avr/bootloader
MCU_CODE=atmega64m1
IOHEADER="<avr/io.h>"
STDINTHEADER="<stdint.h>"
BOOTSTART="0xF000" # Starting address to place bootloader at.  See datasheet.
PORT_COUNT="B C D E"
BLOAD_SPECIFIC_CONFIG=res/avr/bload_specific_config
ACTIVE_MODULE=bootloader_module_i2c
MAX_EEPROM_ADDRESS="07FF"
}

function bload_ATmega64M1_CANSPI()
{
BLOAD_NAME="ATmega64M1 CANbus via Microchip MCP2515 via SPI Bootloader"
C_COMPILER=avr-gcc
P_COMPILER=avr-g++
OBJCOPY=avr-objcopy
OBJDUMP=avr-objdump
SIZE=avr-size
MAKEFUNCTION=makeavr_bootloader
MAKEFILE=${TCPATH}/res/avr/bootloader/Makefile
SOURCEPATH=${TCPATH}/res/avr/bootloader
MCU_CODE=atmega64m1
IOHEADER="<avr/io.h>"
STDINTHEADER="<stdint.h>"
BOOTSTART="0xF000" # Starting address to place bootloader at.  See datasheet.
PORT_COUNT="B C D E"
BLOAD_SPECIFIC_CONFIG=res/avr/bload_specific_config
ACTIVE_MODULE=bootloader_module_canspi
MAX_EEPROM_ADDRESS="07FF"
}

function bload_AT90CAN128_ISP()
{
BLOAD_NAME="AT90CAN128 ISP Only Bootloader"
C_COMPILER=avr-gcc
P_COMPILER=avr-g++
OBJCOPY=avr-objcopy
OBJDUMP=avr-objdump
SIZE=avr-size
MAKEFUNCTION=makeavr_bootloader
MAKEFILE=${TCPATH}/res/avr/bootloader/Makefile
SOURCEPATH=${TCPATH}/res/avr/bootloader
MCU_CODE=at90can128
IOHEADER="<avr/io.h>"
STDINTHEADER="<stdint.h>"
BOOTSTART="0x1E000" # Starting address to place bootloader at.  See datasheet.
PORT_COUNT="A B C D E F G"
BLOAD_SPECIFIC_CONFIG=res/avr/bload_specific_config
ACTIVE_MODULE=bootloader_module_isp
MAX_EEPROM_ADDRESS="0FFF"
}

function bload_AT90CAN128_I2C()
{
BLOAD_NAME="AT90CAN128 I2C Bootloader"
C_COMPILER=avr-gcc
P_COMPILER=avr-g++
OBJCOPY=avr-objcopy
OBJDUMP=avr-objdump
SIZE=avr-size
MAKEFUNCTION=makeavr_bootloader
MAKEFILE=${TCPATH}/res/avr/bootloader/Makefile
SOURCEPATH=${TCPATH}/res/avr/bootloader
MCU_CODE=at90can128
IOHEADER="<avr/io.h>"
STDINTHEADER="<stdint.h>"
BOOTSTART="0x1E000" # Starting address to place bootloader at.  See datasheet.
PORT_COUNT="A B C D E F G"
BLOAD_SPECIFIC_CONFIG=res/avr/bload_specific_config
ACTIVE_MODULE=bootloader_module_i2c
MAX_EEPROM_ADDRESS="0FFF"
}

function bload_AT90CAN128_CANSPI()
{
BLOAD_NAME="AT90CAN128 CANbus via Microchip MCP2515 via SPI Bootloader"
C_COMPILER=avr-gcc
P_COMPILER=avr-g++
OBJCOPY=avr-objcopy
OBJDUMP=avr-objdump
SIZE=avr-size
MAKEFUNCTION=makeavr_bootloader
MAKEFILE=${TCPATH}/res/avr/bootloader/Makefile
SOURCEPATH=${TCPATH}/res/avr/bootloader
MCU_CODE=at90can128
IOHEADER="<avr/io.h>"
STDINTHEADER="<stdint.h>"
BOOTSTART="0x1E000" # Starting address to place bootloader at.  See datasheet.
PORT_COUNT="A B C D E F G"
BLOAD_SPECIFIC_CONFIG=res/avr/bload_specific_config
ACTIVE_MODULE=bootloader_module_canspi
MAX_EEPROM_ADDRESS="0FFF"
}
