#!/usr/bin/env bash

#	Copyright (C) 2011 Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

###########################################################################################################################
###															###
### Name:		delete_component										###
###															###
### Author:		Zac Frank											###
###															###
### Date Created:	15-11-2011											###
###															###
### Type:		Bash Script											###
###															###
### Purpose:		Deletes a component.									 	###
###															###
###########################################################################################################################

# FIGURE OUT WHERE WE ARE.

# Determine which operating system we are using.
VF_OS="$(uname)"
unset VF_OS_DARWIN
unset VF_OS_LINUX
if [ "${VF_OS}" == "Darwin" ]; then
	VF_OS_DARWIN=1
else
	VF_OS_LINUX=1
fi

# Determine what the absolute path to the root of the toolchain is.
VF_SCRIPTPATH=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
TCPATH=$(echo $VF_SCRIPTPATH | sed 's/\/bld.*//')

# DEFINE CONSTANTS.

# Define file names.

# Define the colours used for interface output.
source $TCPATH/bld/common/def_colours

# Create directories which don't come automatically with the toolchain.
source $TCPATH/bld/common/create_empty_dirs

################################ SCRIPT PROPER STARTS HERE ###############################

# Work out what components there are.
COMPONENTS=`find ${TCPATH}/src -name '*.cfg' | sed "s/.*\/src\///g" | grep -e "\([^/]*\)/\1.cfg" | sed "s/\/[^/]*\.cfg//g"`
COMPONENT_COUNT=`echo ${COMPONENTS} | wc -w`

# Check if there are actually some valid choices.
if [ ${COMPONENT_COUNT} == 0 ]; then
	echo -e "${YELLOW}There are currently no components in this project.  Create a new component with CREATE -> CREATE COMPONENT.\n${NO_COLOUR}"
	exit 0
fi

# Provide a list of valid components for the user to choose from.
echo -e "${GREEN}Please select which component to delete:\n${NO_COLOUR}"

# Create a menu of choices and have the user select one.
DEL=
select DEL in ${COMPONENTS}
do
	# Check that the user wasn't a moron.
	if [  -z "$DEL" -o -z "$(echo $COMPONENTS | grep \\\<$DEL\\\>)" ]; then
		# The user is apparently a moron.
		echo -e "${RED}Invalid choice.\n${NO_COLOUR}"

		# Since deleting a component is serious business, we won't give them another try, we'll just exit.
		break
	else
		# A legitimate option was selected, so delete that component.

		# We had better present the user with some kind of confirmation.
		echo -e -n "${BOLD_GREEN}Do you really want to delete component ${DEL}?  This cannot be undone. (Y/N) ${NO_COLOUR}"
		read -n 1
		echo -e "\n" # NOTE - This is because the read command won't put a newline after it reads a character.
		
		# If they responded YES, then delete everything.  If NO, then we're done here.
		if [[ $REPLY =~ ^[Yy]$ ]]; then
			# Delete the appropriate component.
			rm -rf $TCPATH/src/$DEL

			# All done.
			echo -e "${CYAN}Deleted component $DEL.\n${NO_COLOUR}"
			break
		else
			# We're done here.
			break
		fi
	fi
done

# All done.
exit 0

