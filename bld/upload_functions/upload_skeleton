#!/usr/bin/env bash

#	Copyright (C) 2012 Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

###########################################################################################################################
###															###
### Name:		upload_skeleton											###
###															###
### Author:		Edwin Hayes											###
###															###
### Date Created:	19-03-2012											###
###															###
### Type:		Bash Script											###
###															###
### Purpose:		Provides a skeleton for referring to when creating upload functions.				###
###															###
###########################################################################################################################

# Indicate the file was imported successfully.
echo -e "${CYAN}Imported skeleton upload-functions.\n${NO_COLOUR}"

######################################## FUNCTION #########################################
###											###
### Name:		upload_skeleton							###
###											###
### Inputs/Outputs:	None								###
###											###
### Purpose:		Doesn't actually do anything, but shows the general format for	###
###			other upload functions.						###
###											###
###########################################################################################

upload_skeleton() 
{
	# TODO - Check that the expected binaries are available in the toolchain output folder.

	# TODO - Get any available information from the component configuration (which is already loaded at this point).

	# TODO - Get any available information from the build configuration for the component (which is already loaded at this point).

	# TODO - If the component configuration specified some details, confirm with the user that this is what they want to do.

	# TODO - Else, ask the user for any required information such as which node to upload to.

	# Set up the native compiler, if you need it.
	unpack_nativec

	# TODO - Set up any tools which are required for the upload.

	# TODO - Record what needs to be done to pack up anything that was unpacked.
	
	# Check if we should actually upload anything.
	if [ ! ${NO_UPLOAD} ]; then
		# Ask the user one more time if they are sure.
	
		# Actually upload the component to the selected target.
		echo -e "${BOLD_WHITE}Uploading files for component $COMPONENT to device DEVICENAME.\n${NO_COLOUR}"

		# TODO - Print a message indicating the details of what is happening, include something the identify what the target is.		
		
		# TODO - Upload the component to the target.

		# TODO - Print a message if the upload was successful.
	else
		# We aren't actually going to do the uploading part.
		echo -e "${BOLD_YELLOW}Skipping the actual upload, since 'no upload' option is set"
	fi

	# All done.
	return 0
}

