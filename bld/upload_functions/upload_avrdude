#!/usr/bin/env bash

#	Copyright (C) 2012 Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

###########################################################################################################################
###															###
### Name:		upload_avrdude											###
###															###
### Author:		Edwin Hayes											###
###															###
### Date Created:	19-03-2012											###
###															###
### Type:		Bash Script											###
###															###
### Purpose:		Provides functions for uploading code to AVR type targets via ISP using AVRDUDE.		###
###															###
###########################################################################################################################

# Indicate the file was imported successfully.
echo -e "${CYAN}Imported AVRDUDE based upload-functions.\n${NO_COLOUR}"

######################################## FUNCTION #########################################
###											###
### Name:		upload_avrdude							###
###											###
### Inputs/Outputs:	None								###
###											###
### Purpose:		Uploads AVR HEX files to a target connected to the host PC by	###
###			a compatible AVR ISP programmer, using AVRDUDE.			###
###											###
###########################################################################################

upload_avrdude() 
{
	# PRIVATE INTERNAL FUNCTIONS.
	
	upload_avrdude_finddevice_avrisp500()
	{
		# We look to see if there is anything that might be an AVR ISP500 available.
		echo -e "${CYAN}Searching for any available AVR-ISP500 programmers...${NO_COLOUR}"

		# Get a list of all the device files which look like they could be ISP500's.
		ISP_DEVICE_FILES=`ls /dev | grep "ttyACM"`

		# Check to see if we didn't find any suitable devices.
		if [ -z ${ISP_DEVICE_FILES} ]; then
			# We didn't find any, so abort.
			echo -e "${YELLOW}No suitable AVR-ISP500 devices found.\n${NO_COLOUR}"
			AVRDUDE_ISPDEVFILE=
			AVRDUDE_ISPDEVTYPE=

		# Check to see if we found exactly one suitable device.
		elif [ `echo ${ISP_DEVICE_FILES} | wc -l` == 1 ]; then
			# This might be an AVR ISP500, so we use that.
			echo -e "${CYAN}Found a device which might be an AVR ISP500.\n${NO_COLOUR}"
			AVRDUDE_ISPDEVFILE="/dev/${ISP_DEVICE_FILES}"
			AVRDUDE_ISPDEVTYPE="stk500v2"

		# Else, we found multiple possible files.
		else
			# Since we found multiple files, we'll use the last one plugged in.
			ISP_DEVICE_FILES=`dmesg | grep "cdc_acm" | grep -o "ttyACM[0123456789]*" | tail -n 1`
			echo -e "${CYAN}Found multiple devices which might be an AVR ISP500.  Using the last one plugged in.\n${NO_COLOUR}"
			AVRDUDE_ISPDEVFILE="/dev/${ISP_DEVICE_FILES}"
			AVRDUDE_ISPDEVTYPE="stk500v2"
		fi

		# All done.
		return			
	}

	upload_avrdude_finddevice_stk600()
	{
		# We look to see if there is anything that might be an STK600 available.
		echo -e "${CYAN}Searching for any available STK600 programmers...${NO_COLOUR}"

		# Check to see if there is an STK600 listed.
		if [[ -z `lsusb | grep "Atmel Corp. STK600 development board"` ]]; then
			# We didn't find an STK600 listed, so abort.
			echo -e "${YELLOW}No suitable STK600 device found.\n${NO_COLOUR}"
			AVRDUDE_ISPDEVFILE=
			AVRDUDE_ISPDEVTYPE=
		else
			# There is an STK600 connected, so we use that.
			echo -e "${CYAN}Found an STK600 connected via USB.\n${NO_COLOUR}"
			AVRDUDE_ISPDEVFILE="usb"
			AVRDUDE_ISPDEVTYPE="stk600"
		fi

		# All done.
		return			
	}

	# FUNCTION PROPER STARTS HERE.
	
	# DECLARE VARIABLES.
	
	AVRDUDE_CONFIG_FILE="$TCPATH/res/avr/avrdude.conf"
	
	# Check if we should be uploading a bootloader but aren't.
	if [ "$BOOTLOADER" -a -z "$UPLOAD_BOOTLOADER" ]; then
		#  Warn the user that this will erase any existing bootloader.
		echo -e "${YELLOW}Warning, not writing the bootloader with this upload method will result in erasing the bootloader in the device without replacing it.\n${NO_COLOUR}"
	fi

	# Check if we are supposed to be loading the application code.
	if [ $UPLOAD_APPLICATION ]; then
		# Check that the expected binary is available in the toolchain output folder.
		if [ ! -f "$TCPATH/bin/${COMPONENT}/${COMPONENT_NAME}.hex" ]; then
			# The expected binary file was not present.		
			echo -e "${RED}Could not find application binary for component $COMPONENT.  Aborting...\n${NO_COLOUR}"
			return 1
		fi
	fi

	# Check if we are supposed to be loading the bootloader code.
	if [ $UPLOAD_BOOTLOADER ]; then
		# Check that the expected binary is available in the toolchain output folder.
		if [ ! -f "$TCPATH/bin/${COMPONENT}/${COMPONENT_NAME}_bootloader.hex" ]; then
			# The expected binary file was not present.
			echo -e "${RED}Could not find bootloader binary for component $COMPONENT.  Aborting...\n${NO_COLOUR}"
			return 1
		fi
	fi

	# Unpack the AVR compiler, since we will need its binutils as well as AVRDUDE which we assume is part of the package.
	unpack_avrc

	# Sort out which file needs to be uploaded.
	if [ "${UPLOAD_APPLICATION}" -a "${UPLOAD_BOOTLOADER}" ]; then
		# Create a combined binary temporarily to upload.
		srec_cat "$TCPATH/bin/${COMPONENT}/${COMPONENT_NAME}.hex" -I "$TCPATH/bin/${COMPONENT}/${COMPONENT_NAME}_bootloader.hex" -I -o "$TCPATH/bin/${COMPONENT}/${COMPONENT_NAME}_combined.hex" -I

		# Set the file to flash to be the combined binary.
		AVRDUDE_BINARY="$TCPATH/bin/${COMPONENT}/${COMPONENT_NAME}_combined.hex"
	
	elif [ ${UPLOAD_BOOTLOADER} ]; then
		# Set the file to flash to be the bootloader binary.
		AVRDUDE_BINARY="$TCPATH/bin/${COMPONENT}/${COMPONENT_NAME}_bootloader.hex"

	else
		# Set the file to flash to be the application binary.
		AVRDUDE_BINARY="$TCPATH/bin/${COMPONENT}/${COMPONENT_NAME}.hex"
	fi

	# Figure out what the AVRDUDE 'part' setting should be.
	
	# Check if the component/build configuration set specified this.
	if [ ! -z ${AVRDUDE_PART} ]; then
		# The setting was specified.  Check if the user wants to use this.
		echo -e "${CYAN}The configuration for component $COMPONENT specifies the AVRDUDE 'part' setting should be '${AVRDUDE_PART}'.${NO_COLOUR}"
		echo -e -n "${GREEN}Do you wish to use this setting? (Y/N) ${NO_COLOUR}"
		read -n 1
		echo -e "\n" # NOTE - This is because the read command won't put a newline after it reads a character.
		
		# If they responded YES, then use the setting.  If NO, then we'll need to ask them what to use.
		if [[ ! $REPLY =~ ^[Yy]$ ]]; then
			# Don't use the setting specified in the component/build configuration set.
			AVRDUDE_PART=
		fi
	fi

	# Check if the AVRDUDE part setting has been chosen yet.
	if [ -z ${AVRDUDE_PART} ]; then
		# Since the user might be a moron and keep entering invalid names, we loop until a suitable name is entered.
		while :
		do
			# We will need to prompt the user for the value to use.
			echo -e -n "${GREEN}Enter the value to use for the AVRDUDE 'part' setting: ${NO_COLOUR}"
			read
			echo -e "" 

			# Check the user actually entered something.
			if [ -z "$REPLY" ]; then
				# We'll just prompt again.
				continue

			# Check if the user actually just wants to exit without uploading anything.
			elif [ "$REPLY" == "exit" ]; then
				# Exit the script.
				return 1
			fi

			# TODO - Eventually, it might be nice to check if the entered value is legit.
		
			# Else we use whatever they entered.
			AVRDUDE_PART=$REPLY
			break
		done
	fi

	# Figure out what the AVRDUDE 'programmer device' and 'programmer type' settings should be.

	# Check if the component/build configuration set specified the device file.
	if [[ ! -z ${AVRDUDE_ISPDEVFILE} && ! -z ${AVRDUDE_ISPDEVTYPE} ]]; then
		# The setting was specified.  Check if the user wants to use this.
		echo -e "${CYAN}The configuration for component $COMPONENT specifies using device ${AVRDUDE_ISPDEVFILE} as the programmer.${NO_COLOUR}"
		echo -e -n "${GREEN}Do you wish to use this device? (Y/N) ${NO_COLOUR}"
		read -n 1
		echo -e "\n" # NOTE - This is because the read command won't put a newline after it reads a character.
		
		# If they responded YES, then use the setting.  If NO, we'll need to try something else.
		if [[ ! $REPLY =~ ^[Yy]$ ]]; then
			# Don't use the device specified in the component/build configuration set.
			AVRDUDE_ISPDEVFILE=
		fi
	fi

	# Check to see if we can find a suitable device to use.
	if [ -z ${AVRDUDE_ISPDEVFILE} ]; then
		# Try looking for an STK600.
		upload_avrdude_finddevice_stk600
	fi
	if [ -z ${AVRDUDE_ISPDEVFILE} ]; then
		# Try looking for an AVR ISP500.
		upload_avrdude_finddevice_avrisp500
	fi
	# TODO - Look for other types of programmers.
	if [ ! -z ${AVRDUDE_ISPDEVFILE} ]; then
		# The setting was specified.  Check if the user wants to use this.
		echo -e "${CYAN}Found a programmer: device ${AVRDUDE_ISPDEVFILE} is a '${AVRDUDE_ISPDEVTYPE}' type programmer.${NO_COLOUR}"
		echo -e -n "${GREEN}Do you wish to use this device? (Y/N) ${NO_COLOUR}"
		read -n 1
		echo -e "\n" # NOTE - This is because the read command won't put a newline after it reads a character.
		
		# If they responded YES, then use the setting.  If NO, we'll need to try something else.
		if [[ ! $REPLY =~ ^[Yy]$ ]]; then
			# Don't use the device we found.
			AVRDUDE_ISPDEVFILE=
			AVRDUDE_ISPDEVTYPE=
		fi
	fi

	# Check if the programmer has been chosen yet.
	if [ -z ${AVRDUDE_ISPDEVFILE} ]; then
		# Since the user might be a moron and keep entering invalid names, we loop until a suitable name is entered.
		while :
		do
			# We will need to prompt the user for the value to use.
			echo -e -n "${GREEN}Enter the device file for the programmer AVRDUDE should use: ${NO_COLOUR}"
			read
			echo -e "" 

			# Check the user actually entered something.
			if [ -z "$REPLY" ]; then
				# We'll just prompt again.
				continue

			# Check if the user actually just wants to exit without uploading anything.
			elif [ "$REPLY" == "exit" ]; then
				# Exit the script.
				return 1
			fi

			# TODO - Eventually, it might be nice to check if the entered value is legit.
		
			# Else we use whatever they entered.
			AVRDUDE_ISPDEVFILE=$REPLY
			break
		done

		# Since the user might be a moron and keep entering invalid names, we loop until a suitable name is entered.
		while :
		do
			# We will need to prompt the user for the value to use.
			echo -e -n "${GREEN}Enter the programmer type of the programmer at '${AVRDUDE_ISPDEVFILE}': ${NO_COLOUR}"
			read
			echo -e "" 

			# Check the user actually entered something.
			if [ -z "$REPLY" ]; then
				# We'll just prompt again.
				continue

			# Check if the user actually just wants to exit without uploading anything.
			elif [ "$REPLY" == "exit" ]; then
				# Exit the script.
				return 1
			fi

			# TODO - Eventually, it might be nice to check if the entered value is legit.
		
			# Else we use whatever they entered.
			AVRDUDE_ISPDEVTYPE=$REPLY
			break
		done
	fi	

	# TODO - Else, ask the user for any required information such as which node to upload to.

	# We don't need to unpack any other tools.

	# We will need root privileges.  Warn the user in advance.
	echo -e "${YELLOW}Programming using ISP requires elevated privileges.  You will be prompted for a sudo capable password.\n${NO_COLOUR}"
	AVRDUDE_SUDO="sudo"
	# Do something trivial, so that we ask for their password in a tidy fashion.
	${AVRDUDE_SUDO} ls > /dev/null
	echo ""
	
	# Check if we are supposed to be uploading fuse settings.
	AVRDUDE_LOCK_BEFORE=
	AVRDUDE_LOCK_DURING=
	AVRDUDE_LOCK_AFTER=
	if [ ${UPLOAD_FUSES} ]; then
		# We are setting fuses, which means we also need to consider setting the lock byte.

		# Check what the current state of the lock byte is.
		echo -e "${CYAN}Reading lock byte from device at '${AVRDUDE_ISPDEVFILE}'...\n${NO_COLOUR}"
		AVRDUDE_LOCK_BEFORE=$(${AVRDUDE_SUDO} avrdude -C ${AVRDUDE_CONFIG_FILE} -p ${AVRDUDE_PART} -c ${AVRDUDE_ISPDEVTYPE} -P ${AVRDUDE_ISPDEVFILE} -q -q -U lock:r:-:h 2>/dev/null)
		# Check the return value from the read operation.
		if [ $? != 0 ]; then
			# Something went wrong.
			echo -e "${RED}Failed to read lock byte settings from device.\n${NO_COLOUR}"
		else
			# We've determined what the current lock settings are.
			echo -e "${CYAN}The current value of the device's lock byte is: ${NO_COLOUR}${AVRDUDE_LOCK_BEFORE}${CYAN}.\n${NO_COLOUR}"
		fi

		# Select the appropriate lock value to use during the write operation.
		if [ $UPLOAD_BOOTLOADER ]; then
			# Since we are trying to upload a bootloader, we want to suggest that the bootloader section be unlocked.
			echo -e "${CYAN}Since you are trying to upload a bootloader, you will need to ensure the device lock byte is set appropriately during the operation.${NO_COLOUR}"
			echo -e "${GREEN}The default value shown should unlock the bootloader section to allowing uploading.${NO_COLOUR}"
			AVRDUDE_LOCK_DURING=${AVRDUDE_UNLOCKED_BYTEVAL}
		else
			# Since we're not trying to upload a bootloader, lets suggest that the lock byte isn't changed during the write operation.
			echo -e "${CYAN}Since you are not trying to upload a bootloader, it is probably safe to leave the device lock byte unchanged during the uploading operation.${NO_COLOUR}"
			echo -e "${GREEN}To leave the byte unchanged, enter a blank value.${NO_COLOUR}"
			AVRDUDE_LOCK_DURING=
		fi
		# Since the user might be a moron, and keep entering invalid value, we loop until a suitable value is entered.
		while :
		do
			# We will need to prompt the user for the value to use.
			echo -e -n "${GREEN}Enter the value to set the lock byte to DURING the write operation as a hex number (e.g. 0x12):${NO_COLOUR}"
			read -r -e -i "${AVRDUDE_LOCK_DURING}" -p " "
			echo -e ""

			# Check if the user actually just wants to exit without uploading anything.
			if [ "$REPLY" == "exit" ]; then
				# Exit the script.
				return 1
			fi

			# TODO - Eventually, it might be nice to check if the entered value is legit.
		
			# Else we use whatever they entered.
			AVRDUDE_LOCK_DURING=$REPLY
			break
		done
	
		# Most likely, after the upload we'll want to set the lock byte back to how it was.
		echo -e "${CYAN}After the operation, it's most common to want to set the device lock byte back to whatever it was before uploading.${NO_COLOUR}"
		if [ -n "${AVRDUDE_LOCK_BEFORE}" ]; then
			# Since we read a value from the byte, we know what it was beforehand.
			echo -e "${GREEN}To leave the byte as it was before uploading, enter a blank value.${NO_COLOUR}"
			AVRDUDE_LOCK_AFTER=
		else
			# Since we didn't read a value from the byte, we don't know what it was beforehand.
			echo -e "${GREEN}To leave the byte as it was before uploading, enter a blank value.${NO_COLOUR}"
			AVRDUDE_LOCK_AFTER=
		fi
		# Since the user might be a moron, and keep entering invalid value, we loop until a suitable value is entered.
		while :
		do
			# We will need to prompt the user for the value to use.
			echo -e -n "${GREEN}Enter the value to set the lock byte to AFTER the write operation as a hex number (e.g. 0x12):${NO_COLOUR}"
			read -r -e -i "${AVRDUDE_LOCK_AFTER}" -p " "
			echo -e ""

			# Check if the user actually just wants to exit without uploading anything.
			if [ "$REPLY" == "exit" ]; then
				# Exit the script.
				return 1
			fi

			# TODO - Eventually, it might be nice to check if the entered value is legit.
		
			# Else we use whatever they entered.
			AVRDUDE_LOCK_AFTER=$REPLY
			break
		done
	fi

	# Check if we are supposed to be writing the fuse bits.
	AVRDUDE_WRITE_FUSES=
	AVRDUDE_VERIFY_FUSES=
	if [ $UPLOAD_FUSES ]; then
		# We are setting fuses.

		# Check if we have fuse bytes to program set by the configuration.
		
		CURRENT_LFUSE=$(${AVRDUDE_SUDO} avrdude -C ${AVRDUDE_CONFIG_FILE} -p ${AVRDUDE_PART} -c ${AVRDUDE_ISPDEVTYPE} -P ${AVRDUDE_ISPDEVFILE} -q -q -U lfuse:r:-:h 2>/dev/null)
		# Check the return value from the read operation.
		if [ $? != 0 ]; then
			# Something went wrong.
			READ_FUSES_FAILED=1
		fi
		CURRENT_HFUSE=$(${AVRDUDE_SUDO} avrdude -C ${AVRDUDE_CONFIG_FILE} -p ${AVRDUDE_PART} -c ${AVRDUDE_ISPDEVTYPE} -P ${AVRDUDE_ISPDEVFILE} -q -q -U hfuse:r:-:h 2>/dev/null)
		# Check the return value from the read operation.
		if [ $? != 0 ]; then
			# Something went wrong.
			READ_FUSES_FAILED=1
		fi
		CURRENT_EFUSE=$(${AVRDUDE_SUDO} avrdude -C ${AVRDUDE_CONFIG_FILE} -p ${AVRDUDE_PART} -c ${AVRDUDE_ISPDEVTYPE} -P ${AVRDUDE_ISPDEVFILE} -q -q -U efuse:r:-:h 2>/dev/null)
		# Check the return value from the read operation.
		if [ $? != 0 ]; then
			# Something went wrong.
			READ_FUSES_FAILED=1
		fi
		
		if [ ${READ_FUSES_FAILED} ]; then
			echo -e "${RED}Failed to read fuses from device.\n${NO_COLOUR}"
		else
			echo -e "${CYAN}Current fuse settings: ${NO_COLOUR}"
			echo -e "${CYAN} lfuse:${NO_COLOUR} $CURRENT_LFUSE"
			echo -e "${CYAN} hfuse:${NO_COLOUR} $CURRENT_HFUSE"
			echo -e "${CYAN} efuse:${NO_COLOUR} $CURRENT_EFUSE\n"
		fi
		
		# Check if the component/build configuration set specified the lfuse value.
		if [ ! -z ${AVRDUDE_LFUSE} ]; then
			# The setting was specified.  Check if the user wants to use this.
			echo -e "${CYAN}The configuration for component $COMPONENT specifies '${AVRDUDE_LFUSE}' as the lfuse value.${NO_COLOUR}"
			echo -e -n "${GREEN}Do you wish to use this setting? (Y/N) ${NO_COLOUR}"
			read -n 1
			echo -e "\n" # NOTE - This is because the read command won't put a newline after it reads a character.
			
			# If they responded YES, then use the setting.  If NO, then we'll need to ask them what to use.
			if [[ ! $REPLY =~ ^[Yy]$ ]]; then
				# Don't use the setting specified in the component/build configuration set.
				AVRDUDE_LFUSE=
			fi
		fi

		# Check if the lfuse byte has been chosen yet.
		if [ -z ${AVRDUDE_LFUSE} ]; then
			# Since the user might be a moron and keep entering invalid names, we loop until a suitable name is entered.
			while :
			do
				# We will need to prompt the user for the value to use.
				echo -e -n "${GREEN}Enter the value to use for the lfuse byte as a hex number (e.g. 0x12): ${NO_COLOUR}"
				read
				echo -e "" 

				# Check the user actually entered something.
				if [ -z "$REPLY" ]; then
					# We'll just prompt again.
					continue

				# Check if the user actually just wants to exit without uploading anything.
				elif [ "$REPLY" == "exit" ]; then
					# Exit the script.
					return 1
				fi

				# TODO - Eventually, it might be nice to check if the entered value is legit.
			
				# Else we use whatever they entered.
				AVRDUDE_LFUSE=$REPLY
				break
			done
		fi
		
		# Check if the component/build configuration set specified the hfuse value.
		if [ ! -z ${AVRDUDE_HFUSE} ]; then
			# The setting was specified.  Check if the user wants to use this.
			echo -e "${CYAN}The configuration for component $COMPONENT specifies '${AVRDUDE_HFUSE}' as the hfuse value.${NO_COLOUR}"
			echo -e -n "${GREEN}Do you wish to use this setting? (Y/N) ${NO_COLOUR}"
			read -n 1
			echo -e "\n" # NOTE - This is because the read command won't put a newline after it reads a character.
			
			# If they responded YES, then use the setting.  If NO, then we'll need to ask them what to use.
			if [[ ! $REPLY =~ ^[Yy]$ ]]; then
				# Don't use the setting specified in the component/build configuration set.
				AVRDUDE_HFUSE=
			fi
		fi

		# Check if the lfuse byte has been chosen yet.
		if [ -z ${AVRDUDE_HFUSE} ]; then
			# Since the user might be a moron and keep entering invalid names, we loop until a suitable name is entered.
			while :
			do
				# We will need to prompt the user for the value to use.
				echo -e -n "${GREEN}Enter the value to use for the hfuse byte as a hex number (e.g. 0x12): ${NO_COLOUR}"
				read
				echo -e "" 

				# Check the user actually entered something.
				if [ -z "$REPLY" ]; then
					# We'll just prompt again.
					continue

				# Check if the user actually just wants to exit without uploading anything.
				elif [ "$REPLY" == "exit" ]; then
					# Exit the script.
					return 1
				fi

				# TODO - Eventually, it might be nice to check if the entered value is legit.
			
				# Else we use whatever they entered.
				AVRDUDE_HFUSE=$REPLY
				break
			done
		fi
		
		# Check if the component/build configuration set specified the efuse value.
		if [ ! -z ${AVRDUDE_EFUSE} ]; then
			# The setting was specified.  Check if the user wants to use this.
			echo -e "${CYAN}The configuration for component $COMPONENT specifies '${AVRDUDE_EFUSE}' as the efuse value.${NO_COLOUR}"
			echo -e -n "${GREEN}Do you wish to use this setting? (Y/N) ${NO_COLOUR}"
			read -n 1
			echo -e "\n" # NOTE - This is because the read command won't put a newline after it reads a character.
			
			# If they responded YES, then use the setting.  If NO, then we'll need to ask them what to use.
			if [[ ! $REPLY =~ ^[Yy]$ ]]; then
				# Don't use the setting specified in the component/build configuration set.
				AVRDUDE_EFUSE=
			fi
		fi

		# Check if the lfuse byte has been chosen yet.
		if [ -z ${AVRDUDE_EFUSE} ]; then
			# Since the user might be a moron and keep entering invalid names, we loop until a suitable name is entered.
			while :
			do
				# We will need to prompt the user for the value to use.
				echo -e -n "${GREEN}Enter the value to use for the efuse byte as a hex number (e.g. 0x12): ${NO_COLOUR}"
				read
				echo -e "" 

				# Check the user actually entered something.
				if [ -z "$REPLY" ]; then
					# We'll just prompt again.
					continue

				# Check if the user actually just wants to exit without uploading anything.
				elif [ "$REPLY" == "exit" ]; then
					# Exit the script.
					return 1
				fi

				# TODO - Eventually, it might be nice to check if the entered value is legit.
			
				# Else we use whatever they entered.
				AVRDUDE_EFUSE=$REPLY
				break
			done
		fi
		
		# Print warnings to the user if they specify a fuse configuration which does not agree with the component bootloader configuration.
		if [ $BOOTLOADER ]; then
			if [ $(($AVRDUDE_HFUSE & 0x1 )) -eq 1 ]; then
				echo -e "${YELLOW}Warning: This component is configured to use a bootloader but the fuse to reset into the bootloader is not set!${NO_COLOUR}"
			fi
		else
			if [ $(($AVRDUDE_HFUSE & 0x1 )) -eq 0 ]; then
				echo -e "${YELLOW}Warning: This component is not configured with a bootloader but the fuse to reset into the bootloader is set!${NO_COLOUR}"
			fi
		fi
		
		AVRDUDE_WRITE_FUSES=" -U lfuse:w:"$AVRDUDE_LFUSE":m -U hfuse:w:"$AVRDUDE_HFUSE":m -U efuse:w:"$AVRDUDE_EFUSE":m"
		AVRDUDE_VERIFY_FUSES="-U lfuse:v:"$AVRDUDE_LFUSE":m -U hfuse:v:"$AVRDUDE_HFUSE":m -U efuse:v:"$AVRDUDE_EFUSE":m"
	fi

	# Ask the user if they are sure they want to do this.
	echo -e -n "${BOLD_GREEN}Are you sure you wish to upload component $COMPONENT via ISP device '${AVRDUDE_ISPDEVFILE}'? (Y/N) ${NO_COLOUR}"
	read -n 1
	echo -e "\n" # NOTE - This is because the read command won't put a newline after it reads a character.
		
	# If they responded YES, then upload the component.  If NO, then skip this component.
	if [[ ! $REPLY =~ ^[Yy]$ ]]; then
		# Abort the upload.
		echo -e "${YELLOW}Skipping upload of component $COMPONENT.\n${NO_COLOUR}"
	
	# Check if we should actually upload anything.
	elif [ ! ${NO_UPLOAD} ]; then
		# Actually upload the component to the selected target.
		echo -e "${CYAN}Uploading files for component $COMPONENT via AVR ISP.\n${NO_COLOUR}"

		# Check if we need to change the lock byte before the operation begins.
		if [ -n "${AVRDUDE_LOCK_DURING}" ]; then	
			# Set the lock byte to the 'during' value.
			${AVRDUDE_SUDO} avrdude -C ${AVRDUDE_CONFIG_FILE} -p ${AVRDUDE_PART} -c ${AVRDUDE_ISPDEVTYPE} -P ${AVRDUDE_ISPDEVFILE} -U lock:w:"${AVRDUDE_LOCK_DURING}":m
		fi

		# Upload the application code and fuse settings to flash.
		${AVRDUDE_SUDO} avrdude -C ${AVRDUDE_CONFIG_FILE} -p ${AVRDUDE_PART} -c ${AVRDUDE_ISPDEVTYPE} -P ${AVRDUDE_ISPDEVFILE} -U flash:w:"$AVRDUDE_BINARY":i $AVRDUDE_WRITE_FUSES

		# Check if we need to change the lock byte after the operation is done.
		if [ -n "${AVRDUDE_LOCK_AFTER}" ]; then
			# Set the lock byte to the 'after' value.
			${AVRDUDE_SUDO} avrdude -C ${AVRDUDE_CONFIG_FILE} -p ${AVRDUDE_PART} -c ${AVRDUDE_ISPDEVTYPE} -P ${AVRDUDE_ISPDEVFILE} -U lock:w:"${AVRDUDE_LOCK_AFTER}":m
		fi

		# Check the return value from the write operation.
		if [ $? != 0 ]; then
			# Something went wrong.
			echo -e "\n${RED}Uploading error.  Failed to write binary via ISP.\n${NO_COLOUR}"
			AVRDUDE_FAILED=1
	
		else
			# Verify the upload was successful.
			${AVRDUDE_SUDO} avrdude -C ${AVRDUDE_CONFIG_FILE} -p ${AVRDUDE_PART} -c ${AVRDUDE_ISPDEVTYPE} -P ${AVRDUDE_ISPDEVFILE} -U flash:v:"$AVRDUDE_BINARY":i $AVRDUDE_VERIFY_FUSES

			# Check the return value from the verify operation.
			if [ $? != 0 ]; then
				# Something went wrong.
				echo -e "\n${RED}Uploading error.  Failed to verify binary after writing.\n${NO_COLOUR}"
				AVRDUDE_FAILED=2
			else
				# Everything went fine.
				echo -e "${BOLD_WHITE}Uploading of component ${COMPONENT} completed successfully.\n${NO_COLOUR}"
			fi
		fi
	else
		# We aren't actually going to do the uploading part.
		echo -e "${BOLD_YELLOW}Skipping the actual upload, since 'no upload' option is set.\n${NO_COLOUR}"
	fi

	# Check if we need to get rid of any temporary files.
	if [ ! $RETAIN ]; then
		# Remove temporary files.
		echo -e "${CYAN}Removing temporary files from operation...\n${NO_COLOUR}"

		# Check if we created a combined binary which needs removing.
		if [ -a "$TCPATH/bin/${COMPONENT}/${COMPONENT_NAME}_combined.hex" ]; then
			# Delete the combined binary file that was created.
			rm "$TCPATH/bin/${COMPONENT}/${COMPONENT_NAME}_combined.hex"
		fi
	fi
	AVRDUDE_BINARY=
	AVRDUDE_SUDO=

	# All done.
	if [ ${AVRDUDE_FAILED} ]; then
		AVRDUDE_FAILED=
		return 1
	else
		return 0
	fi
}

