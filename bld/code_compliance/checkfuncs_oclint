#!/bin/bash

#	Copyright (C) 2011 Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

###########################################################################################################################
###
### Name:           	checkfuncs_oclint
###
### Author:         	Ravi Shankar
###
### Date Created:	13-01-2015
###
### Type:           	Bash Function Definitions
###
### Purpose:        	Implements code compliance tests: tests for rules present in OCLint tool.
###
###########################################################################################################################

######################################## FUNCTION ##################################################
###
### Name:		compliance_check_file_oclint
###
### Inputs/Outputs:	Path to the file to test.
###
### Purpose:		Tests a single C/CPP source file for rules present in OCLint.
###
####################################################################################################


compliance_check_file_oclint()
{
	# The file we're checking was the first argument we received.
	local FILE=$1

	# Pattern to match the output string of OCLint.
	pattern_oclint_output="(.*):([0-9]+):([0-9]+):(.*)"

	# Run "OCLint" with the given file and store the output string.
	output_string=$($TCPATH/res/vendor/oclint-0.8.1/bin/oclint -rc TOO_MANY_PARAMETERS=5 $FILE -- -w -Zs)

	# If we encounter something wrong, then we make a note that there is at least some kind of issue with the file as a whole.
	local CHECKS_OK=1

	while read line
	do
		if [[ $line == "Compiler Errors:" ]]; then
			# Report that the file has failed.			
			compliance_fail_file "compliance_check_file_oclint" $FILE "The file has compiler errors."
			return 1
		fi

		if [[ $line == \/* && $line =~ $pattern_oclint_output ]]; then
		
			# Store the line number from the matched pattern.
			LINE_NUM=${BASH_REMATCH[2]}

			# Store the error message from the matched pattern.
			ERROR=${BASH_REMATCH[4]}
			compliance_fail_line "compliance_check_file_oclint" $FILE $LINE_NUM "${ERROR//P[0-9]/.}"
			CHECKS_OK=
		fi
	done <<< "$output_string"
	
	if [ ! ${CHECKS_OK} ]; then
		# Report that the file has failed.
		compliance_fail_file "compliance_check_file_oclint" $FILE "This file contains non-compliant code."
	fi

	# All done.
	return 0
}

######################################## FUNCTION ##########################################################
###
### Name:		compliance_get_rules_oclint
###
### Inputs/Outputs:	None.
###
### Purpose:		Prints out a summary of the code compliance rules for the "oclint" test.
###
############################################################################################################

compliance_get_rules_oclint()
{
	echo "OCLint conventions:"
	echo "\tCode after 'return', 'break', 'continue', and 'throw' statements are unreachable and will never be executed.Hence, such code should be avoided."
	echo "\tUnder certain circumstances, some for loops can be simplified to while loops to make code more concise."
	echo "\t'goto' is considered harmful and should be avoided. "
	echo "\tMultiple unary operator can always be confusing and should be simplified."
	echo "\tReturning from a 'finally' block is not recommended."
	echo "\tThrowing exceptions within a 'finally' block may mask other exceptions or code defects."
	echo "\t"
	echo "\tIt is very confusing when default label is not the last label in a switch statement."
	echo "\tAn inverted logic is hard to understand."
	echo "\tJumbled incrementers are usually typos. If it’s done on purpose, it’s very confusing for code readers."
	echo "\tA switch statement without a break statement has a very large chance to contribute a bug."
	echo "\tIt is very confusing when default label is not the last label in a switch statement."
	echo "\tSwitch statements should a default statement."
	echo "\t"
	echo "\tEmpty 'catch' statements should not be present since something should be done if exceptions are caught."
	echo "\tEmpty 'do-while' statements should not be used."
	echo "\tEmpty 'else blocks' are a waste of space and can be safely removed."
	echo "\tEmpty 'finally', 'if', 'switch', 'try' statements should not be used."
	echo "\tEmpty 'for', 'while' loops should not be used."
	echo "\tVariables with long names harm readability."
	echo "\tUnnecessary 'if' statements should not be used."
	echo "\tRedundant conditional operators where true expression and false expression are returning true/false or false/true respectively should not be used."
	echo "\tRedundant conditional operators where true expression and false expression are the same constant should not be used."
	echo "\tRedundant conditional operators where true expression and false expression are the same variable expression should not be used."
	echo "\tA variable declaration immediately followed by the return of the same variable should not be done."
	echo "\tUseless parantheses such as in 'int y = (a + 1);' should be removed."
	echo "\t"
	echo "\tMethods with too many parameters are hard to understand and maintain, and are thirsty for refactorings, like Replace Parameter With method, Introduce Parameter Object, or Preserve Whole Object. The reporting threshold for too many parameters is 5(default value)."
	echo "\t"
	echo "\tUnused local variables should be removed."
	echo "\tUnused method parameters should be removed."
	echo ""
}

# ALL DONE.
