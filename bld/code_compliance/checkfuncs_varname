#!/bin/bash

#	Copyright (C) 2011 Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

###########################################################################################################################
###
### Name:           checkfuncs_varname
###
### Author:         Ravi Shankar
###
### Date Created:	19-12-2014
###
### Type:           Bash Function Definitions
###
### Purpose:        Implements code compliance tests: tests for variable name validity.
###
###########################################################################################################################

######################################## FUNCTION #########################################
###
### Name:		compliance_check_file_varname
###
### Inputs/Outputs:	Path to the file to test.
###
### Purpose:	Tests a single C/CPP source or header file for valid variable names.
###
###########################################################################################

compliance_check_file_varname()
{
	# The file we're checking was the first argument we received.
	local FILE=$1

	# Define internal functions.

	check_line()
	{
		#
		#	$1 The content of the line in question.
		#	$2 The line number we are up to.
		#

		# Regex pattern for finding variable declarations.
		pattern="([a-zA-Z0-9_* ])+[ 	]+[a-zA-Z0-9_]+[= a-zA-Z0-9_:&]*\[*[a-zA-Z0-9_]*\]*;[\n]*" 

		# Temp variable which should not be empty at the beginning.
		indiv_string="just text"

		if [[ $1 == "/"* || "$1" == "*"* || "$1" =~ "const" ]]; then			
			return 0

		elif [[ $1 =~ "," ]]; then
			strcount=0

			while [[ $indiv_string != "" ]];
			do
				strcount=$((strcount+1))
				indiv_string=`echo "$1" | cut -d ' ' -f $strcount`

				if [[ $indiv_string =~ "," || $indiv_string =~ ";" && ! $indiv_string =~ "(" ]]; then

					if [[ "$indiv_string" =~ [A-Z] ]]; then
						ERROR="$indiv_string -contains upper case characters."
						return 1
					fi
				fi
			done

		else
			if [[ $1 =~ $pattern && ! $1 =~ "return" ]]; then
				# Condition to check for variables with initialisation.
				if [[ $1 =~ \= ]]; then
						
					str_aft_space=${1#* } 		#To obtain the string after " " E.g. static int xyz = 9 --> int xyz = 9
					str_bef_eq=${str_aft_space%%=*} #To obtain the string before "=" sign E.g. int xyz = 9 --> int xyz
					str_varname=${str_bef_eq#* } 	#To obtain the string after " " E.g. int xyz --> xyz
						
					#Check if the string contains "::" characters. 	
					if [[ "$str_bef_eq" =~ "::" ]]; then
						varname=${str_bef_eq#*::}
										
						#Check if variable name contains uppercase or other special characters.	
						if [[ "$varname" =~ [A-Z] ]]; then
							ERROR="$varname --contains upper case characters."

							return 1
						fi
							
					else
						# This condition is when the string is like "int xyz = 8;"
				
						if [[ "$str_varname" == "" && "$str_bef_eq" =~ [A-Z] ]]; then
							ERROR="$str_bef_eq ---contains upper case characters."

							return 1
			
						# This condition is when the string is like "static int xyz = 8;"	
						elif [[ "$str_varname" != "" && "$str_varname" =~ [A-Z] && "$str_bef_eq" != "$str_varname" ]]; then
							ERROR="$str_varname ----contains upper case characters."

							return 1
						fi
					fi

				# Condition to check for variables without initialisation.
				else				
					#valcase='0-9a-z_ ;'
					str_bef_colon=${1%;*}
					str_aft_space=${str_bef_colon##* }
#					varname=${str_aft_space%;*}
							
					if [[ "$str_aft_space" =~ [A-Z] ]]; then
						ERROR="$str_aft_space -----contains upper case characters."

						return 1
					fi						
				fi
			fi
		fi
		
		# The line seems ok, so return zero.
		return 0
	}

	# Need to keep track of the line number we are up to.
	local LINE_NUM=

	# If we encounter something wrong, then we make a note that there is at least some kind of issue with the file as a whole.
	local CHECKS_OK=1

	# Initially, we are checking.
	local CHECKS_EN=1

	# Variable for counting the number of lines disabled.
	local DISABLED_LINE_COUNT=0

	# Iterate over each of the lines in the file.
	while read LINE
	do
		# Increment the line number.
  		((LINE_NUM++))

  		if [ ${CHECKS_EN} ]; then
  			# Check to see whether this line disables checking temporarily.
  			if [[ "$LINE" =~ "#pragma COMPL_DISAB_START" ]]; then
				
  				CHECKS_EN=
  				continue
  			fi

  			# Ok, so now we actually want to check this line for compliance.
			if ! check_line "$LINE" $LINE_NUM; then
				# Report the line has failed.
				
				compliance_fail_line "compliance_check_file_varname" $1 $LINE_NUM "Non-compliant variable name: $ERROR"
		
				# At least one thing is wrong in this file.
				CHECKS_OK=

			fi

  		else

			DISABLED_LINE_COUNT=$((DISABLED_LINE_COUNT+1))

  			# Checking is temporarily disabled, so all we do is see if this line enables them again.
  			if [[ "$LINE" =~ "#pragma COMPL_DISAB_END" ]]; then
  				# Enable checking again.
  				CHECKS_EN=1
  			fi
  		fi

	done < $FILE

	# Calculate the maximum number of lines which could sensibly have compliance disabled before we suspect something is amiss.
	local LINE_THRESH=$((LINE_NUM/10))
	
	# Check if the number of lines disabled is lesser than the threshold.
	if [ $DISABLED_LINE_COUNT -ge $LINE_THRESH ]; then
		compliance_fail_line "COMPLIANCE_EN_exception_limits" $1 -1 "A suspiciously high number of lines (${DISABLED_LINE_COUNT}) have compliance testing disabled."
		CHECKS_OK=
	fi   

	if [ ! ${CHECKS_OK} ]; then
		# Report that the file has failed.
		compliance_fail_file "compliance_check_file_varname" $1 "This file contains a non-compliant variable name."
	fi

	# All done.
	return 0
}

######################################## FUNCTION #########################################
###
### Name:		compliance_get_rules_varname
###
### Inputs/Outputs:	None.
###
### Purpose:	Prints out a summary of the code compliance rules for the varname test.
###
###########################################################################################

compliance_get_rules_varname()
{
	echo "varname:"
	echo "\tVariable names which contain upper case characters will fail."
	echo "\tThe check may be toggled on/off with \"#pragma COMPL_DISAB_START\" and \"#pragma COMPL_DISAB_END\"."
	echo ""
}

# ALL DONE.
