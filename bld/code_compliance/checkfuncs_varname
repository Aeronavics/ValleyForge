#!/bin/bash

#	Copyright (C) 2011 Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

###########################################################################################################################
###
### Name:           checkfuncs_varname
###
### Author:         Ravi Shankar
###
### Date Created:	19-12-2014
###
### Type:           Bash Function Definitions
###
### Purpose:        Implements code compliance tests: tests for variable name validity.
###
###########################################################################################################################

######################################## FUNCTION #########################################
###
### Name:		compliance_check_file_varname
###
### Inputs/Outputs:	Path to the file to test.
###
### Purpose:	Tests a single C/CPP source or header file for valid variable names.
###
###########################################################################################

compliance_check_file_varname()
{
	# The file we're checking was the first argument we received.
	local FILE=$1

	check_line()
	{
		#
		#	$1 The content of the line in question.
		#	$2 The line number we are up to.
		#

		# Pattern to match variable declarartions.
		pattern_declar="^([a-zA-Z0-9_*]+[ ]+)+([a-zA-Z0-9_]+[[a-zA-Z0-9_]*]*[, ]*)+[;]+" 

		#Pattern to match variable initialisations.
		pattern_init="^([a-zA-Z0-9_*]+[ ]+)+([a-zA-Z0-9_]+[[a-zA-Z0-9_]*]*[= ]+[a-zA-Z0-9_]+[, ]*)+[;]+" 

		#Pattern to match lines containing both variable declarations and initialisations.
		pattern_both="^([a-zA-Z0-9_*]+[ ]+)+([a-zA-Z0-9_]+[[a-zA-Z0-9_]*]*[= ]*[a-zA-Z0-9_]*[, ]*)+[;]+"

		#Pattern to match multiple pointer/reference types declared on a single line. 
		pattern_multiple_point_ref="^[a-zA-Z0-9_]+[ ]*[*&]+[ ]*[a-zA-Z0-9_]+,([ ]*[*&]+[ ]*[a-zA-Z0-9_]+)+;"

		#Patterns to check for declarations of variables of different types in the same line.
		pattern_mul_var="^([a-zA-Z0-9_]+[ ]*)+(,[ ]*[a-zA-Z0-9_]+)+;"
		pattern_mul_diff="([a-zA-Z0-9_]+[ ]*)+(,[ ]*[a-zA-Z0-9_]*[ ]*[a-zA-Z0-9_]+)+;"

		#temp variable which should not be empty at the beginning
		indiv_string="just text"

		#Condition to avoid comment lines and false positives with pattern similar to variable declarations and initialisations.
		if [[ $1 == "/"* || "$1" == "*"* || "$1" =~ "const" || "$1" =~ "return" || "$1" =~ "struct" || "$1" =~ "class" ]]; then			
			return 0

		#Condition to detect where a single line contains multiple reference/pointer type declarations.
		elif [[ $1 =~ $pattern_multiple_point_ref ]]; then
			ERROR="$1 contains multiple reference/pointer type declarations"		

			return 1

		#Condition to detect where a single line contains multiple reference/pointer type declarations.
		elif [[ ! $1 =~ $pattern_mul_var && $1 =~ $pattern_mul_diff ]]; then
			ERROR="$1 contains declarations of variables of different types"		

			return 1

		#Condition to detect where a single line contains both declarations and initialisations.
		elif [[ $1 =~ $pattern_both && ! $1 =~ $pattern_declar && ! $1 =~ $pattern_init ]]; then
			ERROR="$1 contains both variable declarations and initialisations"		

			return 1

		#Condition to match lines which have multiple variables e.g. int a, b, c; Also single variable declarations e.g. int a;
		elif [[ $1 =~ $pattern_declar ]]; then
			strcount=0

			#Loop to get the strings before actual variable name
			while [[ $indiv_string != "" ]];
			do
				strcount=$((strcount+1))
				indiv_string=`echo "$1" | cut -d ' ' -f $strcount`

				#If the string contains "," or ";", it is a variable name
				if [[ $indiv_string =~ "," || $indiv_string =~ ";" && ! $indiv_string =~ "(" ]]; then

					#Condition to check the presence of array variables.
					if [[ $indiv_string =~ "[" ]]; then
						indiv_string=${indiv_string%[*}
					fi

					#Condition to check for variable name's validity
					if [[ "$indiv_string" =~ [A-Z] ]]; then
						ERROR="$indiv_string contains upper case characters."

						return 1
					fi
				fi
			done

		#Condition to match lines with variable initialisation as in int a=90;
		elif [[ $1 =~ $pattern_init ]]; then 

			#Condition to check for initialisation of single variable.
			if [[ $1 =~ \= && ! $1 =~ "," ]]; then			
				indiv_string="adsasd"
				first_str=${1%=*}
				strcount=0
				
				#Loop to get the strings before actual variable name
				while [[ $indiv_string != "" ]];
				do
					strcount=$((strcount+1))
					indiv_string=`echo "$first_str" | cut -d ' ' -f $strcount`

					#Condition to obtain the required variable name
					if [[ $indiv_string != "" ]]; then
						req_str=$indiv_string
					fi
						
				done

				#Condition to check for variable name's validity
				if [[ "$req_str" =~ [A-Z] ]]; then
					ERROR="$req_str contains upper case characters."
					return 1
				fi

			#Condition to check for initialisation of multiple variables.
			elif [[ $1 =~ \= && $1 =~ "," ]]; then

				#temp variable which should not be empty at the beginning
				indiv_string1="just text"
				strcount1=0

				while [[ $indiv_string != "" ]];
				do
					strcount1=$((strcount1+1))
					indiv_string=`echo "$1" | cut -d ',' -f $strcount1`
						
					#Condition to match the first part of the string which is different from the rest. E.g. "static int a = 0", b = 10;
					if [[ $strcount1 == "1" ]]; then
						first_str=${indiv_string%=*}
						strcount=0
				
						while [[ $indiv_string1 != "" ]];
						do
							strcount=$((strcount+1))
							indiv_string1=`echo "$first_str" | cut -d ' ' -f $strcount`

							if [[ $indiv_string1 != "" ]]; then
								req_str=$indiv_string1
							fi
							
						done

						#Condition to check for variable name's validity
						if [[ "$req_str" =~ [A-Z] ]]; then
							ERROR="$req_str contains upper case characters."

							return 1
						fi

					#Condition to match the latter parts of the string which are similiar. E.g. static int a = 0, "temp = 90, temp2 = 8;"  
					else

						str_var=${indiv_string%=*}

						#Condition to check for variable name's validity
						if [[ "$str_var" =~ [A-Z] ]]; then
							ERROR="$str_var contains upper case characters."

							return 1
						fi
					fi	
				done				
			fi
		fi

		# The line seems ok, so return zero.
		return 0
	}

	# Need to keep track of the line number we are up to.
	local LINE_NUM=

	# If we encounter something wrong, then we make a note that there is at least some kind of issue with the file as a whole.
	local CHECKS_OK=1

	# Initially, we are checking.
	local CHECKS_EN=1

	#variable for counting the number of lines disabled.
	local DISABLED_LINE_COUNT=0

	while read LINE
	do
		# Increment the line number.
  		((LINE_NUM++))

  		if [ ${CHECKS_EN} ]; then
  			# Check to see whether this line disables checking temporarily.
  			if [[ "$LINE" =~ "#pragma COMPL_DISAB_START" ]]; then
				
  				CHECKS_EN=
  				continue
  			fi

  			# Ok, so now we actually want to check this line for compliance.
			if ! check_line "$LINE" $LINE_NUM; then
				# Report the line has failed.
				
				compliance_fail_line "compliance_check_file_varname" $1 $LINE_NUM "Non-compliant variable name: $ERROR"
		
				# At least one thing is wrong in this file.
				CHECKS_OK=

			fi

  		else

			DISABLED_LINE_COUNT=$((DISABLED_LINE_COUNT+1))

  			# Checking is temporarily disabled, so all we do is see if this line enables them again.
  			if [[ "$LINE" =~ "#pragma COMPL_DISAB_END" ]]; then
  				# Enable checking again.
  				CHECKS_EN=1
  			fi
  		fi

	done < $FILE


	# Calculate the maximum number of lines which could sensibly have compliance disabled before we suspect something is amiss.
	local LINE_THRESH=$((LINE_NUM/10))
	
	#Check if the number of lines disabled is lesser than the threshold
	if [ $DISABLED_LINE_COUNT -ge $LINE_THRESH ]; then
		compliance_fail_file "exception_limits" $1 "A suspiciously high number of lines '$DISABLED_LINE_COUNT' have compliance testing disabled."
	fi   

	if [ ! ${CHECKS_OK} ]; then
		# Report that the file has failed.
		compliance_fail_file "compliance_check_file_varname" $1 "This file contains non-compliant variable name(s)."
	fi

	# All done.
	return 0
}

######################################## FUNCTION #########################################
###
### Name:		compliance_get_rules_varname
###
### Inputs/Outputs:	None.
###
### Purpose:	Prints out a summary of the code compliance rules for the varname test.
###
###########################################################################################

compliance_get_rules_varname()
{
	echo "varname:"
	echo "\tVariable names which contain upper case characters will fail."
	echo "\tThe check may be toggled on/off with \"#pragma COMPL_DISAB_START\" and \"#pragma COMPL_DISAB_END\"."
	echo ""
}

# ALL DONE.
