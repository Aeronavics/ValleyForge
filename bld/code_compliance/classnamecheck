#!/bin/bash

##########################################################################################################################
#This script is for imposing naming conventions in all the files.
#It checks whether the class and structure names begin with an upper case letter followed by lower case letters.
#It also checks whether a template name consists of a single upper case letter.
#If the conditions fail, a warning message is displayed with the line of failure and the word that violates the standards.
##########################################################################################################################

# Determine what the absolute path to the root of the toolchain is.
SCRIPT=`readlink -f $0`
SCRIPTPATH=`dirname $SCRIPT`
TCPATH=$(echo $SCRIPTPATH | sed 's/\/bld.*//')

# Define the colours used for interface output.
source $TCPATH/bld/common/def_colours

echo -e "${RED}ERROR(S) IN CLASS/STRUCT/TEMPLATE NAMES in directory ${CYAN}$1\n${NO_COLOUR}"

#This for loop is responsible for looping through all files with required file formats (.c, .cpp, .h, .hpp, .pde) in the ValleyForge directory
for FILE in $(find $1 -name "*.cpp" -o -name "*.hpp" -o -name "*.c" -o -name "*.h" -o -name "*.pde"); do

#This variable stands for the line number.
	count=0

#These variables are for checking whether a condition has failed.
	classnamecheckfail=1
	structnamecheckfail=1
	templatenamecheckfail=1

#Read each line of the file
	while read line
	do
    		name=$line
    		count=$((count+1))

#This condition is used for ignoring code blocks
			if [[ "$name" =~ "// INDENT-OFF" ]]; then
				read line2
	    			count=$((count+1))
				name2=$line2
					while [[ "$name2" != "// INDENT-ON" ]] && read line3
					do
		    				count=$((count+1))
						name2=$line3
					done

#This condition is used for ignoring lines which include comments. 
			elif [[ "$name" =~ "*" || "$name" =~ "//" ]]; then
				#If it is a comment line, do nothing
				:

#This is the required part for checking the names of classes and structures
			else
				case "$name" in

				#check for class names whether they start with an upper case letter
					class*)
						value=${name#*class } #E.g. This line obtains "XYZ" from string "class XYZ"
						case ${value:0:1} in  #match with the first character
							[[:upper:]])
								#The class name is correct
 			        			        ;;
 			        			*)
								classnamecheckfail=0

 						                echo -e "${RED}WARNING: at line ${CYAN}$count${RED}: class name ${CYAN}$value ${RED}begins with lowercase letter ${NO_COLOUR}"
 						                ;;
						esac
						;;

					#check for structure names whether they start with an upper case letter. This case is for strings starting with "struct"
					struct*)
						value=${name#*struct }
						if [[ "$name" == "struct" ]]; then
							:
						else
							str=$(echo "${name: -1}") #getting the last character of the string
							if [[ "$str" == ";" ]]; then
								value2=$value
							else
								value2=$value
							fi

							case ${value2:0:1} in
								[[:upper:]])
									#The structure name is correct
 							                ;;
 							        *)
									structnamecheckfail=0
 							                echo -e "${RED}WARNING: At line ${CYAN}$count${RED}: Structure name ${CYAN}$value2 ${RED}begins with lowercase letter ${NO_COLOUR}"
 							                ;;
							esac
						fi
						;;

					#check for structure names whether they start with an upper case letter. This case is for strings starting with "XYZ struct"
					(*\ struct*)
						value=${name#*struct }
						if [[ "$value" == "$name" ]]; then
							read line2
				    			count=$((count+1))
							name2=$line2
								while [[ "$name2" != [}]* ]] && read line3 #loop until end of structure is reached
								do
		    							count=$((count+1))
									name2=$line3
								done
							value=${name2#*\}} #get the string after '}' character
							tempval=${value:0:1}
						
							if [[ "$tempval" == " " ]]; then #check if the obtained string contains spaces. Modify "value2" accordingly.
								value2=${value:1:2}							
							else							
								value2=${value:0:1}							
							fi						

							case ${value2:0:1} in
								[[:upper:]])
									#The structure name is correct
 							                ;;
 							        *)
									structnamecheckfail=0
 							                echo -e "${RED}WARNING: At line ${CYAN}$count${RED}: Structure name ${CYAN}$value2 ${RED}begins with lowercase letter${NO_COLOUR}"
 							                ;;
							esac
						else
						
						case ${value:0:1} in
							[[:upper:]])
								#The structure name is correct
 						                ;;
 						        *)
								structnamecheckfail=0
 						                echo -e "${RED}WARNING: At Line ${CYAN}$count${RED}: Structure name ${CYAN}$value ${RED}begins with lowercase letter${NO_COLOUR}"
 						                ;;
						esac
						fi
						;;

					#check for template names whether they have only a single uppercase letter
					template*) 		
						value=${name#*template<class }
						value1=${value%>*}
						size=${#value1}
							case ${value:0:1} in
								[[:upper:]])
										if [[ $size != 1 ]]; then
											templatechecknamefail=0
										fi
 							                ;;
 							        *)
									templatechecknamefail=0		        		
 			        				        ;;
							esac
							if [[ $templatechecknamefail == 0 ]]; then
								echo -e "${RED}WARNING: At line ${CYAN}$count${RED}: Template Name ${CYAN}$name ${RED}has more than single character${NO_COLOUR}"
							fi
						;;
				esac 
			fi
	done < $FILE

	#see if the file has any errors. Print an error message if it has any errors.
		if [[ $classnamecheckfail != 0 && $structnamecheckfail != 0 && $templatechecknamefail != 0 ]]; then
			:
		else
			
			echo -e "\n${YELLOW}WARNING: ${CYAN}$FILE ${YELLOW}has errors with class/structure/template names!${NO_COLOUR}"
			echo -e "${GREEN}--------------------------------------------------------------------------------\n\n${NO_COLOUR}"
			
		fi
done
echo -e "${BOLD_WHITE}${UNDERLINED}CLASS/STRUCT/TEMPLATE NAMING CONVENTIONS:${NO_COLOUR}"
echo -e "${GREEN}Class names should begin with an uppercase letter E.g. ${YELLOW}class Xyz ${GREEN} \nStructure names should also begin with uppercase letters E.g. ${YELLOW}struct int Temp${GREEN}\nTemplate Names should have only a single UPPERCASE LETTER E.g. ${YELLOW}template <class T>\n${NO_COLOUR}"
echo -e "${GREEN}--------------------------------------------------------------------------------${NO_COLOUR}"
echo -e "${GREEN}--------------------------------------------------------------------------------\n\n${NO_COLOUR}"

