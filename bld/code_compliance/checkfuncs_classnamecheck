#!/bin/bash

#	Copyright (C) 2011 Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

###########################################################################################################################
###
### Name:           	checkfuncs_classnamecheck
###
### Author:         	Ravi Shankar
###
### Date Created:	06-01-2015
###
### Type:           	Bash Function Definitions
###
### Purpose:        	Implements code compliance tests: tests for class and template name validity.
###
###########################################################################################################################

######################################## FUNCTION ####################################################
###
### Name:		compliance_check_file_classnamecheck
###
### Inputs/Outputs:	Path to the file to test.
###
### Purpose:		Tests a single C/CPP source or header file for valid class and template names.
###
######################################################################################################

compliance_check_file_classnamecheck()
{
	# The file we're checking was the first argument we received.
	local FILE=$1

	# Define internal functions.

	check_line()
	{
		#
		#	$1 - The content of the line in question.
		#	$2 - The line number we are up to.
		#

		# Regex pattern to match template names.
		pattern_template="(template)+[ ]*<[a-zA-Z0-9_]+ ([a-zA-Z0-9_]+)>"
	
		# Regex pattern to match class names.
		pattern_class="class ([A-Za-z0-9_]+)([ :a-zA-Z]*)"

		# Regex pattern to match lines containing enum.
		pattern_enum="enum[ 	]*[a-zA-Z_0-9]+[ 	]*\{(.*)\};"
	
		# Condition used for ignoring lines which include comments. 
		if [[ "$1" =~ ^/.*|^\*.* ]]; then

			# If it is a comment line, do nothing.
			return 0	

		# Condition to check for template names.
		elif [[ $1 =~ $pattern_template ]]; then
			
			str_template=${BASH_REMATCH[2]}
			size=${#str_template}

			# Condition to check whether template names have more than one character.
			if [[ $size != 1 ]]; then
				ERROR="'$str_template' has more than one uppercase letter."

				return 1
			fi

			# Condition to check whether template names contain lower case letters.
			if [[ $str_template =~ [a-z] ]]; then
				ERROR="'$str_template' contains lowercase letters."

				return 1
			fi	

		# Condition to check for class names.
		elif [[ $1 =~ $pattern_class ]]; then	
        		
			str_class=${BASH_REMATCH[1]}

			# Condition to check for lowercase letters.
			if [[ ${str_class:0:1} =~ [a-z] ]]; then
				ERROR="'$str_class' doesn't begin with an uppercase letter."

				return 1
			fi

		# Condition to check for enum labels.
		elif [[ $1 =~ $pattern_enum ]]; then
	
			str_enum_label=${BASH_REMATCH[1]}

			# Condition to check for lowercase letters in enum labels.
			if [[ $str_enum_label =~ [a-z] ]]; then
				ERROR="'$str_enum_label' contains lowercase letters."

				return 1

			fi
		fi
	
		# All done.
		return 0
	}

	check_declaration_order()
	{

		#
		#	$1 - The file we are checking.
		#

		local FILE=$1

		# Need to keep track of the line number we are up to.
		local LINE_NUM=
		
		# Pattern to match the beginning of a class declaration.
		pattern_class_start="class\s+([^\s]+)"

		# Pattern to match access modifier.
		pattern_access_mod="^[a-z]+:"

		# Read the contents of the file.
		while read LINE
		do
			# Increment the line number.
	  		((LINE_NUM++))

			# Counter for array used to store the declaration order.
			array_count=0

			# Empty the contents of the array.
			unset array

				# Condition to check if the line matches class pattern.
				if [[ $LINE =~ $pattern_class_start ]]; then

					# Read the next line to ensure that it is a class declaration.
					read LINE
					
					# Increment the line number.
			  		((LINE_NUM++))

					if [[ $LINE =~ "{" ]]; then

						# Continue reading inside the class declaration.
						while read LINE
						do
							# Increment the line number.
					  		((LINE_NUM++))

							# Store the access modifiers of the class in the array and increment the array counter.
							if [[ $LINE =~ $pattern_access_mod ]]; then
								array[$array_count]=${LINE%:*}
								array_count=$((array_count+1))
							fi
							
							# Check if the line denotes the end of class declaration.
							if [[ $LINE =~ "};" ]]; then

								# Sort the array contents in reverse order which is the required standard order.
								readarray -t sorted < <(for a in "${array[@]}"; do echo "$a"; done | sort -r)

								original_array=${array[@]}
								sorted_array=${sorted[@]}

								# Check if the original array and sorted array are equal. If not, display warning message.
								if [ "$original_array" != "$sorted_array" ]; then
									compliance_fail_line "compliance_check_file_classnamecheck" $FILE $LINE_NUM "Non-compliant class declaration order: The declaration order doesn't follow correct order."
									# At least one thing is wrong in this file.
									CHECKS_OK=
								fi
								
								# We have reached the end of the class declaration. So break the loop.
								break
							fi
						done
					fi
				fi
		done < $FILE

		# All done.
		return 0
	}

	# Need to keep track of the line number we are up to.
	local LINE_NUM=

	# If we encounter something wrong, then we make a note that there is at least some kind of issue with the file as a whole.
	local CHECKS_OK=1

	# Initially, we are checking.
	local CHECKS_EN=1

	# Calculate the maximum number of lines which could sensibly have compliance disabled before we suspect something is amiss.
	local DISABLED_LINE_COUNT=0

	while read LINE
	do
		# Increment the line number.
  		((LINE_NUM++))

  		if [ ${CHECKS_EN} ]; then
  			# Check to see whether this line disables checking temporarily.
  			if [[ "$LINE" =~ "#pragma COMPL_DISAB_START" ]]; then
				
  				CHECKS_EN=
  				continue
  			fi

  			# Ok, so now we actually want to check this line for compliance.
			if ! check_line "$LINE" $LINE_NUM; then
				# Report the line has failed.
				
				compliance_fail_line "compliance_check_file_classnamecheck" $1 $LINE_NUM "Non-compliant class/template/enum name: $ERROR"
		
				# At least one thing is wrong in this file.
				CHECKS_OK=

			fi

  		else

			DISABLED_LINE_COUNT=$((DISABLED_LINE_COUNT+1))

  			# Checking is temporarily disabled, so all we do is see if this line enables them again.
  			if [[ "$LINE" =~ "#pragma COMPL_DISAB_END" ]]; then
  				# Enable checking again.
  				CHECKS_EN=1
  			fi
  		fi

	done < $FILE

	# Call the function to check declaration order.
	check_declaration_order $FILE

	# Calculate the maximum number of lines which could sensibly have compliance disabled before we suspect something is amiss.
	local LINE_THRESH=$((LINE_NUM/10))
	
	# Check if the number of lines disabled is lesser than the threshold
	if [ $DISABLED_LINE_COUNT -ge $LINE_THRESH ]; then
		compliance_fail_file "exception_limits" $1 "A suspiciously high number of lines '$DISABLED_LINE_COUNT' have compliance testing disabled."
	fi   

	if [ ! ${CHECKS_OK} ]; then
		# Report that the file has failed.
		compliance_fail_file "compliance_check_file_classnamecheck" $1 "This file contains non-compliant class/template/enum name(s)."
	fi

	# All done.
	return 0
}

######################################## FUNCTION ####################################################
###
### Name:		compliance_get_rules_classnamecheck
###
### Inputs/Outputs:	None.
###
### Purpose:		Prints out a summary of the code compliance rules for the classnamecheck test.
###
######################################################################################################

compliance_get_rules_classnamecheck()
{
	echo "classnamecheck:"
	echo "\tClass names which begin with a lower case character will fail."
	echo "\tClasses which do not follow the proper declaration order of access modifiers will fail."
	echo "\tTemplate names which do not contain a single uppercase letter will fail."
	echo "\tEnum labels which contain lower case letters will fail."
	echo "\tThe check may be toggled on/off with \"#pragma COMPL_DISAB_START\" and \"#pragma COMPL_DISAB_END\"."
	echo ""
}

# ALL DONE.
