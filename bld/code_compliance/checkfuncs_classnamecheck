#!/bin/bash

#	Copyright (C) 2011 Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

###########################################################################################################################
###
### Name:           	checkfuncs_classnamecheck
###
### Author:         	Ravi Shankar
###
### Date Created:	06-01-2015
###
### Type:           	Bash Function Definitions
###
### Purpose:        	Implements code compliance tests: tests for class and template name validity.
###
###########################################################################################################################

######################################## FUNCTION ####################################################
###
### Name:		compliance_check_file_classnamecheck
###
### Inputs/Outputs:	Path to the file to test.
###
### Purpose:		Tests a single C/CPP source or header file for valid class and template names.
###
######################################################################################################

compliance_check_file_classnamecheck()
{
	# The file we're checking was the first argument we received.
	local FILE=$1

	# Regex pattern to match template names.
	pattern_template="(template)+[ ]*<[a-zA-Z0-9_]+ ([a-zA-Z0-9_]+)>"

	# Regex pattern to match class names.
	pattern_class="class ([A-Za-z0-9_]+)([ :a-zA-Z]*)"

	# Define internal functions.

	check_line()
	{
		#
		#	$1 - The content of the line in question.
		#	$2 - The line number we are up to.
		#
	
		# Condition used for ignoring lines which include comments. 
		if [[ "$1" =~ ^/.*|^\*.* ]]; then

			# If it is a comment line, do nothing.
			return 0	

		# Condition to check for template names.
		elif [[ $1 =~ $pattern_template ]]; then
			
			str_template=${BASH_REMATCH[2]}
			size=${#str_template}

			# Condition to check whether template names have more than one character.
			if [[ $size != 1 ]]; then
				ERROR="$str_template has more than one uppercase letter."

				return 1
			fi

			# Condition to check whether template names contain lower case letters.
			if [[ $str_template =~ [a-z] ]]; then
				ERROR="$str_template contains lowercase letters."

				return 1
			fi	

		# Condition to check for class names.
		elif [[ $1 =~ $pattern_class ]]; then	
        		
			str_class=${BASH_REMATCH[1]}

			# Condition to check for lowercase letters.
			if [[ ${str_class:0:1} =~ [a-z] ]]; then
				ERROR="$str_class doesn't begin with an uppercase letter....."

				return 1
			fi
				
		fi
	
		# All done.
		return 0
	}

	# Need to keep track of the line number we are up to.
	local LINE_NUM=

	# If we encounter something wrong, then we make a note that there is at least some kind of issue with the file as a whole.
	local CHECKS_OK=1

	# Initially, we are checking.
	local CHECKS_EN=1

	# Calculate the maximum number of lines which could sensibly have compliance disabled before we suspect something is amiss.
	local DISABLED_LINE_COUNT=0

	while read LINE
	do
		# Increment the line number.
  		((LINE_NUM++))

  		if [ ${CHECKS_EN} ]; then
  			# Check to see whether this line disables checking temporarily.
  			if [[ "$LINE" =~ "#pragma COMPL_DISAB_START" ]]; then
				
  				CHECKS_EN=
  				continue
  			fi

  			# Ok, so now we actually want to check this line for compliance.
			if ! check_line "$LINE" $LINE_NUM; then
				# Report the line has failed.
				
				compliance_fail_line "compliance_check_file_classnamecheck" $1 $LINE_NUM "Non-compliant class/template name: $ERROR"
		
				# At least one thing is wrong in this file.
				CHECKS_OK=

			fi

  		else

			DISABLED_LINE_COUNT=$((DISABLED_LINE_COUNT+1))

  			# Checking is temporarily disabled, so all we do is see if this line enables them again.
  			if [[ "$LINE" =~ "#pragma COMPL_DISAB_END" ]]; then
  				# Enable checking again.
  				CHECKS_EN=1
  			fi
  		fi

	done < $FILE

	# Calculate the maximum number of lines which could sensibly have compliance disabled before we suspect something is amiss.
	local LINE_THRESH=$((LINE_NUM/10))
	
	# Check if the number of lines disabled is lesser than the threshold
	if [ $DISABLED_LINE_COUNT -ge $LINE_THRESH ]; then
		compliance_fail_file "exception_limits" $1 "A suspiciously high number of lines '$DISABLED_LINE_COUNT' have compliance testing disabled."
	fi   

	if [ ! ${CHECKS_OK} ]; then
		# Report that the file has failed.
		compliance_fail_file "compliance_check_file_classnamecheck" $1 "This file contains non-compliant class/template name(s)."
	fi

	# All done.
	return 0
}

######################################## FUNCTION #########################################
###
### Name:		compliance_get_rules_classnamecheck
###
### Inputs/Outputs:	None.
###
### Purpose:	Prints out a summary of the code compliance rules for the classnamecheck test.
###
###########################################################################################

compliance_get_rules_classnamecheck()
{
	echo "classnamecheck:"
	echo "\tClass names which begin with a lower case character will fail. Template names which do not contain a single uppercase letter will fail."
	echo "\tThe check may be toggled on/off with \"#pragma COMPL_DISAB_START\" and \"#pragma COMPL_DISAB_END\"."
	echo ""
}

# ALL DONE.
