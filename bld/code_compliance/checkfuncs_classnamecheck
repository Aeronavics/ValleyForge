#!/bin/bash

#	Copyright (C) 2011 Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

###########################################################################################################################
###
### Name:           	checkfuncs_classnamecheck
###
### Author:         	Ravi Shankar
###
### Date Created:	06-01-2015
###
### Type:           	Bash Function Definitions
###
### Purpose:        	Implements code compliance tests: tests for class and template name validity.
###
###########################################################################################################################

######################################## FUNCTION ####################################################
###
### Name:		compliance_check_file_classnamecheck
###
### Inputs/Outputs:	Path to the file to test.
###
### Purpose:		Tests a single C/CPP source or header file for valid class and template names.
###
######################################################################################################

compliance_check_file_classnamecheck()
{
	# The file we're checking was the first argument we received.
	local FILE=$1

	# Define internal functions.

	check_line()
	{
		#
		#	$1 - The content of the line in question.
		#	$2 - The line number we are up to.
		#

		local current_line=$1

		# Regex pattern to match template names.
		pattern_template="(template)+[ ]*<[a-zA-Z0-9_]+ ([a-zA-Z0-9_]+)>"
	
		# Regex pattern to match class names.
		pattern_class="^[ \t]*class ([A-Za-z0-9_]+)([ :a-zA-Z]*)"
	
		# Condition used for ignoring lines which include comments. 
		if [[ "$current_line" =~ ^/.*|^\*.* ]]; then

			# If it is a comment line, do nothing.
			return 0	

		# Condition to check for template names.
		elif [[ $current_line =~ $pattern_template ]]; then
			
			name_template=${BASH_REMATCH[2]}
			template_size=${#name_template}

			# Condition to check whether template names have more than one character.
			if [[ $template_size != 1 ]]; then

				ERROR="'$name_template' has more than one uppercase letter."
				return 1
			fi

			# Condition to check whether template names contain lower case letters.
			if [[ $name_template =~ [a-z] ]]; then

				ERROR="'$name_template' contains lowercase letters."
				return 1
			fi	

		# Condition to check for class names.
		elif [[ $current_line =~ $pattern_class ]]; then	
        		
			name_class=${BASH_REMATCH[1]}

			# Condition to check for lowercase letters.
			if [[ ${name_class:0:1} =~ [a-z] ]]; then

				ERROR="'$name_class' doesn't begin with an uppercase letter."
				return 1
			fi
		fi
	
		# All done.
		return 0
	}

	# Function to check the declaration order of access modifiers in a class.
	check_declaration_order()
	{
		# Need to keep track of the line number we are up to.
		local LINE_NUM=
		
		# Initially, we are checking.
		local CHECKS_EN=1

		# Need to know if we're inside a block comment or not (initially, we're not).
		local INSIDE_BLOCK_COMMENT=

		# Need to know if we're inside a class/struct declaration or not (initially, we're not).
		local INSIDE_CLASS=
		local INSIDE_STRUCT=

		# But since class/struct definitions can have in inheritance lists, we also need to remember if we're inside one of these (initially we're not).
		local INSIDE_CLASS_OPENING=
		local INSIDE_STRUCT_OPENING=

		# Pattern to match comments.
		pattern_block_comment_start="^[[:space:]]*/[*]"
		pattern_block_comment_end="[*]/[[:space:]]*\$"
		pattern_line_comment="^[[:space:]]*//"

		# Pattern to match class declarations.
		pattern_class_start="^[[:space:]]*class[[:space:]]+([^[:space:]:;]+):?[[:space:]]*\$"
		pattern_class_opener="^[[:space:]]*[{]"
		pattern_class_end="^[[:space:]]*};"

		# Pattern to match struct declarations.
		pattern_struct_start="^[[:space:]]*struct[[:space:]]+([^[[:space:]]:;]+):?[[:space:]]*\$"
		pattern_struct_opener="^[[:space:]]*[{]"
		pattern_struct_end="^[[:space:]]*};"

		# Pattern to match access modifier.
		pattern_access_mod="^[[:space:]]*(public|protected|private):"

		# Read the contents of the file.
		while read LINE
		do
			# Increment the line number.
	  		((LINE_NUM++))

			if [ ${CHECKS_EN} ]; then
	  			# Check to see whether this line disables checking temporarily.
	  			if [[ "$LINE" =~ "#pragma COMPL_DISAB_START" ]]; then
					# Disable checking until further notice.
	  				CHECKS_EN=
	  				continue
	  			fi

	  			# Check to see whether this line begins a block comment.
	  			if [[ $LINE =~ $pattern_comment_start ]]; then
	  				if [ ! $INSIDE_BLOCK_COMMENT ]; then
	  					# Inside block comment.
	  					INSIDE_BLOCK_COMMENT=1
	  					continue
	  				fi
	  			fi

	  			# Check to see whether this line ends a block comment.
	  			if [[ $LINE =~ $pattern_comment_end ]]; then
	  				if [ $INSIDE_BLOCK_COMMENT ]; then
	  					# We're not inside the comment any more.
	  					INSIDE_BLOCK_COMMENT=
	  					continue
	  				fi
	  			fi

	  			# If we're in a block comment, no point checking any further.
	  			if [ ${INSIDE_BLOCK_COMMENT} ]; then
	  				# All of this line will be commented out.
	  				continue
	  			fi

	  			# Check if this line is commented out.
	  			if [[ $LINE =~ $pattern_line_comment ]]; then
	  				# We're on a line that is commented out.
	  				continue
	  			fi

	  			# TODO - This comment thing will fail dismally if there is a comment with /* */ on a single line.  Is there a rule to exclude this?

				# Check to see if this line begins a class opening.
				if [[ $LINE =~ $pattern_class_start ]]; then
					# Check we're not already inside a class declaration.
					if [ ${INSIDE_CLASS} ]; then
						# That's bad.
						compliance_fail_line "compliance_check_file_classnamecheck" $FILE $LINE_NUM "Class/struct declarations shouldn't be nested.  This will probably fail to compile."
						# At least one thing is wrong with this file.
						CHECKS_OK=
					fi

					# Check we're not already inside a class opening.
					if [ ${INSIDE_CLASS_OPENING} ]; then
						# That's bad.
						compliance_fail_line "compliance_check_file_classnamecheck" $FILE $LINE_NUM "Class/struct declarations shouldn't be nested.  This will probably fail to compile."
						# At least one thing is wrong with this file.
						CHECKS_OK=
					fi

					# Check we're not already inside a struct declaration.
					if [ ${INSIDE_STRUCT} ]; then
						# That's bad.
						compliance_fail_line "compliance_check_file_classnamecheck" $FILE $LINE_NUM "Class/struct declarations shouldn't be nested.  This will probably fail to compile."
						# At least one thing is wrong with this file.
						CHECKS_OK=
					fi

					# Check we're not already inside a struct opening.
					if [ ${INSIDE_STRUCT_OPENING} ]; then
						# That's bad.
						compliance_fail_line "compliance_check_file_classnamecheck" $FILE $LINE_NUM "Class/struct declarations shouldn't be nested.  This will probably fail to compile."
						# At least one thing is wrong with this file.
						CHECKS_OK=
					fi		

					# So, now we are inside a class opening, but now inside the actual class just yet.
					INSIDE_CLASS_OPENING=1
				fi

				# Check to see if this line begins a class declaration.
				if [[ $LINE =~ $pattern_class_opener ]]; then
					# If we're not actually in a class opener right now, this could be anything, so we just ignore it.
					if [ $INSIDE_CLASS_OPENING ]; then
						# Ok, so we were actually in a class opener, which means that now, we should be inside a class.
						INSIDE_CLASS_OPENING=
						INSIDE_CLASS=1

						# For each class, we put the access modifiers into an array in the order they appear.
						local ARRAY_ACCESS_MODIFIERS=()
					fi

				fi

				# Check to see if this line ends a class declaration.
				if [[ $LINE =~ $pattern_class_end ]]; then
					# Check if we know we're inside a class.
					if [ $INSIDE_CLASS ]; then
						# Check that there was at least one access modifier.
						if [ -z "${ARRAY_ACCESS_MODIFIERS[*]}" ]; then
							compliance_fail_line "compliance_check_file_classnamecheck" $FILE $LINE_NUM "Class should have at least one access modifier (public, protected or private)."
							# At least one thing is wrong with this file.
							CHECKS_OK=
						fi
						# We're not inside the class any more.
						ARRAY_ACCESS_MODIFIERS=
						INSIDE_CLASS=
					fi
				fi

				# Check to see if this line begins a struct opening.
				if [[ $LINE =~ $pattern_struct_start ]]; then
					# Check we're not already inside a class declaration.
					if [ ${INSIDE_CLASS} ]; then
						# That's bad.
						compliance_fail_line "compliance_check_file_classnamecheck" $FILE $LINE_NUM "Class/struct declarations shouldn't be nested.  This will probably fail to compile."
						# At least one thing is wrong with this file.
						CHECKS_OK=
					fi

					# Check we're not already inside a class opening.
					if [ ${INSIDE_CLASS_OPENING} ]; then
						# That's bad.
						compliance_fail_line "compliance_check_file_classnamecheck" $FILE $LINE_NUM "Class/struct declarations shouldn't be nested.  This will probably fail to compile."
						# At least one thing is wrong with this file.
						CHECKS_OK=
					fi

					# Check we're not already inside a struct declaration.
					if [ ${INSIDE_STRUCT} ]; then
						# That's bad.
						compliance_fail_line "compliance_check_file_classnamecheck" $FILE $LINE_NUM "Class/struct declarations shouldn't be nested.  This will probably fail to compile."
						# At least one thing is wrong with this file.
						CHECKS_OK=
					fi

					# Check we're not already inside a struct opening.
					if [ ${INSIDE_STRUCT_OPENING} ]; then
						# That's bad.
						compliance_fail_line "compliance_check_file_classnamecheck" $FILE $LINE_NUM "Class/struct declarations shouldn't be nested.  This will probably fail to compile."
						# At least one thing is wrong with this file.
						CHECKS_OK=
					fi

					# So, now we are inside a struct opening, but now inside the actual struct just yet.
					INSIDE_STRUCT_OPENING=1
				fi

				# Check to see if this line begins a struct declaration.
				if [[ $LINE =~ $pattern_struct_opener ]]; then
					# If we're not actually in a struct opener right now, this could be anything, so we just ignore it.
					if [ $INSIDE_STRUCT_OPENING ]; then
						# Ok, so we were actually in a struct opener, which means that now, we should be inside a struct.
						INSIDE_STRUCT_OPENING=
						INSIDE_STRUCT=1

						# For each class, we put the access modifiers into an array in the order they appear.
						local ARRAY_ACCESS_MODIFIERS=()
					fi
				fi

				# Check to see if this line ends a struct declaration.
				if [[ $LINE =~ $pattern_struct_end ]]; then
					# Check if we know we're inside a struct.
					if [ $INSIDE_STRUCT ]; then
						# We're not inside the struct any more.
						ARRAY_ACCESS_MODIFIERS=
						INSIDE_STRUCT=
					fi
				fi

				# Check to see if this line looks like an access modifier.
				if [[ $LINE =~ $pattern_access_mod ]]; then
					# Check if we're inside a class.
					if [ $INSIDE_CLASS ]; then
						# Append the access modifier to our array.
						ARRAY_ACCESS_MODIFIERS+=("${LINE%:*}")

						# Make a reverse sorted copy of the modifiers.  By conincidence, this is the order they SHOULD appear in.
						SORTED_ARRAY=
						readarray -t SORTED_ARRAY < <(for A in "${ARRAY_ACCESS_MODIFIERS[@]}"; do echo "$A"; done | sort -r)

						# Check if the original array matches the sorted version.
						if [ "${ARRAY_ACCESS_MODIFIERS[*]}" != "${SORTED_ARRAY[*]}" ]; then
							compliance_fail_line "compliance_check_file_classnamecheck" $FILE $LINE_NUM "Class access modifiers should be declared in order: public, protected, then private."
							# At least one thing is wrong with this file.
							CHECKS_OK=
						fi
					else
						# We've found an access modifier outside a class, which shouldn't happen.
						compliance_fail_line "compliance_check_file_classnamecheck" $FILE $LINE_NUM "Class access modifiers shouldn't be outside class declarations.  This will probably fail to compile."
						# At least one thing is wrong with this file.
						CHECKS_OK=						
					fi

					# Check if we're inside a struct.
					if [ $INSIDE_STRUCT ]; then
						# Structs shouldn't have access modifiers.
						compliance_fail_line "compliance_check_file_classnamecheck" $FILE $LINE_NUM "Structs should not have access modifiers."
						# At least one thing is wrong with this file.
						CHECKS_OK=						
					fi						

					# Else, we can just ignore this.
				fi
			fi
		done < $FILE

		# All done.
		return 0
	}

	# Need to keep track of the line number we are up to.
	local LINE_NUM=

	# If we encounter something wrong, then we make a note that there is at least some kind of issue with the file as a whole.
	local CHECKS_OK=1

	# Initially, we are checking.
	local CHECKS_EN=1

	# Calculate the maximum number of lines which could sensibly have compliance disabled before we suspect something is amiss.
	local DISABLED_LINE_COUNT=0

	# Variable used to denote whether the line is a comment or not. Initially we assume that the line is not a comment.
	local CHECKS_COMMENT=
	
	# Arrays used as flag to check whether an error has occurred in classes/enum in a specific line. 
	unset array_error_flag_class
	unset array_error_flag_enum

	# Regex Pattern to match multi line comment start.
	pattern_comment_start="^[ \t]*(\/\*)"

	# Regex Pattern to match multi line comment end.
	pattern_comment_end="(.*)(\*\/)"

	# Regex Pattern to match single line comment.
	pattern_comment_single="^[ \t]*(\/\*)(.*)(\*\/)"

	# Regex Pattern to match single line comment which appear after the statements Eg. int a; /* Used to declare a variable */
	pattern_comment_single_after_statement="(\/\*)(.*)(\*\/)"

	# Call the function to check declaration order.
	check_declaration_order $FILE

	# Iterate through each match of enum to check whether the name starts with an uppercase letter.
	for string in `$TCPATH/res/vendor/pcre-8.35/pcregrep -o1 -n -M '^[ \t]*enum[ 	]*([a-zA-Z_0-9]+)[ 	]*\n*\s*\{' $1`
	do
		enum_line_number=${string%:*}
		enum_name=${string#*:}

		# Condition to check for lowercase letters.				
		if [[ ${enum_name:0:1} =~ [a-z] ]]; then

			# Set the error flag.
			array_error_flag_enum[$enum_line_number]=$enum_name
		fi
	done

	while read LINE
	do
		# Increment the line number.
  		((LINE_NUM++))

  		if [ ${CHECKS_EN} ]; then

  			# Check to see whether this line disables checking temporarily.
  			if [[ "$LINE" =~ "#pragma COMPL_DISAB_START" ]]; then
				
  				CHECKS_EN=
  				continue
  			fi
			
			# Check whether the line is the start of a multi line comment. If yes, set 'CHECKS_COMMENT' flag and continue to the next line.
			if [[ "$LINE" =~ $pattern_comment_start && ! "$LINE" =~ $pattern_comment_single_after_statement ]]; then

				CHECKS_COMMENT=1
				continue
			fi

			# Check whether the line is the end of a multi line comment. If yes, unset 'CHECKS_COMMENT' flag and continue to the next line.
			if [[ "$LINE" =~ $pattern_comment_end && ! "$LINE" =~ $pattern_comment_single_after_statement ]]; then

				CHECKS_COMMENT=
				continue
			fi
			
			# Check whether the line is a single comment line. If yes, continue to the next line.
			if [[ "$LINE" =~ $pattern_comment_single ]]; then

				continue
			fi

			# Proceed checking for compliance only if the line is not a comment.
			if [[ ! ${CHECKS_COMMENT} ]]; then

  				# Ok, so now we actually want to check this line for compliance.
				if ! check_line "$LINE" $LINE_NUM; then

					# Report the line has failed.	
					compliance_fail_line "compliance_check_file_classnamecheck" $FILE $LINE_NUM "Non-compliant class/template name: $ERROR"
					# At least one thing is wrong in this file.
					CHECKS_OK=
				fi

				# Check if the line has any errors with the declaration order in classes.
				if [ ${array_error_flag_class[$LINE_NUM]} ]; then

					# Report the line has failed.
					compliance_fail_line "compliance_check_file_classnamecheck" $FILE $LINE_NUM "Non-compliant class declaration order: The declaration order doesn't follow correct order."
					# At least one thing is wrong in this file.
					CHECKS_OK=
				fi

				# Check if the line has any errors with enum names.
				if [ ${array_error_flag_enum[$LINE_NUM]} ]; then

					# Report the line has failed.
					compliance_fail_line "compliance_check_file_classnamecheck" $FILE $LINE_NUM "Non-compliant name: '${array_error_flag_enum[$LINE_NUM]}' starts with a lower case letter."
					# At least one thing is wrong in this file.
					CHECKS_OK=
				fi
			fi
  		else
			DISABLED_LINE_COUNT=$((DISABLED_LINE_COUNT+1))

  			# Checking is temporarily disabled, so all we do is see if this line enables them again.
  			if [[ "$LINE" =~ "#pragma COMPL_DISAB_END" ]]; then

  				# Enable checking again.
  				CHECKS_EN=1
  			fi
  		fi
	done < $FILE

	# Calculate the maximum number of lines which could sensibly have compliance disabled before we suspect something is amiss.
	local LINE_THRESH=$((LINE_NUM/10))
	
	# Check if the number of lines disabled is lesser than the threshold
	if [ $DISABLED_LINE_COUNT -ge $LINE_THRESH ]; then

		# Report that the file has failed.
		compliance_fail_file "exception_limits" $FILE "A suspiciously high number of lines '$DISABLED_LINE_COUNT' have compliance testing disabled."
	fi   

	if [ ! ${CHECKS_OK} ]; then

		# Report that the file has failed.
		compliance_fail_file "compliance_check_file_classnamecheck" $FILE "This file contains non-compliant class/template/enum name(s)."
	fi

	# All done.
	return 0
}

######################################## FUNCTION ####################################################
###
### Name:		compliance_get_rules_classnamecheck
###
### Inputs/Outputs:	None.
###
### Purpose:		Prints out a summary of the code compliance rules for the classnamecheck test.
###
######################################################################################################

compliance_get_rules_classnamecheck()
{
	echo "classnamecheck:"
	echo "\tClass names which begin with a lower case character will fail."
	echo "\tClasses which do not follow the proper declaration order of access modifiers(public, protected then public) will fail."
	echo "\tTemplate names which do not contain a single uppercase letter will fail."
	echo "\tEnum labels which contain lower case letters will fail."
	echo "\tThe check may be toggled on/off with \"#pragma COMPL_DISAB_START\" and \"#pragma COMPL_DISAB_END\"."
	echo ""
}

# ALL DONE.
