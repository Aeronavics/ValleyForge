#!/bin/bash

#	Copyright (C) 2011 Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

###########################################################################################################################
###
### Name:           checkfuncs_constname
###
### Author:         Ravi Shankar
###
### Date Created:	19-12-2014
###
### Type:           Bash Function Definitions
###
### Purpose:        Implements code compliance tests: tests for constant name validity.
###
###########################################################################################################################

######################################## FUNCTION #########################################
###
### Name:		compliance_check_file_constname
###
### Inputs/Outputs:	Path to the file to test.
###
### Purpose:	Tests a single C/CPP source or header file for valid constant names.
###
###########################################################################################

compliance_check_file_constname()
{
	# The file we're checking was the first argument we received.
	local FILE=$1

	# Define internal functions.

	check_line()
	{
		#
		#	$1 The content of the line in question.
		#	$2 The line number we are up to.
		#

		# TODO - What does this regex match?  And why nested like this?

		if [[ "$1" != *[\(\)]* ]]; then
			if [[ $1 != [*/]* ]]; then
				if [[ $1 == const* ]]; then

					# TODO - Fix this up, it's impossible to understand at the moment, with 'value', 'value2', 'value3' etc.

					# TODO - Also, at least one of these bits accidentally adds a space character to the variable name: "G" becomes "G ".

					value=${1#* } #retrieves "Uint16 MAX_NO = 16" from const Uint16 MAX_NO =16
					value1=${value#* } #retrieves "MAX_NO = 16" from Uint16 MAX_NO =16
					value2=${value1%=*} #retrieves "MAX_NO" from MAX_NO =16
					size=${#value2}

					if [[ "$value2" =~ [^A-Z_\ ] ]]; then
						ERROR="$value2 contains lower case characters."
						return 1
					fi
				fi
			fi
		fi

		# The line seems ok, so return zero.
		return 0
	}

	# Need to keep track of the line number we are up to.
	local LINE_NUM=

	# If we encounter something wrong, then we make a note that there is at least some kind of issue with the file as a whole.
	local CHECKS_OK=1

	# Initially, we are checking.
	local CHECKS_EN=1

	while read LINE
	do
		# Increment the line number.
  		((LINE_NUM++))

  		if [ ${CHECKS_EN} ]; then
  			# Check to see whether this line disables checking temporarily.
  			if [[ "$LINE" =~ "// INDENT-OFF" ]]; then
  				CHECKS_EN=
  				continue
  			fi

  			# Ok, so now we actually want to check this line for compliance.
			if ! check_line "$LINE" $LINE_NUM; then
				# Report the line has failed.
				compliance_fail_line "compliance_check_file_constname" $1 $LINE_NUM "Non-compliant constant name: $ERROR"

				# At least one thing is wrong in this file.
				CHECKS_OK=
			fi

  		else
  			# TODO - I think that we should count up the number of lines that are disabled, and maybe alarm if the number gets too high.

  			# TODO - And probably also report the number of disabled lines.

  			# TODO - Finally, this weird delimiter should be replaced with a pragma?

  			# Checking is temporarily disabled, so all we do is see if this line enables them again.
  			if [[ "$LINE" =~ "// INDENT-ON" ]]; then
  				# Enable checking again.
  				CHECKS_EN=1
  			fi
  		fi

	done < $FILE

	if [ ! ${CHECKS_OK} ]; then
		# Report that the file has failed.
		compliance_fail_file "compliance_check_file_constname" $1 "This file contains a non-compliant constant name."
	fi

	# All done.
	return 0
}

######################################## FUNCTION #########################################
###
### Name:		compliance_get_rules_constname
###
### Inputs/Outputs:	None.
###
### Purpose:	Prints out a summary of the code compliance rules for the constname test.
###
###########################################################################################

compliance_get_rules_constname()
{
	echo "constname:"
	echo "\tConstant names which contain lower case characters will fail."
	echo "\tThe check may be toggled on/off with \"// INDENT-ON\" and \"// INDENT-OFF\"."
	echo ""
}

# ALL DONE.