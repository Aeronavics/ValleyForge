#!/bin/bash

#	Copyright (C) 2011 Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

###########################################################################################################################
###
### Name:        	checkfuncs_comment
###
### Author:      	Ravi Shankar
###
### Date Created:	13-01-2015
###
### Type:        	Bash Function Definitions
###
### Purpose:        	Implements code compliance tests: tests for proper commenting conventions in files.
###
###########################################################################################################################

######################################## FUNCTION #########################################
###
### Name:		compliance_check_file_comment
###
### Inputs/Outputs:	Path to the file to test.
###
### Purpose:		Tests a single C/CPP source file for proper commenting conventions.
###
###########################################################################################

compliance_check_file_comment()
{
	# The file we're checking was the first argument we received.
	local FILE=$1

	# Arrays used as flags for reporting errors. 
	unset array_error_flag_c_multiline_comments 
	unset array_error_flag_cpp_multiline_comments 
	unset array_error_flag_c_single_line_comments

	# Define internal functions.

	check_line()
	{
		#
		#	$1 - The content of the line in question.
		#	

		# Pattern to check for TODO comments
		pattern_todo="^[ \t]*((\/\/)|(\*))[ \t]*[Tt][Oo][Dd][Oo][ -:]*(.*)" 
		pattern_todo_correct="TODO - (.*)"

		# Pattern to check for NOTE comments
		pattern_note="^[ \t]*((\/\/)|(\*))[ \t]*[Nn][Oo][Tt][Ee][ ]*[-:]+(.*)" 
		pattern_note_correct="NOTE - (.*)"

		if [[ $1 =~ $pattern_todo && ! $1 =~ $pattern_todo_correct ]]; then

			ERROR="This line doesn't follow proper syntax for TODO comments."
			return 1
		fi
	
		if [[ $1 =~ $pattern_note && ! $1 =~ $pattern_note_correct ]]; then

			ERROR="This line doesn't follow proper syntax for NOTE comments."
			return 1
		fi
	
		# All done.
		return 0	
	}

	# Function to check whether multi-line comments follow proper conventions.
	check_c_style_comments()
	{
		# Flag to denote whether lines in between the start and end of a multi line comment block follows conventions. Initially, we assume that it follows.
		local CHECKS_COMMENT_MIDDLE=1

		# Need to keep track of the line number we are up to.
		local LINE_NUM=

		# Pattern to match lines in between /* and */
		pattern_middle="^[\s\*](.*)"

		# Pattern to match multi line comment start.
		pattern_comment_start="^[ \t]*(\/\*)" 
	
		# Pattern to match multi line comment end.
		pattern_comment_end="(.*)(\*\/)"

		# Pattern to match single line comment which appear after the statements Eg. int a; /* Used to declare a variable */
		pattern_comment_single_after_statement="(\/\*)(.*)(\*\/)"

		while read LINE
		do
			# Increment the line number.
	  		((LINE_NUM++))

			CHECKS_COMMENT_MIDDLE=1

			# Check if the line is the start of a multi-line comment block.
			if [[ "$LINE" =~ $pattern_comment_start && ! "$LINE" =~ $pattern_comment_single_after_statement ]]; then

				# Store the starting line of the multi-line comment block to report if any error arises.
				LINE_NUM_COMMENT_BLOCK=$LINE_NUM

				while read LINE
				do
					# Increment the line number.
			  		((LINE_NUM++))

					# Break from the loop if the end of the comment block is found.
					if [[ "$LINE" =~ $pattern_comment_end && ! "$LINE" =~ $pattern_comment_single_after_statement ]]; then

						break
					fi

					# Check whether the lines in the comment block follow proper conventions.
					if [[ ! "$LINE" =~ $pattern_middle ]]; then
						
						# Report that the line doesn't follow conventions.
						CHECKS_COMMENT_MIDDLE=
					fi
				done
				
				# If the flag is not set,set the error flag to report that the comment block doesn't follow conventions.
				if [[ ! ${CHECKS_COMMENT_MIDDLE} ]]; then
	
					# Set the error flag.
					array_error_flag_c_multiline_comments[$LINE_NUM_COMMENT_BLOCK]=1				
				fi
			fi
		done < $FILE
		
		# All done.
		return 0
	}

	# Function to identify multi line comments which are in C++ style.
	check_multiline_cpp_comments()
	{
		# Save the default IFS to a temporary variable.
		SAVEIFS=$IFS
		# Modify the internal field separator to process each lines separately.
		IFS=$(echo -en "\n\b")

		# Condition to check if the file has multiple C++ comments.
		for string in `$TCPATH/res/vendor/pcre-8.35/pcregrep -M -n '([ \t]*\/\/(.*?)(\n[ \t]*((\/\/)(.*))+)+)' $FILE`
		do
			# Obtain the line number of the comment block.
			line_number_comment=${string%%:*}
	
			# If there are multi line C++ comments, set the error flag to report an error for the corresponding line.
			if [[ $line_number_comment == [0-9]* ]]; then

				# Set the error flag.
				array_error_flag_cpp_multiline_comments[$line_number_comment]=1
			fi
		done

		# Reset IFS to the default value.
		IFS=$SAVEIFS

		# All done.
		return 0
	}

	# Function to identify single line comments which are in C style. E.g. /* This is a comment. */
	check_single_line_c_comments()
	{
		# Save the default IFS to a temporary variable.
		SAVEIFS=$IFS
		# Modify the internal field separator to process each lines separately.
		IFS=$(echo -en "\n\b")

		#Condition to check if the file has single line C style comments.
		for string in `$TCPATH/res/vendor/pcre-8.35/pcregrep -M -n '(\/\*)+(.*)(\*\/)+' $FILE`
		do
			# Obtain the line number of the comment block.
			line_number_comment=${string%%:*}
	
			# If there are single line C style comments, set the error flag to report an error for the corresponding line.
			if [[ $string ]]; then

				# Set the error flag.
				array_error_flag_c_single_line_comments[$line_number_comment]=1 
			fi
		done

		# Reset IFS to the default value.
		IFS=$SAVEIFS

		# All done.
		return 0
	}

	# Function to check whether the file is empty. We consider lines which contain only whitespace characters[spaces,tab] also as empty.
	check_file_empty()
	{
		local flag_not_empty=
		pattern_empty_lines="(^$)|(^[ \t]*$)"

		# Loop through each line of the current file to check whether it contains any non-empty lines.
		while read line
		do
			# Check if the line is empty or contains just whitespaces.
			if [[ ! $line =~ $pattern_empty_lines ]]; then
				# Set the flag if the line contains any characters.
				flag_not_empty=1
			fi
		done < $FILE

		# Check the status of the flag and return corresponding value.
		if [[ ${flag_not_empty} ]]; then
			return 1
		else
			return 0
		fi
	}


	# Need to keep track of the line number we are up to.
	local LINE_NUM=

	# If we encounter something wrong, then we make a note that there is at least some kind of issue with the file as a whole.
	local CHECKS_OK=1

	# Initially, we are checking.
	local CHECKS_EN=1

	# Calculate the maximum number of lines which could sensibly have compliance disabled before we suspect something is amiss.
	local DISABLED_LINE_COUNT=0

	# Check for proper syntax of multiple C style comments.
	check_c_style_comments

	# Check for multi-line comments in C++ style.
	check_multiline_cpp_comments

	# Check for multi-line comments in C++ style.
	check_single_line_c_comments

	# Iterate over each of the lines in the file.
	while read LINE
	do
		# Increment the line number.
  		((LINE_NUM++))

  		if [ ${CHECKS_EN} ]; then

  			# Check to see whether this line disables checking temporarily.
  			if [[ "$LINE" =~ "#pragma COMPL_DISAB_START" ]]; then

  				CHECKS_EN=
  				continue
  			fi

  			# Ok, so now we actually want to check this line for compliance.
			if ! check_line "$LINE"; then

				# Report the line has failed.
				compliance_fail_line "compliance_check_file_comment" $FILE $LINE_NUM "Non-compliant comment: $ERROR"
				# At least one thing is wrong in this file.
				CHECKS_OK=
			fi

			# Check if there are multiline C comments.
			if [ ${array_error_flag_c_multiline_comments[$LINE_NUM]} ]; then

				# Report the line has failed.
				compliance_fail_line "compliance_check_file_comment" $FILE $LINE_NUM "Non-compliant comment block: Doesn't follow proper commenting standards."
				# At least one thing is wrong in this file.
				CHECKS_OK=
			fi

			# Check if there are multiline C++ comments.
			if [ ${array_error_flag_cpp_multiline_comments[$LINE_NUM]} ]; then
				
				# Report the line has failed.
				compliance_fail_line "compliance_check_file_comment" $FILE $LINE_NUM "Non-compliant comment block: Multi-line comments should not be in C++ style."
				# At least one thing is wrong in this file.
				CHECKS_OK=
			fi

			# Check if there are single line C comments.
			if [ ${array_error_flag_c_single_line_comments[$LINE_NUM]} ]; then

				# Report the line has failed.
				compliance_fail_line "compliance_check_file_comment" $FILE $LINE_NUM "Non-compliant comment: Single line C style comment is not allowed."
				# At least one thing is wrong in this file.
				CHECKS_OK=
			fi
  		else
			DISABLED_LINE_COUNT=$((DISABLED_LINE_COUNT+1))

  			# Checking is temporarily disabled, so all we do is see if this line enables them again.
  			if [[ "$LINE" =~ "#pragma COMPL_DISAB_END" ]]; then

  				# Enable checking again.
  				CHECKS_EN=1
  			fi
  		fi
	done < $FILE

	# Calculate the maximum number of lines which could sensibly have compliance disabled before we suspect something is amiss.
	local LINE_THRESH=$((LINE_NUM/10))

	if ! check_file_empty $FILE; then
		# Condition to check for copyrights information in the file.
		if ! grep -qi 'Copyright (C) [0-9]*[ ]*Unison Networks Ltd' $FILE; then

			# Report that the file has failed.
			compliance_fail_file "compliance_check_file_comment" $FILE "This file is missing Unison Copyrights header comment."
		fi

		# Check for comment block at the start of the file.
		if ! $TCPATH/res/vendor/pcre-8.35/pcregrep -q -M '\/(\*)*\n(\s)*\*(\s)*\*(\s)*FILE:(\s)*(.+)\n(\s)*\*(\s)*\*(\s)*(SUB-SYSTEM:(\s)*(.+)+\n(\s)*\*(\s)*\*(\s)*)*(COMPONENT:(\s)*(.+)\n(\s)*\*(\s)*\*(\s)*)*TARGET:(\s)*(.+)\n(\s)*\*(\s)*\*(\s)*(PLATFORM:(\s)*(.+)\n(\s)*\*(\s)*\*(\s)*)*AUTHOR:(\s)*(.+)\n(\s)*\*(\s)*\*(\s)*DATE CREATED:(\s)*(.+)\n(\s)*\*(\s)*(.*\n)*?(\*)*(\s)*(\*)*\/' $FILE; then
		
			# Report that the file has failed.		
			compliance_fail_file "compliance_check_file_comment" $FILE "This file is missing comment block at the beginning of file."
		fi
	fi

	# Check if the number of lines disabled is lesser than the threshold
	if [ $DISABLED_LINE_COUNT -gt $LINE_THRESH ]; then

		# Report that the file has failed.
		compliance_fail_file "exception_limits" $FILE "A suspiciously high number of lines '$DISABLED_LINE_COUNT' have compliance testing disabled."
	fi   

	if [ ! ${CHECKS_OK} ]; then

		# Report that the file has failed.
		compliance_fail_file "compliance_check_file_comment" $FILE "This file contains non-compliant comment(s)."
	fi

	# All done.
	return 0
}

# ALL DONE.
