#!/bin/bash

#	Copyright (C) 2011 Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

###########################################################################################################################
###
### Name:        	checkfuncs_comment
###
### Author:      	Ravi Shankar
###
### Date Created:	13-01-2015
###
### Type:        	Bash Function Definitions
###
### Purpose:        	Implements code compliance tests: tests for proper commenting conventions in files.
###
###########################################################################################################################

######################################## FUNCTION #########################################
###
### Name:		compliance_check_file_comment
###
### Inputs/Outputs:	Path to the file to test.
###
### Purpose:		Tests a single C/CPP source file for proper commenting conventions.
###
###########################################################################################

compliance_check_file_comment()
{
	# The file we're checking was the first argument we received.
	local FILE=$1

	# Define internal functions.

	check_line()
	{
		#
		#	$1 - The content of the line in question.
		#	

		# Pattern to check for TODO comments
		pattern_todo="[Tt][Oo][Dd][Oo][ -:]*(.*)"
		pattern_todo_correct="TODO - (.*)"

		# Pattern to check for NOTE comments
		pattern_note="[Nn][Oo][Tt][Ee][ ]*[-:]+(.*)"
		pattern_note_correct="NOTE - (.*)"

		if [[ $1 =~ $pattern_todo && ! $1 =~ $pattern_todo_correct ]]; then
			ERROR="This line doesn't follow proper syntax for TODO comments"
	
			return 1
		fi
	
		if [[ $1 =~ $pattern_note && ! $1 =~ $pattern_note_correct ]]; then
			ERROR="This line doesn't follow proper syntax for NOTE comments"
	
			return 1
		fi
	
		# All done.
		return 0	
	}

	# Need to keep track of the line number we are up to.
	local LINE_NUM=

	# If we encounter something wrong, then we make a note that there is at least some kind of issue with the file as a whole.
	local CHECKS_OK=1

	# Initially, we are checking.
	local CHECKS_EN=1

	# Calculate the maximum number of lines which could sensibly have compliance disabled before we suspect something is amiss.
	local DISABLED_LINE_COUNT=0

	# Iterate over each of the lines in the file.
	while read LINE
	do
		# Increment the line number.
  		((LINE_NUM++))

  		if [ ${CHECKS_EN} ]; then
  			# Check to see whether this line disables checking temporarily.
  			if [[ "$LINE" =~ "#pragma COMPL_DISAB_START" ]]; then

  				CHECKS_EN=
  				continue
  			fi

  			# Ok, so now we actually want to check this line for compliance.
			if ! check_line "$LINE"; then
				# Report the line has failed.
				compliance_fail_line "compliance_check_file_comment" $1 $LINE_NUM "Non-compliant comment: $ERROR"

				# At least one thing is wrong in this file.
				CHECKS_OK=
			fi
  		else
			DISABLED_LINE_COUNT=$((DISABLED_LINE_COUNT+1))

  			# Checking is temporarily disabled, so all we do is see if this line enables them again.
  			if [[ "$LINE" =~ "#pragma COMPL_DISAB_END" ]]; then

  				# Enable checking again.
  				CHECKS_EN=1
  			fi
  		fi

	done < $FILE

	# Calculate the maximum number of lines which could sensibly have compliance disabled before we suspect something is amiss.
	local LINE_THRESH=$((LINE_NUM/10))

	# Condition to check if the file has multiple C++ comments.
	if pcregrep -q -M '(\/\/+(.*))+(\n([\/\/]+(.*))+)+' $1; then
		compliance_fail_file "compliance_check_file_comment" $1 "This file has multiple single line C++ style comments."

		CHECKS_OK=
	fi

	# Condition to check if the file has single line C style("/* .... */") comments.
	if pcregrep -q -M '\/+\*+(.*)\*\/+' $1; then
		compliance_fail_file "compliance_check_file_comment" $1 "This file has single line C style comments."

		CHECKS_OK=
	fi

	# Check if the number of lines disabled is lesser than the threshold
	if [ $DISABLED_LINE_COUNT -ge $LINE_THRESH ]; then
		compliance_fail_file "exception_limits" $1 "A suspiciously high number of lines '$DISABLED_LINE_COUNT' have compliance testing disabled."
	fi   

	if [ ! ${CHECKS_OK} ]; then
		# Report that the file has failed.
		compliance_fail_file "compliance_check_file_comment" $1 "This file contains non-compliant comment(s)."
	fi

	# All done.
	return 0
}

######################################## FUNCTION #############################################
###
### Name:		compliance_get_rules_comment
###
### Inputs/Outputs:	None.
###
### Purpose:		Prints out a summary of the code compliance rules for the comment test.
###
###############################################################################################

compliance_get_rules_comment()
{
	echo "Commenting conventions:"
	echo "\tAll C++ anc C files should follow proper commenting conventions."
	echo "\tMultiple comment lines should be in C style(/* ... */) and single comment lines should be in C++ style(// ....)"
	echo "\tTODO comments should be in the syntax '// TODO - ...'"
	echo "\tNOTE comments should be in the syntax '// NOTE - ...'"
	echo ""
}

# ALL DONE.
