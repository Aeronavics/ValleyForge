#!/bin/bash

###########################################################################################################################
#This script is responsible for reading inputs from the configuration file and running corresponding scripts.
#If the value for an option is set to true, then the suitable script is run.
#If the user provides an invalid value for an option, an error message is displayed.
#Likewise, if an invalid option is provided, an error message is displayed.
###########################################################################################################################


SCRIPT=`readlink -f $0`
SCRIPTPATH=`dirname $SCRIPT`
TCPATH=$(echo $SCRIPTPATH | sed 's/\/bld.*//')
dir=$TCPATH/bld/code_compliance
status=0

# Define the colours used for interface output.
source $TCPATH/bld/common/def_colours

while read line2
do
name2=$line2
name2=${name2^^}
	if [[ $name2 =~ "=" && $name2 =~ "CODE_COMPLIANCE" ]]; then
		option2=${name2%=*}
		value2=${name2#*=}
		start2=${value2#*\'}
		end2=${start2%\'*}
		status=$end2
	elif [[ $name2 =~ "=" && $name2 =~ "OUTPUT" ]]; then
		option2=${name2%=*}
		value2=${name2#*=}
		start2=${value2#*\'}
		end2=${start2%\'*}
		output=$end2
	fi
done < $2

if [[ "$status" == "TRUE" ]]; then

	while read line
	do
	name=$line
	name=${name^^}

		if [[ $name =~ "=" ]]; then

			option=${name%=*}
			value=${name#*=}
			start=${value#*\'}
			end=${start%\'*}


			if [[ $output == "TEXTFILE" ]]; then
	
				if [[ "$end" == "TRUE" ]]; then
	
				case $option in
	
					VARIABLENAME*) 
							bash $dir/varname $1 > $dir/varnamelog.txt
							sed -r -i "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" $dir/varnamelog.txt 
							;;
	
					CLASSSTRUCTNAME*) 
							bash $dir/classnamecheck $1 > $dir/classnamechecklog.txt
							sed -r -i "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" $dir/classnamechecklog.txt 
							;;

					CONSTNAME*) 
							bash $dir/constcheck $1 > $dir/constchecklog.txt
							sed -r -i "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" $dir/constchecklog.txt
							;;

					FUNCNAME*) 
							bash $dir/funcnamecheck $1 > $dir/funcnamechecklog.txt
							sed -r -i "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" $dir/funcnamechecklog.txt				
							;;

					FILECOMPLETE*) 
							bash $dir/filecomplete $1 > $dir/filecompletelog.txt
							sed -r -i "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" $dir/filecompletelog.txt
							;;

					HEADERGUARD*) 
							bash $dir/headerguard $1 > $dir/headerguardlog.txt
							sed -r -i "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" $dir/headerguardlog.txt
							;;

					FILENAME*) 
							bash $dir/filenamesplchar $1 > $dir/filenamesplcharlog.txt
							sed -r -i "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" $dir/filenamesplcharlog.txt
							;;

					HEADERFILECHECK*) 
							bash $dir/headercheck $1 > $dir/headerchecklog.txt
							sed -r -i "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" $dir/filecompletelog.txt
							;;

					LAYOUT*) 
							bash $dir/layout $1 > $dir/layoutlog.txt
							sed -r -i "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" $dir/layoutlog.txt
							;;

					CODE_COMPLIANCE*)
							;;

					OUTPUT*)
							;;

					*) 
							echo -e "${RED}Invalid option for value ${CYAN}$end${NO_COLOUR}" ;;
	
				esac
				

				elif [[ "$end" == "FALSE" ]]; then
					:

				elif [[ "$end" == "TEXTFILE" || "$end" == "CONSOLE" ]]; then
					:

				else
					echo -e "${RED}Invalid value for option ${CYAN}$option${NO_COLOUR}"
				fi

			elif [[ $output == "CONSOLE" ]]; then

				if [[ "$end" == "TRUE" ]]; then
	
				case $option in
	
					VARIABLENAME*) 
							bash $dir/varname $1 ;;
					CLASSSTRUCTNAME*) 
							bash $dir/classnamecheck $1 ;;
					CONSTNAME*) 
							bash $dir/constcheck $1 ;;
					FUNCNAME*) 
							bash $dir/funcnamecheck $1 ;;
					FILECOMPLETE*) 
							bash $dir/filecomplete $1 ;;
					HEADERGUARD*) 
							bash $dir/headerguard $1 ;;
					FILENAME*) 
							bash $dir/filenamesplchar $1 ;;
					HEADERFILECHECK*) 
							bash $dir/headercheck $1 ;;
					LAYOUT*) 
							bash $dir/layout $1 ;;
					CODE_COMPLIANCE*)
							;;
					OUTPUT*)
							;;
					*) 
							echo -e "${RED}Invalid option $option for value ${CYAN}$end${NO_COLOUR}" ;;
	
				esac

				elif [[ "$end" == "FALSE" ]]; then
					:

				else
					echo -e "${RED}Invalid value for option ${CYAN}$option${NO_COLOUR}"
				fi

			elif [[ $output == "BOTH" ]]; then

				if [[ "$end" == "TRUE" ]]; then
	
				case $option in
	
					VARIABLENAME*) 
							bash $dir/varname $1 | tee $dir/varnamelog.txt ;;
					CLASSSTRUCTNAME*) 
							bash $dir/classnamecheck $1 | tee $dir/classnamechecklog.txt ;;
					CONSTNAME*) 
							bash $dir/constcheck $1 | tee $dir/constchecklog.txt ;;
					FUNCNAME*) 
							bash $dir/funcnamecheck $1 | tee $dir/funcnamechecklog.txt ;;
					FILECOMPLETE*) 
							bash $dir/filecomplete $1 | tee $dir/filecompletelog.txt ;;
					HEADERGUARD*) 
							bash $dir/headerguard $1 | tee $dir/headerguardlog.txt ;;
					FILENAME*) 
							bash $dir/filenamesplchar $1 | tee $dir/filenamesplcharlog.txt ;;
					HEADERFILECHECK*) 
							bash $dir/headercheck $1 | tee $dir/headerchecklog.txt ;;
					LAYOUT*) 
							bash $dir/layout $1 | tee $dir/layoutlog.txt ;;
					CODE_COMPLIANCE*)
							;;
					OUTPUT*)
							;;
					*) 
							echo -e "${RED}Invalid option $option for value ${CYAN}$end${NO_COLOUR}" ;;
	
				esac

				elif [[ "$end" == "FALSE" ]]; then
					:

				else
					echo -e "${RED}Invalid value for option ${CYAN}$option${NO_COLOUR}"
				fi
			fi
		fi
	done < $2
if [[ $output == "TEXTFILE" ]]; then
echo -e "\n${BOLD_GREEN}Code Compliance has been successfully completed and the output is stored as a text file in '/ValleyForge/bld/code_compliance/ directory'${NO_COLOUR}\n"
fi
if [[ $output == "CONSOLE" ]]; then
echo -e "\n${BOLD_GREEN}Code Compliance has been successfully completed and the output is printed in the console${NO_COLOUR}\n"
fi

fi	

# TODO - Just write to the correct location in the first place, would avoid the need to do this.

# Try to fix up the output files.
echo "VF Code Compliance Tests: $(date)" > $3
echo "" >> $3
cat $dir/varnamelog.txt >> $3 2> /dev/null
cat $dir/classnamechecklog.txt >> $3 2> /dev/null
cat $dir/constchecklog.txt >> $3 2> /dev/null
cat $dir/funcnamechecklog.txt >> $3 2> /dev/null
cat $dir/filecompletelog.txt >> $3 2> /dev/null
cat $dir/headerguardlog.txt >> $3 2> /dev/null
cat $dir/filenamesplcharlog.txt >> $3 2> /dev/null
cat $dir/headerchecklog.txt >> $3 2> /dev/null
cat $dir/layoutlog.txt >> $3 2> /dev/null
rm $dir/varnamelog.txt  2> /dev/null
rm $dir/classnamechecklog.txt 2> /dev/null
rm $dir/constchecklog.txt 2> /dev/null
rm $dir/funcnamechecklog.txt 2> /dev/null
rm $dir/filecompletelog.txt 2> /dev/null
rm $dir/headerguardlog.txt 2> /dev/null
rm $dir/filenamesplcharlog.txt 2> /dev/null
rm $dir/headerchecklog.txt 2> /dev/null
rm $dir/layoutlog.txt 2> /dev/null

exit 0
