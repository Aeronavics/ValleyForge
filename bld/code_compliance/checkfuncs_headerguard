#!/bin/bash

#	Copyright (C) 2011 Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

###########################################################################################################################
###
### Name:           	checkfuncs_headerguard
###
### Author:         	Ravi Shankar
###
### Date Created:	08-01-2015
###
### Type:           	Bash Function Definitions
###
### Purpose:        	Implements code compliance tests: tests for include guards in header files.
###
###########################################################################################################################

######################################## FUNCTION #########################################
###
### Name:		compliance_check_file_headerguard
###
### Inputs/Outputs:	Path to the file to test.
###
### Purpose:		Tests a single C/CPP header file for include guards.
###
###########################################################################################

compliance_check_file_headerguard()
{
	# The file we're checking was the first argument we received.
	local FILE=$1

	check_line()
	{
		#
		#	$1 - The content of the line in question.
		#	$2 - The line number we are up to.
		#

		# Pattern to match lines containing macro definitions.
		pattern_macro="(#[ \t]*define)+[ \t]*([a-zA-Z_0-9]+)[ \t]+(.*)"

		# Increment the counter for line numbers.
		if [[ ! "$1" =~ ^/.*|^\*.*|^\s*$ && $size != 1 ]]; then
			linecount=$((linecount+1))
			spl_line_count=$2

			# Obtain the line number where #endif occurs and increment the #endif counter.
			if [[ "$1" =~ "#endif" ]]; then
				endcount=$2
				# Variable to count the number of occurrences of #endif
				endif_count=$((endif_count+1))
			fi

			# Obtain the macro name and check if it contains any lowercase letters.					
			if [[ "$1" =~ $pattern_macro ]]; then
				macro_name=${BASH_REMATCH[2]}
				if [[ ${macro_name:0:1} =~ [a-z] ]]; then

					ERROR="At line $2: The macro name '$macro_name' starts with a lowercase letter."
					return 1
				fi
			fi					

			# Increment the #ifndef counter.
			if [[ "$1" =~ "#ifndef" || "$1" =~ "#if" ]]; then
				# Variable to count the number of occurrences of #ifndef or #if
				ifndef_count=$((ifndef_count+1))

				if [[ "$1" =~ "#ifndef" ]]; then
					macro_name=$(echo $1 | cut -d ' ' -f 2)

					# Check if the macro name is prefixed and suffixed with a pair of underscore characters.
					if [[ $macro_name != __* || $macro_name != *__ ]]; then

						ERROR="'$macro_name' is missing a pair of underscore characters in the prefix/suffix."
						return 1
					fi
				fi
			fi
		fi

		# All done.
		return 0
	}

	# Proceed only for header files.
	if [[ $FILE =~ ".hpp" || $FILE =~ ".h" ]]; then

		# Variable used to count the number of lines.
		linecount=0

		# Variable used to get the line number of last occurrence of #endif.
		endcount=0

		# Variable used to get the last line number of the file.
		spl_line_count=0

		# Variable used to count the occurrences of #endif.
		endif_count=0

		# Variable used to count the occurrences of #ifndef or #if.
		ifndef_count=0

		# Need to keep track of the line number we are up to.
		local LINE_NUM=

		# If we encounter something wrong, then we make a note that there is at least some kind of issue with the file as a whole.
		local CHECKS_OK=1

		# Initially, we are checking.
		local CHECKS_EN=1

		# Calculate the maximum number of lines which could sensibly have compliance disabled before we suspect something is amiss.
		local DISABLED_LINE_COUNT=0

		while read LINE
		do
			# Increment the line number.
  			((LINE_NUM++))

			size=${#LINE}

  			if [ ${CHECKS_EN} ]; then
  				# Check to see whether this line disables checking temporarily.
  				if [[ "$LINE" =~ "#pragma COMPL_DISAB_START" ]]; then
				
  					CHECKS_EN=
  					continue
  				fi

				# Ok, so now we actually want to check this line for compliance.
				if ! check_line "$LINE" $LINE_NUM; then

					# Report the line has failed.
					compliance_fail_line "compliance_check_file_headerguard" $FILE $LINE_NUM "Non-compliant macro name: $ERROR"
					CHECKS_OK=
				fi
  			else
				DISABLED_LINE_COUNT=$((DISABLED_LINE_COUNT+1))

  				# Checking is temporarily disabled, so all we do is see if this line enables them again.
  				if [[ "$LINE" =~ "#pragma COMPL_DISAB_END" ]]; then

  					# Enable checking again.
  					CHECKS_EN=1
  				fi
  			fi
		done < $FILE

		if [[ $linecount -gt 0 ]]; then

			# Check whether the last line of the header file is #endif. Also check whether the number of occurrences of #ifndef and #endif match. 
			if [[ "$spl_line_count" != "$endcount" ]]; then

				# Report that the file has failed.
				compliance_fail_file "compliance_check_file_headerguard" $FILE "Non-compliant header guard: The file doesn't have an include guard."
			fi

			if [[ "$ifndef_count" != "$endif_count" ]]; then

				# Report that the file has failed.
				compliance_fail_file "compliance_check_file_headerguard" $FILE "Non-compliant header guard: Incorrect/incomplete include guard."
			fi
		fi
		
		# Calculate the maximum number of lines which could sensibly have compliance disabled before we suspect something is amiss.
		local LINE_THRESH=$((LINE_NUM/10))
	
		# Check if the number of lines disabled is lesser than the threshold
		if [ $DISABLED_LINE_COUNT -ge $LINE_THRESH ]; then

			# Report that the file has failed.
			compliance_fail_file "exception_limits" $FILE "A suspiciously high number of lines '$DISABLED_LINE_COUNT' have compliance testing disabled."
		fi   

		if [ ! ${CHECKS_OK} ]; then

			# Report that the file has failed.
			compliance_fail_file "compliance_check_file_headerguard" $FILE "File has non-compliant headerguards/macros."
		fi
	fi

	# All done.
	return 0
}

######################################## FUNCTION #################################################
###
### Name:		compliance_get_rules_headerguard
###
### Inputs/Outputs:	None.
###
### Purpose:		Prints out a summary of the code compliance rules for the headerguard test.
###
###################################################################################################

compliance_get_rules_headerguard()
{
	echo "headerguard:"
	echo "\tAll C++ anc C header files should contain header guards."
	echo "\tThe name of the macro should be prefixed and suffixed with a pair of underscore characters."
	echo "\tMacro names should start with an uppercase letter."
	echo "\tThe check may be toggled on/off with \"#pragma COMPL_DISAB_START\" and \"#pragma COMPL_DISAB_END\"."
	echo ""
}

# ALL DONE.
