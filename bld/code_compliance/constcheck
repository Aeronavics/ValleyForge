#!/bin/bash


################################################################################################################
#This script is for imposing naming conventions for variables in all the files.
#It checks for the condition whether the constant names are all in UPPERCASE.
#If the condition fails, a warning message is displayed denoting the line of failur and the constant name.
################################################################################################################


# Determine what the absolute path to the root of the toolchain is.
SCRIPT=`readlink -f $0`
SCRIPTPATH=`dirname $SCRIPT`
TCPATH=$(echo $SCRIPTPATH | sed 's/\/bld.*//')

#This for loop is responsible for looping through all files with required file formats (.c, .cpp, .h, .hpp, .pde) in the ValleyForge directory
for FILE in $(find $TCPATH/ -name "*.cpp" -o -name "*.hpp" -o -name "*.c" -o -name "*.h" -o -name "*.pde"); do

#This variable stands for the line number.
	count=0
	
	constcheck=1

	while read line
	do
		name=$line
		count=$((count+1))
		#This condition is used for ignoring code blocks
		if [[ "$name" =~ "// INDENT-OFF" ]]; then
			read line2
	    		count=$((count+1))
			name2=$line2
				while [[ "$name2" != "// INDENT-ON" ]] && read line3
				do
					count=$((count+1))
					name2=$line3
				done
		else
			if [[ "$name" != *[\(\)]* ]]; then

				if [[ $name != [*/]* ]]; then

					if [[ $name == const* ]]; then
						value=${name#* } #retrieves "Uint16 MAX_NO = 16" from const Uint16 MAX_NO =16
						value1=${value#* } #retrieves "MAX_NO = 16" from Uint16 MAX_NO =16
						value2=${value1%=*} #retrieves "MAX_NO" from MAX_NO =16
						size=${#value2}

						if [[ "$value2" =~ [^A-Z_\ ] ]]; then

							echo "WARNING: At line $count - Constant name $value2 contains lower case letters"
							constcheck=0

						fi
					fi
				fi
			fi
		fi

	done < $FILE

	if [[ $constcheck == 0 ]]; then
		echo -e "\n------------------------------------------------------------------------------"
		echo "$FILE has errors!!!"
		echo -e "------------------------------------------------------------------------------\n"
	fi

done
