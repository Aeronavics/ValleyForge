#!/bin/bash
count=0
count2=0

# Determine what the absolute path to the root of the toolchain is.
SCRIPT=`readlink -f $0`
SCRIPTPATH=`dirname $SCRIPT`
TCPATH=$(echo $SCRIPTPATH | sed 's/\/bld.*//')
dir=$TCPATH/bld/code_compliance/config_files

# Define the colours used for interface output.
source $TCPATH/bld/common/def_colours

echo -e "${RED}LAYOUT CONVENTIONS ${CYAN}$1\n${NO_COLOUR}"

#Loop through each file with required extension in the specified directory. This loop is for advocating layout conventions in the code.
for FILE in $(find $1 -name "*.cpp" -o -name "*.hpp" -o -name "*.c" -o -name "*.h" -o -name "*.pde"); do

	uncrustify -c $dir/default.cfg -f $FILE -o $FILE
	sed -i 's/todo[ -: ]*/ TODO - /I' $FILE #working one
	sed -i 's/note[ -: ]*/ NOTE - /I' $FILE #working one

done

#Loop through each file with required extension in the specified directory. This loop is for handling line breaks and changing single line C style comments to C++ style comments.
for FILE in $(find $1 -name "*.cpp" -o -name "*.hpp" -o -name "*.c" -o -name "*.h" -o -name "*.pde"); do
	
	#Get the line numbers of string containing single line C comments
	for str_line in `pcregrep -n -M '/\*.*?\*/\n' $FILE | cut -d : -f 1`
	do

		string=$(awk 'NR == '"$str_line"' ' $FILE)
		if [[ $string =~ "\\" ]]; then
			#The line contains line breaks. Do nothing.
			:
		else
			#Replace C style comments with C++ style comments.
			sed -i ''"$str_line"'s:\(.*\)/[*]\(.*\)[*]/:\1 // \2:' $FILE
		fi
	done
	
	#Loop for adding newline before */ in order to maintain uniformity among comments.
	while read line
	do
		count2=$((count2+1))
		if [[ "$line" =~ "*/" && ! "$line" == "*/" ]]; then
			sed -i ''"$count2"'s:\*/:\n\*/:' $FILE
			
		fi
	done < $FILE

#The tool is used again in order to align newly added comment lines.
uncrustify -c $dir/default2.cfg -f $FILE -o $FILE
done

echo -e "\n${BOLD_YELLOW}$count ${BOLD_GREEN}files have been modified according to layout and commenting conventions.${NO_COLOUR}\n"
echo -e "${GREEN}--------------------------------------------------------------------------------${NO_COLOUR}"
echo -e "${GREEN}--------------------------------------------------------------------------------\n\n${NO_COLOUR}"



	#sed -i ':r s:\(.*\)/[*]\(.*\)[*]/\(.*\):\1\3 //\2:;tr;s://\(.*\)//\(.*\)://\2\1:;tr' $FILE #latest working one
	#sed -i 's:\(.*\)/[*]\(.*\)[*]/:\1 // \2:' $FILE #used for replacing single line /*..*/ comments to //
	#sed -i 's:(.*)/[*](.*)[*]/:\1 // \2:' $FILE #used for replacing single line /*..*/ comments to //
	#sed -i 's/todo  / TODO -/I' $FILE #used for replacing case insensitive todo with TODO
	#sed -i 's/note/ NOTE -/I' $FILE #used for replacing case insensitive note with NOTE
