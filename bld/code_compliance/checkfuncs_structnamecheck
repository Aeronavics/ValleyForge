#!/bin/bash

#	Copyright (C) 2011 Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

###########################################################################################################################
###
### Name:           	checkfuncs_structnamecheck
###
### Author:         	Ravi Shankar
###
### Date Created:	12-01-2015
###
### Type:           	Bash Function Definitions
###
### Purpose:        	Implements code compliance tests: tests for structure name validity.
###
###########################################################################################################################

######################################## FUNCTION #############################################
###
### Name:		compliance_check_file_structnamecheck
###
### Inputs/Outputs:	Path to the file to test.
###
### Purpose:		Tests a single C/CPP source or header file for valid structure names.
###
###############################################################################################

compliance_check_file_structnamecheck()
{
	# The file we're checking was the first argument we received.
	local FILE=$1

	# If we encounter something wrong, then we make a note that there is at least some kind of issue with the file as a whole.
	local CHECKS_OK=1

	# Function for checking whether access modifiers are declared inside structures.
	check_access_modifier()
	{
		#
		#	$1 - The file we are checking.
		#

		# Need to keep track of the line number we are up to.
		local LINE_NUM=
		
		# Pattern to match the beginning of a struct declaration.
		pattern_struct_start="struct(.*)"

		# Pattern to match access modifier.
		pattern_access_mod="^(\s)*(public|protected|private):"

		# Pattern to match end of structure.
		pattern_struct_end="^(\s)*}(.*);"

		# Read the contents of the file.
		while read LINE
		do
			# Increment the line number.
	  		((LINE_NUM++))

				# Condition to check if the line matches struct pattern.
				if [[ $LINE =~ $pattern_struct_start ]]; then

					# Read the next line to ensure that it is a struct declaration.
					read LINE
					
					# Increment the line number.
			  		((LINE_NUM++))

					if [[ $LINE =~ "{" ]]; then

						# Continue reading inside the struct declaration.
						while read LINE
						do
							# Increment the line number.
					  		((LINE_NUM++))

							# Display message if any access modifiers are found in the structure.
							if [[ $LINE =~ $pattern_access_mod ]]; then
								compliance_fail_line "compliance_check_file_structnamecheck" $1 $LINE_NUM "Non-compliant structure name: Access modifiers are declared within a structure."
								CHECKS_OK=
							fi
							
							# Check if the line denotes the end of struct declaration.
							if [[ $LINE =~ $pattern_struct_end ]]; then
								
								# We have reached the end of the structure declaration. So break the loop.
								break
							fi
						done
					fi
				fi
		done < $1

		# All done.
		return 0
	}

	# Call function to check for access modifiers.
	check_access_modifier $FILE

	# Condition for checking structure names that come in the format "struct { ..... } XYZ;"
	for struct_name in `pcregrep -o1 -M 'struct[ ]*[\n]*{[\S \n]+?[}]+[ ]*([a-zA-Z0-9_]+);' $FILE`
	do
		if [[ ${struct_name:0:1} =~ [a-z] ]]; then

			line_number_struct=$(grep -n "}[ ]*$struct_name" $FILE | cut -d : -f 1)				
			compliance_fail_line "compliance_check_file_structnamecheck" $FILE $line_number_struct "Non-compliant structure name: '$struct_name' starts with a lower case letter"
			CHECKS_OK=
		fi
	done

	# Condition for checking structure names that come in the format "struct XYZ { ..... };"
	for str_line in `grep -n -E 'struct ([a-zA-Z0-9_]*[ ])*([a-zA-Z0-9_]+)' $FILE | cut -d : -f 1`
	do
		struct_name="${BASH_REMATCH[2]}"
		if [[ ${struct_name:0:1} =~ [a-z] ]]; then

			compliance_fail_line "compliance_check_file_structnamecheck" $FILE $str_line "Non-compliant structure name: '$struct_name' starts with a lower case letter"
			CHECKS_OK=
		fi
	done

	if [ ! ${CHECKS_OK} ]; then

		# Report that the file has failed.
		compliance_fail_file "compliance_check_file_structnamecheck" $1 "This file contains non-compliant structure name(s)."
	fi

	# All done.
	return 0
}

######################################## FUNCTION #####################################################
###
### Name:		compliance_get_rules_structnamecheck
###
### Inputs/Outputs:	None.
###
### Purpose:		Prints out a summary of the code compliance rules for the structnamecheck test.
###
#######################################################################################################

compliance_get_rules_structnamecheck()
{
	echo "structnamecheck:"
	echo "\tStructure names which begin with a lower case character will fail."
	echo "\tStructures which contain access modifiers such as public, protected or private will fail."
	echo ""
}

# ALL DONE.
