#!/bin/bash

#	Copyright (C) 2011 Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

###########################################################################################################################
###
### Name:           	checkfuncs_structnamecheck
###
### Author:         	Ravi Shankar
###
### Date Created:	12-01-2015
###
### Type:           	Bash Function Definitions
###
### Purpose:        	Implements code compliance tests: tests for structure name validity.
###
###########################################################################################################################

######################################## FUNCTION #############################################
###
### Name:		compliance_check_file_structnamecheck
###
### Inputs/Outputs:	Path to the file to test.
###
### Purpose:		Tests a single C/CPP source or header file for valid structure names.
###
###############################################################################################

compliance_check_file_structnamecheck()
{
	# The file we're checking was the first argument we received.
	local FILE=$1

	# Arrays which are used as flags to denote if any error occurs.
	unset array_error_flag_struct_name
	unset array_error_flag_access_mod

	check_line()
	{
		#
		#	$1 - The content of the line in question.
		#

		# Pattern to match one line structure declarations.
		pattern_struct_declar="^[ \t]*struct ([a-zA-Z_]+) (.*);"

		# Condition to check for one line struct declarations.
		if [[ $LINE =~ $pattern_struct_declar ]]; then
			struct_name=${BASH_REMATCH[1]}
				
			# Check whether the structure name starts with lower case letter.	
			if [[ ${struct_name:0:1} =~ [a-z] ]]; then

				# Report the line has failed.
				ERROR="$struct_name starts with a lowercase letter."
				return 1
			fi
		fi
							
		# All done.
		return 0
	}

	check_struct_name()
	{
		# Iterate through each match of structure name to check for compliance.
		for string in `$TCPATH/res/vendor/pcre-8.35/pcregrep -n -o4 -o7 -o12 -M '(struct[ ]*[\n]*{(\n(.*?))+[}]+[ ]*([a-zA-Z0-9_]+);)|(struct ([a-zA-Z0-9_]*[ ])*([a-zA-Z0-9_]+)\s*\n*{)|(typedef struct[ ]*([a-zA-Z]+)[\n]*{(\n(.*?))+[}]+[ ]*([a-zA-Z0-9_]+);)' $FILE`
		do
			# Obtain the structure name.
			struct_name=${string#*:}
			# Obtain the line number.
			line_number_struct=${string%:*}

			# Check whether the structure name starts with lower case letter.	
			if [[ ${struct_name:0:1} =~ [a-z] ]]; then

				# Set the error flag.
				array_error_flag_struct_name[$line_number_struct]=$struct_name
			fi
		done
	
		# All done.
		return 0
	}


	check_access_modifiers()
	{
		# Pattern to match access modifier.
		pattern_access_mod="^[ \t]*(public|protected|private):"

		# Pattern to match line number from output of pcregrep.
		pattern_line_number="^[0-9]+:"

		# Save the default IFS to a temporary variable.
		SAVEIFS=$IFS
		# Modify the internal field separator to process each lines separately.
		IFS=$(echo -en "\n\b")

		# Iterate through each match of structure to check for access modifiers within structures [ Format: Any structure ].
		for string in `$TCPATH/res/vendor/pcre-8.35/pcregrep -o1 -n -M 'struct[ a-zA-Z_	]*[\n]*{((\n(.*?))+)[}]+[ ]*([a-zA-Z0-9_]*);' $FILE`
		do
			# Check whether the line is an access modifier.	
			if [[ $string =~ $pattern_line_number ]]; then
				line_number_struct=${struct_name%:*}
			fi

			if [[ $string =~ $pattern_access_mod ]]; then

				# Set the error flag.
				array_error_flag_access_mod[$line_number_struct]=1
			fi
		done

		# Reset IFS to the default value.
		IFS=$SAVEIFS

		# All done.
		return 0
	}

	# Need to keep track of the line number we are up to.
	local LINE_NUM=

	# If we encounter something wrong, then we make a note that there is at least some kind of issue with the file as a whole.
	local CHECKS_OK=1

	# Initially, we are checking.
	local CHECKS_EN=1

	# Calculate the maximum number of lines which could sensibly have compliance disabled before we suspect something is amiss.
	local DISABLED_LINE_COUNT=0

	# Check each structure name.
	check_struct_name $FILE

	# Check whether a structure has any access modifiers in it.
	check_access_modifiers $FILE

	# Pattern to match multi line comment start.
	pattern_comment_start="^[ \t]*(\/\*)"

	# Pattern to match multi line comment end.
	pattern_comment_end="(.*)(\*\/)"

	# Pattern to match single line comment.
	pattern_comment_single="^[ \t]*(\/\*)(.*)(\*\/)"

	# Pattern to match single line comment which appear after the statements Eg. int a; /* Used to declare a variable */
	pattern_comment_single_after_statement="(\/\*)(.*)(\*\/)"

	while read LINE
	do
		# Increment the line number.
  		((LINE_NUM++))

  		if [ ${CHECKS_EN} ]; then
  			# Check to see whether this line disables checking temporarily.
  			if [[ "$LINE" =~ "#pragma COMPL_DISAB_START" ]]; then
				
  				CHECKS_EN=
  				continue
  			fi

			# Check whether the line is the start of a multi line comment. If yes, set 'CHECKS_COMMENT' flag and read the next line.
			if [[ "$LINE" =~ $pattern_comment_start && ! "$LINE" =~ $pattern_comment_single_after_statement ]]; then

				CHECKS_COMMENT=1
				continue
			fi

			# Check whether the line is the end of a multi line comment. If yes, unset 'CHECKS_COMMENT' flag and read the next line.
			if [[ "$LINE" =~ $pattern_comment_end && ! "$LINE" =~ $pattern_comment_single_after_statement ]]; then

				CHECKS_COMMENT=
				continue
			fi
			
			# Check whether the line is a single comment line. If yes, read the next line.
			if [[ "$LINE" =~ $pattern_comment_single ]]; then

				continue
			fi

			# Check if the line has any errors with structure names.
			if [ ${array_error_flag_struct_name[$LINE_NUM]} ]; then

				# Report the line has failed.
				compliance_fail_line "compliance_check_file_structurenamecheck" $FILE $LINE_NUM "Non-compliant structure: '${array_error_flag_struct_name[$LINE_NUM]}' starts with a lowercase letter."
				# At least one thing is wrong in this file.
				CHECKS_OK=
			fi

			# Check if the line has any access modifiers within structures.
			if [ ${array_error_flag_access_mod[$LINE_NUM]} ]; then

				# Report the line has failed.
				compliance_fail_line "compliance_check_file_structurenamecheck" $FILE $LINE_NUM "Non-compliant structure: contains access modifiers."
				# At least one thing is wrong in this file.
				CHECKS_OK=
			fi

			# Proceed checking for compliance only if the line is not a comment.
			if [[ ! ${CHECKS_COMMENT} ]]; then

	  			# Ok, so now we actually want to check this line for compliance.
				if ! check_line "$LINE" $LINE_NUM; then

					# Report the line has failed.				
					compliance_fail_line "compliance_check_file_structurenamecheck" $FILE $LINE_NUM "Non-compliant structure name: $ERROR"
					# At least one thing is wrong in this file.
					CHECKS_OK=
				fi
			fi
  		else
			DISABLED_LINE_COUNT=$((DISABLED_LINE_COUNT+1))

  			# Checking is temporarily disabled, so all we do is see if this line enables them again.
  			if [[ "$LINE" =~ "#pragma COMPL_DISAB_END" ]]; then

  				# Enable checking again.
  				CHECKS_EN=1
  			fi
  		fi
	done < $FILE

	# Calculate the maximum number of lines which could sensibly have compliance disabled before we suspect something is amiss.
	local LINE_THRESH=$((LINE_NUM/10))
	
	# Check if the number of lines disabled is lesser than the threshold
	if [ $DISABLED_LINE_COUNT -ge $LINE_THRESH ]; then

		# Report that the file has failed.
		compliance_fail_file "exception_limits" $FILE "A suspiciously high number of lines '$DISABLED_LINE_COUNT' have compliance testing disabled."
	fi   

	if [ ! ${CHECKS_OK} ]; then

		# Report that the file has failed.
		compliance_fail_file "compliance_check_file_structnamecheck" $FILE "This file contains non-compliant structure(s)."
	fi

	# All done.
	return 0
}

# ALL DONE.
