#!/bin/bash

#	Copyright (C) 2011 Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

###########################################################################################################################
###
### Name:           	checkfuncs_structnamecheck
###
### Author:         	Ravi Shankar
###
### Date Created:	12-01-2015
###
### Type:           	Bash Function Definitions
###
### Purpose:        	Implements code compliance tests: tests for structure name validity.
###
###########################################################################################################################

######################################## FUNCTION #############################################
###
### Name:		compliance_check_file_structnamecheck
###
### Inputs/Outputs:	Path to the file to test.
###
### Purpose:		Tests a single C/CPP source or header file for valid structure names.
###
###############################################################################################

compliance_check_file_structnamecheck()
{
	# The file we're checking was the first argument we received.
	local FILE=$1

	# If we encounter something wrong, then we make a note that there is at least some kind of issue with the file as a whole.
	local CHECKS_OK=1

	check_line()
	{
		#
		#	$1 - The content of the line in question.
		#
	
		# Pattern to match access modifier.
		pattern_access_mod="^(\s)*(public|protected|private):"

		# Display message if any access modifiers are found in the structure.
		if [[ $1 =~ $pattern_access_mod ]]; then

			ERROR="Access modifier '${BASH_REMATCH[2]}' found within structure."

			return 1
		fi
							
		# All done.
		return 0
	}

	# Need to keep track of the line number we are up to.
	local LINE_NUM=

	# If we encounter something wrong, then we make a note that there is at least some kind of issue with the file as a whole.
	local CHECKS_OK=1

	# Initially, we are checking.
	local CHECKS_EN=1

	# Calculate the maximum number of lines which could sensibly have compliance disabled before we suspect something is amiss.
	local DISABLED_LINE_COUNT=0

	# Pattern to match the beginning of a struct declaration.
	pattern_struct_start="struct(.*)"

	# Pattern to match one line structure declarations.
	pattern_struct_declar="struct ([a-zA-Z_]+) (.*);"

	# Pattern to match end of structure.
	pattern_struct_end="^(\s)*}(.*);"

	while read LINE
	do
		# Increment the line number.
  		((LINE_NUM++))

  		if [ ${CHECKS_EN} ]; then
  			
			# Condition to check for one line struct declarations.
			if [[ $LINE =~ $pattern_struct_declar ]]; then
				struct_name=${BASH_REMATCH[1]}
				
				# Check whether the structure name starts with lower case letter.	
				if [[ ${struct_name:0:1} =~ [a-z] ]]; then
					# Report the line has failed.
					compliance_fail_line "compliance_check_file_structurenamecheck" $1 $LINE_NUM "Non-compliant structure: $ERROR"
				fi

			fi

			# Condition to check if the line matches struct pattern.
			if [[ $LINE =~ $pattern_struct_start ]]; then

				# Read the next line to ensure that it is a struct declaration.
				read LINE
					
				# Increment the line number.
		  		((LINE_NUM++))

				if [[ $LINE =~ "{" ]]; then
					CHECKS_EN=
	  				continue
				fi
			fi
  		else
			if [[ $LINE =~ $pattern_struct_end ]]; then
								
				# We have reached the end of the structure declaration. So break the loop.
				CHECKS_EN=1
			fi

			# Ok, so now we actually want to check this line for compliance.
			if ! check_line "$LINE"; then
				# Report the line has failed.
				compliance_fail_line "compliance_check_file_structurenamecheck" $1 $LINE_NUM "Non-compliant structure: $ERROR"
		
				# At least one thing is wrong in this file.
				CHECKS_OK=
			fi
  		fi
	done < $FILE

	# Obtain the line numbers containing pragma to disable code compliance checking.
	for line_number in `grep $FILE -n -e "#pragma COMPL_DISAB_START" | cut -d : -f 1`
	do
		start_line_array+=($line_number)
	done	

	# Obtain the line numbers containing pragma to enable code compliance checking.
	for line_number in `grep $FILE -n -e "#pragma COMPL_DISAB_END" | cut -d : -f 1`
	do
		end_line_array+=($line_number)
	done

	# Proceed only when the number of pragmas for code compliance enabling/disabling match.
	if [[ ${#start_line_array[@]} == ${#end_line_array[@]} ]]; then
	
		# Iterate through each match of structure name [ Format: struct { ... } XYZ; ].
		for string in `$TCPATH/res/vendor/pcre-8.35/pcregrep -o3 -n -M 'struct[ ]*[\n]*{(\n(.*?))+[}]+[ ]*([a-zA-Z0-9_]+);' $FILE`
		do
			# Obtain the structure name.
			struct_name=${string#*:}
			# Obtain the line number.
			line_number_struct=${string%:*}

			# Variable used to check whether the structure lies within code where checking is disabled.		
			CHECK_WITHIN_BLOCK=
			# Variable used to loop within while loop.
			i=0

			# Check whether the structure name starts with lower case letter.	
			if [[ ${struct_name:0:1} =~ [a-z] ]]; then
	
				# Iterate through the array to get line numbers of the pragmas for disabling code check.
				while [[ $i -lt ${#start_line_array[@]} ]]
				do
					# Check if the structure lies within the check disabled block.
					if [[ $line_number_struct -gt ${start_line_array[$i]} && $line_number_struct -lt ${end_line_array[$i]} ]]; then
						
						# Change the value to denote that it lies within check disabled block.
						CHECK_WITHIN_BLOCK==1
					fi
					
					((i++))
				done
	
				# Check if the structure lies within check disabled block.
				if [[ ! $CHECK_WITHIN_BLOCK ]]; then
					compliance_fail_line "compliance_check_file_structnamecheck" $FILE $line_number_struct "Non-compliant structure name: '$struct_name' starts with a lower case letter"
					CHECKS_OK=
				fi
			fi
		done

		# Iterate through each match of structure name [ Format: struct XYZ { ... }; ].
		for string in `$TCPATH/res/vendor/pcre-8.35/pcregrep -n -o2 -M 'struct ([a-zA-Z0-9_]*[ ])*([a-zA-Z0-9_]+)\s*\n*{' $FILE`
		do
			# Obtain the structure name.
			struct_name=${string#*:}
			# Obtain the line number.
			line_number_struct=${string%:*}

			# Variable used to check whether the structure lies within code where checking is disabled.		
			CHECK_WITHIN_BLOCK=
			# Variable used to loop within while loop.
			i=0

			# Check whether the structure name starts with lower case letter.	
			if [[ ${struct_name:0:1} =~ [a-z] ]]; then
	
				# Iterate through the array to get line numbers of the pragmas for disabling code check.
				while [[ $i -lt ${#start_line_array[@]} ]]
				do
					# Check if the structure lies within the check disabled block.
					if [[ $line_number_struct -gt ${start_line_array[$i]} && $line_number_struct -lt ${end_line_array[$i]} ]]; then
						
						# Change the value to denote that it lies within check disabled block.
						CHECK_WITHIN_BLOCK==1
					fi
					
					((i++))
				done
	
				# Check if the structure lies within check disabled block.
				if [[ ! $CHECK_WITHIN_BLOCK ]]; then
					compliance_fail_line "compliance_check_file_structnamecheck" $FILE $line_number_struct "Non-compliant structure name: '$struct_name' starts with a lower case letter"
					CHECKS_OK=
				fi
			fi
		done

		# Iterate through each match of structure name [ Format: typedef struct XYZ { ... }ABC; ].
		for string in `$TCPATH/res/vendor/pcre-8.35/pcregrep -n -o4 -M 'typedef struct[ ]*([a-zA-Z]+)[\n]*{(\n(.*?))+[}]+[ ]*([a-zA-Z0-9_]+);' $FILE`
		do
			# Obtain the structure name.
			struct_name=${string#*:}
			# Obtain the line number.
			line_number_struct=${string%:*}

			# Variable used to check whether the structure lies within code where checking is disabled.		
			CHECK_WITHIN_BLOCK=
			# Variable used to loop within while loop.
			i=0

			# Check whether the structure name starts with lower case letter.	
			if [[ ${struct_name:0:1} =~ [a-z] ]]; then
	
				# Iterate through the array to get line numbers of the pragmas for disabling code check.
				while [[ $i -lt ${#start_line_array[@]} ]]
				do
					# Check if the structure lies within the check disabled block.
					if [[ $line_number_struct -gt ${start_line_array[$i]} && $line_number_struct -lt ${end_line_array[$i]} ]]; then
						
						# Change the value to denote that it lies within check disabled block.
						CHECK_WITHIN_BLOCK==1
					fi
					
					((i++))
				done
	
				# Check if the structure lies within check disabled block.
				if [[ ! $CHECK_WITHIN_BLOCK ]]; then
					compliance_fail_line "compliance_check_file_structnamecheck" $FILE $line_number_struct "Non-compliant structure name: '$struct_name' starts with a lower case letter"
					CHECKS_OK=
				fi
			fi
		done
	fi

	if [ ! ${CHECKS_OK} ]; then

		# Report that the file has failed.
		compliance_fail_file "compliance_check_file_structnamecheck" $1 "This file contains non-compliant structure name(s)."
	fi

	# All done.
	return 0
}

######################################## FUNCTION #####################################################
###
### Name:		compliance_get_rules_structnamecheck
###
### Inputs/Outputs:	None.
###
### Purpose:		Prints out a summary of the code compliance rules for the structnamecheck test.
###
#######################################################################################################

compliance_get_rules_structnamecheck()
{
	echo "structnamecheck:"
	echo "\tStructure names which begin with a lower case character will fail."
	echo "\tStructures which contain access modifiers such as public, protected or private will fail."
	echo "\tThe check may be toggled on/off with \"#pragma COMPL_DISAB_START\" and \"#pragma COMPL_DISAB_END\"."
	echo ""
}

# ALL DONE.
