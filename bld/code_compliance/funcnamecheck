#!/bin/bash
#REGEX='(\S+)[ ]*\([ ]*\S*[ ]*\S*(?:[ ]*\S*,[ ]*\S*[ ]+\S*)*\)[ ]*\/*[ ]*\S*'



################################################################################################################
#This script is for imposing naming conventions for functions in all the files.
#It checks for the condition whether the function names are all in lower case.
#If the condition fail, a warning message is thrown denoting the line of failure and the function name.
################################################################################################################


# Determine what the absolute path to the root of the toolchain is.
SCRIPT=`readlink -f $0`
SCRIPTPATH=`dirname $SCRIPT`
TCPATH=$(echo $SCRIPTPATH | sed 's/\/bld.*//')

# Define the colours used for interface output.
source $TCPATH/bld/common/def_colours

echo -e "${RED}ERROR(S) IN FUNCTION NAMES in directory ${CYAN}$1\n${NO_COLOUR}"

#This for loop is responsible for looping through all files with required file formats (.c, .cpp, .h, .hpp, .pde) in the ValleyForge directory
for FILE in $(find $1 -name "*.cpp" -o -name "*.hpp" -o -name "*.c" -o -name "*.h" -o -name "*.pde"); do

	funcnamecheck=1
	count=0
	while read line
	do
	  	name=$line
    		#echo "the line is $name"
		count=$((count+1))

		#This condition is used for ignoring code blocks
		if [[ "$name" =~ "// INDENT-OFF" ]]; then
			read line2
    			count=$((count+1))
			name2=$line2

				while [[ "$name2" != "// INDENT-ON" ]] && read line3
				do
	    				count=$((count+1))
					name2=$line3
				done
			#This condition is used for ignoring lines which include comments. 
		elif ! [[ "$name" =~ ^/.*|^\*.* || "$name" =~ \#.* ]]; then

			if [[ "$name" =~ $pattern ]]; then
			echo "$name matches pattern"
						value=${name#* }
						valbef=${value%\(*}
						if [[ "$value" == "$name" ]]; then
							:
						else
							if [[ "$valbef" =~ "," ]]; then
								:
							else
								valcase2='a-z0-9_'
								if [[ "$valbef" =~ [^$valcase2] ]]; then
									valbef2=${valbef#* }				
								else
									valbef2=$valbef
					
								fi
								valcase='a-z0-9_'
								if [[ "$valbef2" =~ ":" || "$valbef2" =~ ")" || "$valbef2" =~ "(" ]]; then
									:
								else
									if [[ "$valbef2" =~ [^$valcase] ]]; then

										echo -e "${RED}WARNING: At Line ${CYAN}$count, $valbef2 ${RED}has uppercase letters.${NO_COLOUR}"
										funcnamecheck=0
									fi
								fi
							fi
						fi
			fi
		fi
	done < $FILE

	if [[ $funcnamecheck == 0 ]]; then
		echo -e "\n${YELLOW}WARNING: ${CYAN}$FILE ${YELLOW}has errors with function names!${NO_COLOUR}"
		echo -e "${GREEN}--------------------------------------------------------------------------------\n\n${NO_COLOUR}"
	fi
done

echo -e "${BOLD_WHITE}${UNDERLINED}FUNCTION NAMING CONVENTIONS:${NO_COLOUR}"
echo -e "${GREEN}Names of functions and methods should be all lower case and underscore separated \nE.g. ${YELLOW}void do_something() ${NO_COLOUR}"
echo -e "${GREEN}--------------------------------------------------------------------------------${NO_COLOUR}"
echo -e "${GREEN}--------------------------------------------------------------------------------\n\n${NO_COLOUR}" 
 
