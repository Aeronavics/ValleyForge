#!/bin/bash
#REGEX='(\S+)[ ]*\([ ]*\S*[ ]*\S*(?:[ ]*\S*,[ ]*\S*[ ]+\S*)*\)[ ]*\/*[ ]*\S*'



################################################################################################################
#This script is for imposing naming conventions for functions in all the files.
#It checks for the condition whether the function names are all in lower case.
#If the condition fail, a warning message is thrown denoting the line of failure and the function name.
################################################################################################################


# Determine what the absolute path to the root of the toolchain is.
SCRIPT=`readlink -f $0`
SCRIPTPATH=`dirname $SCRIPT`
TCPATH=$(echo $SCRIPTPATH | sed 's/\/bld.*//')

#This for loop is responsible for looping through all files with required file formats (.c, .cpp, .h, .hpp, .pde) in the ValleyForge directory
for FILE in $(find $TCPATH/ -name "*.cpp" -o -name "*.hpp" -o -name "*.c" -o -name "*.h" -o -name "*.pde"); do

	funcnamecheck=1
	count=0
	while read line
	do
	  	name=$line
    		#echo "the line is $name"
		count=$((count+1))

		#This condition is used for ignoring code blocks
		if [[ "$name" =~ "// INDENT-OFF" ]]; then
			read line2
    			count=$((count+1))
			name2=$line2

				while [[ "$name2" != "// INDENT-ON" ]] && read line3
				do
	    				count=$((count+1))
					name2=$line3
				done
			#This condition is used for ignoring lines which include comments. 
		elif [[ "$name" =~ "*" || "$name" =~ "//" ]]; then
			#If it is a comment line, do nothing
			:

		else
			
			#Continue if the line has '()' characters in it.
			if [[ $name =~ [()] ]]; then 

				#Check for keywords which eliminate the possibility of the line being a function
				case $name in 

					(*for*) ;;

					(*case*) ;;

					(*-\>*) ;;

					(*\<*) ;;

					(*\>*) ;;

					(*while*) ;;

					(*volatile*) ;;
				
					(*if*) ;;

					(*{*) ;;

					(*__*) ;;

					(*ISR*) ;;

					(*switch*) ;;

					(*main*) ;;

					(*//*) ;;

					(*\(\(*) ;;

					(*return*) ;;

					(*template*) ;;

					(*=*) ;;

					(*#*) ;;

					(*\;*) ;;

					(*\~*) ;;
					
					(*::*) 
					
						value=${name#* }
						if [[ "$value" == "$name" ]]; then
						:
						else
						if [[ "$value" == ":" ]]; then
							:
						else

							valbef=${value%\(*}
							if [[ "$valbef" =~ "," ]]; then
							:
							else
							funcname=${valbef##*::}
							classname=${valbef%::*}
							valcase='a-z0-9_ '
							if [[ "$funcname" =~ ":" || "$funcname" =~ ")" || "$funcname" =~ "(" ]]; then
							:
							else					
								if [[ $funcname != $classname ]]; then

									if [[ "$funcname" =~ [^$valcase] ]]; then
									
									        echo "WARNING: At Line $count, $funcname has uppercase letters."
										funcnamecheck=0

									fi
									
								fi
							fi
							fi
						fi
						fi
						;;
				

						*) 
					#echo "$count: $name"
						value=${name#* }
						valbef=${value%\(*}
						if [[ "$value" == "$name" ]]; then
						:
						else
						if [[ "$valbef" =~ "," ]]; then
						:
						else
						valcase2='a-z0-9_'
							if [[ "$valbef" =~ [^$valcase2] ]]; then
							valbef2=${valbef#* }
							#echo "within if"
							else
							valbef2=$valbef
							#echo "within else"
							fi
						#echo "$value, $valbef"
						valcase='a-z0-9_'
						if [[ "$valbef2" =~ ":" || "$valbef2" =~ ")" || "$valbef2" =~ "(" ]]; then
						:
						else
						if [[ "$valbef2" =~ [^$valcase] ]]; then

							echo "WARNING: At line $count, $valbef2 has uppercase letters."
							funcnamecheck=0

						fi
						fi
						fi
						fi
					esac
						
				
			fi
		fi
	done < $FILE

	if [[ $funcnamecheck == 0 ]]; then
		echo -e "\n------------------------------------------------------------------------------"
		echo "$FILE has errors with function names!"
		echo -e "------------------------------------------------------------------------------\n"
	fi
done
