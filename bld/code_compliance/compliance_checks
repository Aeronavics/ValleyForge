#!/bin/bash

#	Copyright (C) 2011 Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

###########################################################################################################################
###
### Name:           compliance_checks
###
### Author:         Edwin Hayes
###
### Date Created:	16-12-2014
###
### Type:           Bash Function Definitions
###
### Purpose:        Provides functions to perform code compliance tests.
###
###########################################################################################################################

# Import all the files which look like they might contain functions which actually check things.
for f in $TCPATH/bld/code_compliance/checkfuncs_*; do
	source "$f"
done

# Indicate the file was imported successfully.
echo -e "${CYAN}Imported top level code compliance functions.\n${NO_COLOUR}"

######################################## FUNCTION #########################################
###
### Name:		compliance_load_config
###
### Inputs/Outputs:	None.
###
### Purpose:	Load code compliance configuration settings from file.  For now, the path
###             to load is hard coded in, but actually, it should take this from the user
###             configuration file.
###
###########################################################################################

compliance_load_config()
{
	# The default code compliance configuration is hard coded in.
	CODE_COMPLIANCE_CONFIG_DEFAULT="bld/code_compliance/config_files/code_compliance.cfg"
	
	# Check if there is a user code compliance configuration available.  For now, the path to the user config file is hard coded.
	CODE_COMPLIANCE_CONFIG_USER="var/code_compliance.cfg"
	if [ -a "${CODE_COMPLIANCE_CONFIG_USER}" ]; then
		CODE_COMPLIANCE_CONFIG=${CODE_COMPLIANCE_CONFIG_USER}
	else
		CODE_COMPLIANCE_CONFIG=${CODE_COMPLIANCE_CONFIG_DEFAULT}
	fi

	# Load whichever configuration file we chose.	
	echo -e "${CYAN}Loading code compliance configuration from: ${CODE_COMPLIANCE_CONFIG}\n${NO_COLOUR}"
	source "$TCPATH/${CODE_COMPLIANCE_CONFIG}"

	# All done.
	return 0
}

######################################## FUNCTION #########################################
###
### Name:		compliance_check_directory
###
### Inputs/Outputs:	Path to the directory containing source file to check.
###					Path to the file to write compliance results to.
###
### Purpose:	Performs code compliance checks on all the source files in the specified
###				directory.
###
###				At the moment, this is essentially just a wrapper for Ravi's scripts.
###
###########################################################################################

compliance_check_directory()
{
	#
	#	$1 - The name of the directory containing the source files to be checked.
	#
	#	$2 - The directory where the output text file is to be stored.
	#

	# Check if the specified location is actually legit.
	if [ ! -d "$1" ]; then
		# The specified location is not a directory.
		echo -e "${RED}Invalid source location to test for code compliance.\n${NO_COLOUR}"
		return 1
	fi

	# Check if the specified location is actually legit.
	if [ ! -n "$2" ]; then
		# The specified location is not a directory.
		echo -e "${RED}Invalid output location for code compliance results.\n${NO_COLOUR}"
		return 1
	fi

	# Record the output file.
	COMPLIANCE_OUTPUT_FILEPATH=$2

	# Record the input directory in a variable to be used by compliance scripts
	COMPLIANCE_INPUT_DIRECTORY=$1


	# The default directory for code compliance configuration files.
	CODE_COMPLIANCE_CONFIG_DIRECTORY="bld/code_compliance/config_files"


	# Initially, the number of errors or warnings is zero.
	COMPLIANCE_NUM_ERRORS=0
	COMPLIANCE_NUM_WARNINGS=0

	# Here, we've got tests which are performed on individual source files.

	# Create a list of checks which are available.
	CHECKS=`declare -F | grep -o -e "declare -f compliance_check_file_.*" | grep -o -e "compliance_check_file_.*"`

	# Check if at least one type of check if available.
	if [ -z "${CHECKS}" ]; then
		# There aren't any checks to perform.
		echo -e "${YELLOW}\tNo code compliance checks seem to be available.\n${NO_COLOUR}"
		return 0
	fi

	# Construct a string with any required prune statements for files that should not be checked.
	COMPLIANCE_MASK_STRING=
	if [ -n "${COMPLIANCE_MASK}" ]; then
		echo -e "${YELLOW}\tNot checking some files according to mask: ${COMPLIANCE_MASK}\n${NO_COLOUR}"
		for COMPLIANCE_MASK_WORD in ${COMPLIANCE_MASK}; do
			COMPLIANCE_MASK_STRING+=" -wholename $1/${COMPLIANCE_MASK_WORD} -prune -o"
		done
	fi

	# Since it's easier to have the results ordered by file, iterate over the candidate files first.
	for FILE in $(find $1 ${COMPLIANCE_MASK_STRING} -name "*.cpp" -print \
												 -o -name "*.hpp" -print \
												 -o -name "*.c" -print \
												 -o -name "*.h" -print \
												 -o -name "*.pde" -print); do
		echo -e "${CYAN}\tChecking code compliance: ${FILE}"

		# Iterate over each of the checks.
		for CHECK in ${CHECKS}; do
			# Test if this check is actually enabled in our current configuration.
			if ! compliance_lookup_test ${CHECK}; then
				# Perform the check.
				echo >&2 "check is performed ${CHECK}"
				${CHECK} ${FILE}
			fi
		done
	done

	# Check whether any error were reported.
	if [ ${COMPLIANCE_NUM_ERRORS} -gt 0 ]; then
		# At least one error occurred, so we return indicating there is a problem.
		echo -e "\n${CYAN}\tCode compliance testing complete.  Found ${RED}${COMPLIANCE_NUM_ERRORS} errors${CYAN}, and ${YELLOW}${COMPLIANCE_NUM_WARNINGS} warnings${CYAN}.\n${NO_COLOUR}"
		return 1
	fi

	# Check whether any warnings were reported.
	if [ ${COMPLIANCE_NUM_WARNINGS} -gt 0 ]; then
		# At least one warning occurred, so we print a message, but return that everything seemed ok.
		echo -e "\n${CYAN}\tCode compliance testing complete.  Found ${YELLOW}${COMPLIANCE_NUM_WARNINGS} warnings${CYAN}.\n${NO_COLOUR}"
		return 0
	fi

	# Else return that the checks went ok.
	echo -e "\n${CYAN}\tCode compliance testing complete.\n${NO_COLOUR}"
	return 0
}

##################################### MINOR FUNCTIONS ####################################

compliance_lookup_test()
{
	#
	#	Lookup whether a specific compliance test is enabled.
	#
	#	$1 - The name of the test.
	#

	KEY=$(eval "echo \"\${COMPLIANCE_EN_$1}\"")

	if [ "${KEY}" == "ERROR" ]; then
		return 2
	elif [ "${KEY}" == "WARNING" ]; then
		return 1
	fi

	# Else, the test is disabled.
	return 0
}

compliance_fail_file()
{
	#
	#	$1 - The name of the test which has failed.
	#	$2 - Filename where the failure appears.
	#	$3 - String describing the error.
	#

	# Look up the appropriate behaviour for this test.
	compliance_lookup_test $1
	if [ $? -eq 2 ]; then
		# The failure should generate an error.

		if [ -n "${COMPLIANCE_OUTPUT_CONSOLE}" ]; then
			echo -e "${RED}\tCompliance error: $2: '$3'${NO_COLOUR}"
		fi

		if [ -n "${COMPLIANCE_OUTPUT_FILE}" ]; then
			echo -e "Compliance error: $2: '$3' " >> ${COMPLIANCE_OUTPUT_FILEPATH}
		fi
		
		if [[ $1 == compliance_check_file_file* || $1 == "exception_limits" ]]; then
			((COMPLIANCE_NUM_ERRORS++))
		fi

	elif [ $? -eq 1 ]; then
		# The failure should generate a warning.

		if [ -n "${COMPLIANCE_OUTPUT_CONSOLE}" ]; then
			echo -e "${YELLOW}\tCompliance warning: $2: '$3'${NO_COLOUR}"
		fi

		if [ -n "${COMPLIANCE_OUTPUT_FILE}" ]; then
			echo -e "Compliance warning: $2: '$3'" >> ${COMPLIANCE_OUTPUT_FILEPATH}
		fi

		if [[ $1 == compliance_check_file_file* || $1 == "exception_limits" ]]; then
			((COMPLIANCE_NUM_WARNINGS++))
		fi

	fi
	# Else, the test wasn't even enabled, so why does it matter that it failed?  Why did we even run the test?

	# All done.
	return 0
}

compliance_pass_file()
{
	# All done.
	return 0
}

compliance_fail_line()
{
	#
	#	$1 - The name of the test which has failed.
	#	$2 - Filename where the failure appears.
	#	$3 - Line number where the failure appears.
	#	$4 - String describing the error.
	#

	# Look up the appropriate behaviour for this test.
	compliance_lookup_test $1
	if [ $? -eq 2 ]; then
		# The failure should generate an error.

		if [ -n "${COMPLIANCE_OUTPUT_CONSOLE}" ]; then
			echo -e "${RED}\tCompliance error: $2 line $3: $4${NO_COLOUR}"
		fi

		if [ -n "${COMPLIANCE_OUTPUT_FILE}" ]; then
			echo -e "Compliance error: $2 line $3: $4" >> ${COMPLIANCE_OUTPUT_FILEPATH}
		fi

		((COMPLIANCE_NUM_ERRORS++))

	elif [ $? -eq 1 ]; then
		# The failure should generate a warning.

		if [ -n "${COMPLIANCE_OUTPUT_CONSOLE}" ]; then
			echo -e "${YELLOW}\tCompliance warning: $2 line $3: $4${NO_COLOUR}"
		fi

		if [ -n "${COMPLIANCE_OUTPUT_FILE}" ]; then
			echo -e "Compliance warning: $2 line $3: $4" >> ${COMPLIANCE_OUTPUT_FILEPATH}
		fi

		((COMPLIANCE_NUM_WARNINGS++))

	fi
	# Else, the test wasn't even enabled, so why does it matter that it failed?  Why did we even run the test?

	# All done.
	return 0
}

# ALL DONE.
