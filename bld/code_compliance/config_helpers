#!/bin/bash

#	Copyright (C) 2011 Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

###########################################################################################################################
###
### Name:           config_helpers
###
### Author:         Edwin Hayes
###
### Date Created:	11-12-2014
###
### Type:           Bash Function Definitions
###
### Purpose:        Provides functions to assist in reading and writing configuration keys to typical VF configuration
###                 files, which are usually just BASH scripts that are executed to load the key/values into scope.
###
###########################################################################################################################

# Add a single key to a configuration file, or modify the key if it already exists.
push_key()
{
	# $1 - Configuration file.
	# $2 - Key.
	# $3 - Value.
	# $4 - Flag indicating whether to concatenate or delete a key instead of assigning it.

	# NOTE - The behaviour of this function when dealing with concatenating or deleting-type keys may not be immediately obvious.

	# TODO - Check if the required fields are actually present.

	# Check if the specified configuration file exists.
	if [ ! -f "$1" ]; then
		# The specified configuration file does not exist, so we create it.
		touch $1
	fi

	# Check whether we are just trying to delete a specific key/value pair.
	if [ "$4" == "--delete" ]; then
		# We are deleting a specific key/value pair, rather than inserting a new key, or replacing an existing key.

		# If we can find the exact key/value pair (treating assignment and concatenation the same), then we delete it.
		sed -r -i "\|\s*${2}\s*=\s*${3}\s*|d" ${1}
		sed -r -i "\|\s*${2}\s*[+]=\s*${3}\s*|d" ${1}

	# Check whether we should be concatenating this key rather than assigning it.
	elif [ "$4" == "--concat" ]; then
		# Because this is a concatenated key, we check if the complete key/value pair already exists, rather than just the key.
		if [ -z "`cat ${1} | grep -E \"^\s*${2}[+]=${3}$\"`" ]; then
			# We couldn't already find the key, so we just insert it add the end.
			echo "${2}+=${3}" >> "${1}"
		fi
	
	# Else this is just a regular assignment.
	else
		# Check if the key already exists in the file.
		if [ -n "`cat ${1} | grep -E \"^\s*${2}\s*=.*$\"`" ]; then
			# The key already exists, so now we just change its value.
			sed -r -i "s%^\s*${2}\s*=.*$%${2}	=	${3}%g" ${1}
		else
			# We couldn't already find the key, so we just insert it add the end.
			echo "${2}=${3}" >> "${1}"
		fi
	fi

	# All done.
	return 0	
}

# Fetch the value of a single key from a configuration file.  Returns empty if key not found.
pull_key()
{
	# $1 - Configuration file.
	# $2 - Key.

	# NOTE - This function can be used to get the value of a key without actually loading the key from file.

	# NOTE - However, the behavior in the case of multiple (usually concatenating) keys may not be immediately obvious.	

	# Check if the specified configuration file exists.
	if [ ! -f "$1" ]; then
		# The specified configuration file does not exist, so we simply return nothing.
		return 1
	fi

	# TODO - Check if the required fields are actually present.
	if grep -Eq "^\s*${2}\s*=.*$" $1
	then
		:
	else
		echo "Invalid key entered..."
	fi

	# Check if the key is found in the file, and if so, print it out (since you can't return a string in bash).
	echo `cat ${1} | grep -E "^\s*${2}\s*=.*$" | cut -s -d = -f 2`
	echo `cat ${1} | grep -E "^\s*${2}\s*[+]=.*$" | cut -s -d = -f 2`

	# All done.
	return 0
}

# ALL DONE.
