#!/bin/bash

#	Copyright (C) 2012 Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

###########################################################################################################################
###															###
### Name:		setup_vendorcode										###
###															###
### Author:		Edwin Hayes											###
###															###
### Date Created:	26-02-2012											###
###															###
### Type:		Bash Script											###
###															###
### Purpose:		Provides functions which checks to see if a specific source of vendor code (code provided by a	###
###			external party) is available for use, and packs or unpacks it as required.  Typically, this	###
###			vendor code will be in the form of a git repository, and so the terms 'packs' and 'unpacks' are	###
###			somewhat misleading, because 'unpacking' actually entails downloading a copy of the source, and	###
###			'packing' involves deleting the downloaded files.						###
###															###
###########################################################################################################################

TMP_CACHE=${TCPATH}/tmp

# Define the local and remote locations of the vendor sources.
VENDOR_MAVLINK_LOCAL=${TCPATH}/res/vendor/mavlink
VENDOR_MAVLINK_REMOTE="https://github.com/mavlink/mavlink.git"

VENDOR_FREERTOS_LOCAL=${TCPATH}/res/vendor/freertos
VENDOR_FREERTOS_REMOTE="http://sourceforge.net/projects/freertos/files/latest/download?source=files"

VENDOR_STLINK_LOCAL=${TCPATH}/res/vendor/stlink
VENDOR_STLINK_REMOTE="https://github.com/texane/stlink.git"

######################################## FUNCTION #########################################
###											###
### NAME:		unpack_mavlink							###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		Checks if the MAVlink vendor source is available for use, and	###
###			if not, sets it up ready to go.					###
###											###
###########################################################################################

unpack_mavlink()
{
	# Check if the MAVlink repository has been downloaded already.
	if [ ! -d ${VENDOR_MAVLINK_LOCAL} ]; then
		# We need to clone the repository before we can use it.		
		echo -e "${CYAN}\tDownloading the MAVlink vendor source...\n${NO_COLOUR}"
		git clone --depth=1 ${VENDOR_MAVLINK_REMOTE} ${VENDOR_MAVLINK_LOCAL}
		echo -e ""
	else
		# Check if the directory is not actually a git repository, which would indicate something bad.
		if [ ! -d ${VENDOR_MAVLINK_LOCAL}/.git ]; then
			# The directory isn't a git repository, so something is very wrong.
			echo -e "${RED}The directory ${VENDOR_MAVLINK_LOCAL} is not a git repository.  Cannot unpack MAVlink source.\n${NO_COLOUR}"
			return 1
		else
			# The repository already exists, so just need to make sure it is up to date.
			echo -e "${CYAN}\tUpdating the MAVlink vendor source...\n${NO_COLOUR}"
			pushd ${VENDOR_MAVLINK_LOCAL} >/dev/null
			git pull
			echo -e ""
			popd >/dev/null
		fi
    	fi

	# TODO - Test that now the required files actually exist.

	# All done.
	return 0
}

######################################## FUNCTION #########################################
###											###
### NAME:		unpack_freertos							###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		Checks if the FreeRTOS vendor source is available for use, and	###
###			if not, sets it up ready to go.					###
###											###
###########################################################################################

unpack_freertos()
{
	# Check if the FreeRTOS source has been downloaded already.
	if [ ! -d ${VENDOR_FREERTOS_LOCAL} ]; then
		# We need to download and unpack the source before we can use it.
		echo -e "${CYAN}\tDownloading the FreeRTOS vendor source...\n${NO_COLOUR}"
		wget -O ${TMP_CACHE}/freertos_vendor.zip ${VENDOR_FREERTOS_REMOTE}
		unzip ${TMP_CACHE}/freertos_vendor.zip -d ${VENDOR_FREERTOS_LOCAL}
		if [ $? -ne 0 ]; then
			# We couldn't unzip the file, so something went wrong, and we abort.
			return 1
		fi
		echo -e ""

		# The newly unpacked directory will have some unhelpful nesting, so we flatten that.
		mv ${VENDOR_FREERTOS_LOCAL}/FreeRTOSV*/FreeRTOS/* ${VENDOR_FREERTOS_LOCAL}
		rm -rf ${VENDOR_FREERTOS_LOCAL}/FreeRTOSV*
	else
		# The source has already been downloaded.
		echo -e "${CYAN}\tFreeRTOS vendor source available...\n${NO_COLOUR}"

		# TODO - Maybe at some stage we might want to check if the existing files are up to date.
    	fi

	# TODO - Test that now the required files actually exist.

	# All done.
	return 0
}

######################################## FUNCTION #########################################
###											###
### NAME:		unpack_vendor_stlink						###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		Checks if the STlink vendor source is available for use, and	###
###			if not, sets it up ready to go.					###
###											###
###########################################################################################

unpack_vendor_stlink()
{
	# TODO - This.

	# Check if the STLink repository has been downloaded already.
	if [ ! -d ${VENDOR_STLINK_LOCAL} ]; then
		# We need to clone the repository before we can use it.		
		echo -e "${CYAN}\tDownloading the STLink vendor source...\n${NO_COLOUR}"
		git clone --depth=1 ${VENDOR_STLINK_REMOTE} ${VENDOR_STLINK_LOCAL}
		echo -e ""
	else
		# Check if the directory is not actually a git repository, which would indicate something bad.
		if [ ! -d ${VENDOR_STLINK_LOCAL}/.git ]; then
			# The directory isn't a git repository, so something is very wrong.
			echo -e "${RED}The directory ${VENDOR_STLINK_LOCAL} is not a git repository.  Cannot unpack STLink source.\n${NO_COLOUR}"
			return 1
		else
			# The repository already exists, so just need to make sure it is up to date.
			echo -e "${CYAN}\tUpdating the STLink vendor source...\n${NO_COLOUR}"
			pushd ${VENDOR_STLINK_LOCAL} >/dev/null
			git pull
			echo -e ""
			popd >/dev/null
		fi
    	fi

	# TODO - Test that now the required files actually exist.

	# All done.
	return 0
}

######################################## FUNCTION #########################################
###											###
### NAME:		pack_allv							###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		For each vendor source which was previously unpacked, packs	###
###			those sources back again.					###
###											###
###########################################################################################

pack_allv()
{
	# Just pack each of the vendor sources in turn.
	pack_mavlink
	pack_freertos
	pack_vendor_stlink
}

######################################## FUNCTION #########################################
###											###
### NAME:		pack_mavlink							###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		Checks if the MAVlink vendor source was previously unpacked,	###
###			and if it was, then packs it back up again.			###
###											###
###########################################################################################

pack_mavlink()
{
	# Check if the MAVlink repository has been downloaded already.
	if [ -d ${VENDOR_MAVLINK_LOCAL} ]; then
		# We just delete the downloaded clone of the repository.		
		echo -e "${CYAN}\tCleaning up MAVlink vendor source...\n${NO_COLOUR}"
		rm -Rf ${VENDOR_MAVLINK_LOCAL}
    	fi
		# Else, the source is already packed.

	# All done.
	return	
}

######################################## FUNCTION #########################################
###											###
### NAME:		pack_freertos							###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		Checks if the FreeRTOS vendor source was previously unpacked,	###
###			and if it was, then packs it back up again.			###
###											###
###########################################################################################

pack_freertos()
{
	# Check if the FreeRTOS repository has been downloaded already.
	if [ -d ${VENDOR_FREERTOS_LOCAL} ]; then
		# We just delete the downloaded clone of the repository.		
		echo -e "${CYAN}\tCleaning up FreeRTOS vendor source...\n${NO_COLOUR}"
		rm -Rf ${VENDOR_FREERTOS_LOCAL}
    	fi
		# Else, the source is already packed.

	# All done.
	return	
}

######################################## FUNCTION #########################################
###											###
### NAME:		pack_vendor_stlink						###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		Checks if the STLink vendor source was previously unpacked,	###
###			and if it was, then packs it back up again.			###
###											###
###########################################################################################

pack_vendor_stlink()
{
	# Check if the STLink repository has been downloaded already.
	if [ -d ${VENDOR_STLINK_LOCAL} ]; then
		# We just delete the downloaded clone of the repository.		
		echo -e "${CYAN}\tCleaning up STLink vendor source...\n${NO_COLOUR}"
		rm -Rf ${VENDOR_STLINK_LOCAL}
    	fi
		# Else, the source is already packed.

	# All done.
	return	
}

# ALL DONE.

