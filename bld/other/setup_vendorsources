#!/bin/bash

#	Copyright (C) 2012 Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

###########################################################################################################################
###															###
### Name:		setup_vendorcode										###
###															###
### Author:		Edwin Hayes											###
###															###
### Date Created:	26-02-2012											###
###															###
### Type:		Bash Script											###
###															###
### Purpose:		Provides functions which checks to see if a specific source of vendor code (code provided by a	###
###			external party) is available for use, and packs or unpacks it as required.  Typically, this	###
###			vendor code will be in the form of a git repository, and so the terms 'packs' and 'unpacks' are	###
###			somewhat misleading, because 'unpacking' actually entails downloading a copy of the source, and	###
###			'packing' involves deleting the downloaded files.						###
###															###
###########################################################################################################################

TMP_CACHE=${TCPATH}/tmp

# Define the local and remote locations of the vendor sources.
VENDOR_MAVLINK_LOCAL=${TCPATH}/res/vendor/mavlink
VENDOR_MAVLINK_REMOTE="https://github.com/mavlink/mavlink.git"

VENDOR_FREERTOS_LOCAL=${TCPATH}/res/vendor/freertos
VENDOR_FREERTOS_REMOTE="http://sourceforge.net/projects/freertos/files/latest/download?source=files"

VENDOR_NUTTX_LOCAL=${TCPATH}/res/vendor/nuttx
VENDOR_NUTTX_REMOTE="git://git.code.sf.net/p/nuttx/git"

VENDOR_LM4TOOLS_LOCAL=${TCPATH}/res/vendor/lm4tools
VENDOR_LM4TOOLS_REMOTE="https://github.com/utzig/lm4tools.git"

VENDOR_STLINK_LOCAL=${TCPATH}/res/vendor/stlink
VENDOR_STLINK_REMOTE="https://github.com/texane/stlink.git"

VENDOR_ASTYLE_LOCAL=${TCPATH}/res/vendor
VENDOR_ASTYLE_REMOTE="http://sourceforge.net/projects/astyle/files/latest/download?source=files"

VENDOR_UNCRUSTIFY_LOCAL=${TCPATH}/res/vendor
VENDOR_UNCRUSTIFY_REMOTE="http://sourceforge.net/projects/uncrustify/files/latest/download?source=files"

VENDOR_OCLINT_LOCAL=${TCPATH}/res/vendor
VENDOR_OCLINT_REMOTE="http://archives.oclint.org/releases/0.8/oclint-0.8.1-x86_64-linux-3.13.0-35-generic.tar.gz"

VENDOR_PCREGREP_LOCAL=${TCPATH}/res/vendor
VENDOR_PCREGREP_REMOTE="http://archive.ubuntu.com/ubuntu/pool/main/p/pcre3/pcre3_8.35.orig.tar.gz"

######################################## FUNCTION #########################################
###											###
### NAME:		unpack_mavlink							###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		Checks if the MAVlink vendor source is available for use, and	###
###			if not, sets it up ready to go.					###
###											###
###########################################################################################

unpack_mavlink()
{
	# Check if the MAVlink repository has been downloaded already.
	if [ ! -d ${VENDOR_MAVLINK_LOCAL} ]; then
		# We need to clone the repository before we can use it.		
		echo -e "${CYAN}\tDownloading the MAVlink vendor source...\n${NO_COLOUR}"
		git clone --depth=1 ${VENDOR_MAVLINK_REMOTE} ${VENDOR_MAVLINK_LOCAL}
		echo -e ""
	else
		# Check if the directory is not actually a git repository, which would indicate something bad.
		if [ ! -d ${VENDOR_MAVLINK_LOCAL}/.git ]; then
			# The directory isn't a git repository, so something is very wrong.
			echo -e "${RED}The directory ${VENDOR_MAVLINK_LOCAL} is not a git repository.  Cannot unpack MAVlink source.\n${NO_COLOUR}"
			return 1
		else
			# The repository already exists, so just need to make sure it is up to date.
			echo -e "${CYAN}\tUpdating the MAVlink vendor source...\n${NO_COLOUR}"
			pushd ${VENDOR_MAVLINK_LOCAL} >/dev/null
			git pull
			echo -e ""
			popd >/dev/null
		fi
    	fi

	# TODO - Test that now the required files actually exist.

	# All done.
	return 0
}

######################################## FUNCTION #########################################
###											###
### NAME:		unpack_freertos							###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		Checks if the FreeRTOS vendor source is available for use, and	###
###			if not, sets it up ready to go.					###
###											###
###########################################################################################

unpack_freertos()
{
	# Check if the FreeRTOS source has been downloaded already.
	if [ ! -d ${VENDOR_FREERTOS_LOCAL} ]; then
		# We need to download and unpack the source before we can use it.
		echo -e "${CYAN}\tDownloading the FreeRTOS vendor source...\n${NO_COLOUR}"
		wget -O ${TMP_CACHE}/freertos_vendor.zip ${VENDOR_FREERTOS_REMOTE}
		unzip ${TMP_CACHE}/freertos_vendor.zip -d ${VENDOR_FREERTOS_LOCAL}
		if [ $? -ne 0 ]; then
			# We couldn't unzip the file, so something went wrong, and we abort.
			return 1
		fi
		echo -e ""

		# The newly unpacked directory will have some unhelpful nesting, so we flatten that.
		mv ${VENDOR_FREERTOS_LOCAL}/FreeRTOSV*/FreeRTOS/* ${VENDOR_FREERTOS_LOCAL}
		rm -rf ${VENDOR_FREERTOS_LOCAL}/FreeRTOSV*
	else
		# The source has already been downloaded.
		echo -e "${CYAN}\tFreeRTOS vendor source available...\n${NO_COLOUR}"

		# TODO - Maybe at some stage we might want to check if the existing files are up to date.
    	fi

	# TODO - Test that now the required files actually exist.

	# All done.
	return 0
}

######################################## FUNCTION #########################################
###											###
### NAME:		unpack_nuttx							###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		Checks if the NuttX vendor source is available for use, and	###
###			if not, sets it up ready to go.					###
###											###
###########################################################################################

unpack_nuttx()
{
	# Check if the NuttX source has been downloaded already
	if [ ! -d ${VENDOR_NUTTX_LOCAL} ]; then
		# We need to download the source before we can use it
		echo -e "${CYAN}\tDownloading the NuttX vendor source...\n${NO_COLOUR}"
		git clone --depth=1 ${VENDOR_NUTTX_REMOTE} ${VENDOR_NUTTX_LOCAL}
		echo -e ""
	else
		# Check if the directory is not actually a git repository, which would indicate something bad.
		if [ ! -d ${VENDOR_NUTTX_LOCAL}/.git ]; then
			# The directory isn't a git repository, so something is very wrong.
			echo -e "${RED}The directory ${VENDOR_NUTTX_LOCAL} is not a git repository. Cannot unpack NuttX source.\n${NO_COLOUR}"
			return 1
		else
			# The repository already exists, so just need to make sure it is up to date.
			echo -e "${CYAN}\tUpdating the NuttX vendor source...\n${NO_COLOUR}"
			pushd ${VENDOR_NUTTX_LOCAL} >/dev/null
			git pull
			echo -e ""
			popd >/dev/null
		fi
	fi

	# TODO - Test that now the required files actually exist.

	# All done.
	return 0
}

######################################## FUNCTION #########################################
###											###
### NAME:		unpack_lm4tools							###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		Checks if the lm4tools vendor source is available for use, and	###
###			if not, sets it up ready to go.					###
###											###
###########################################################################################

unpack_lm4tools()
{
	# Check if the lm4tools source has been downloaded already
	if [ ! -d ${VENDOR_LM4TOOLS_LOCAL} ]; then
		# We need to download the source before we can use it
		echo -e "${CYAN}\tDownloading the lm4tools vendor source...\n${NO_COLOUR}"
		git clone --depth=1 ${VENDOR_LM4TOOLS_REMOTE} ${VENDOR_LM4TOOLS_LOCAL}
		echo -e ""
	else
		# Check if the directory is not actually a git repository, which would indicate something bad.
		if [ ! -d ${VENDOR_LM4TOOLS_LOCAL}/.git ]; then
			# The directory isn't a git repository, so something is very wrong.
			echo -e "${RED}The directory ${VENDOR_LM4TOOLS_LOCAL} is not a git repository. Cannot unpack lm4tools source.\n${NO_COLOUR}"
			return 1
		else
			# The repository already exists, so just need to make sure it is up to date.
			echo -e "${CYAN}\tUpdating the lm4tools vendor source...\n${NO_COLOUR}"
			pushd ${VENDOR_LM4TOOLS_LOCAL} >/dev/null
			git pull
			echo -e ""
			popd >/dev/null
		fi
	fi

	# TODO - Test that now the required files actually exist.

	# All done.
	return 0
}

######################################## FUNCTION #########################################
###											###
### NAME:		unpack_vendor_stlink						###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		Checks if the STlink vendor source is available for use, and	###
###			if not, sets it up ready to go.					###
###											###
###########################################################################################

unpack_vendor_stlink()
{
	# TODO - This.

	# Check if the STLink repository has been downloaded already.
	if [ ! -d ${VENDOR_STLINK_LOCAL} ]; then
		# We need to clone the repository before we can use it.		
		echo -e "${CYAN}\tDownloading the STLink vendor source...\n${NO_COLOUR}"
		git clone --depth=1 ${VENDOR_STLINK_REMOTE} ${VENDOR_STLINK_LOCAL}
		echo -e ""
	else
		# Check if the directory is not actually a git repository, which would indicate something bad.
		if [ ! -d ${VENDOR_STLINK_LOCAL}/.git ]; then
			# The directory isn't a git repository, so something is very wrong.
			echo -e "${RED}The directory ${VENDOR_STLINK_LOCAL} is not a git repository.  Cannot unpack STLink source.\n${NO_COLOUR}"
			return 1
		else
			# The repository already exists, so just need to make sure it is up to date.
			echo -e "${CYAN}\tUpdating the STLink vendor source...\n${NO_COLOUR}"
			pushd ${VENDOR_STLINK_LOCAL} >/dev/null
			git pull
			echo -e ""
			popd >/dev/null
		fi
    	fi

	# TODO - Test that now the required files actually exist.

	# All done.
	return 0
}

######################################## FUNCTION #########################################
###											###
### NAME:		unpack_vendor_astyle						###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		Checks if astyle is available for use, and			###
###			if not, sets it up ready to go.					###
###											###
###########################################################################################

unpack_vendor_astyle()
{
	# Check if the astyle source has been downloaded already.
	if [ ! -d ${VENDOR_ASTYLE_LOCAL}/astyle ]; then
		# We need to download and unpack the source before we can use it.
		echo -e "${CYAN}\tDownloading the astyle vendor source...\n${NO_COLOUR}"
		wget -O ${TMP_CACHE}/astyle_vendor.tar.gz ${VENDOR_ASTYLE_REMOTE}
		tar -xzf ${TMP_CACHE}/astyle_vendor.tar.gz -C ${VENDOR_ASTYLE_LOCAL}
		if [ $? -ne 0 ]; then
			# We couldn't unzip the file, so something went wrong, and we abort.
			echo -e "\n${RED}ERROR - Failed to extract astyle_vendor.tar.gz\n${NO_COLOUR}"
			return 1
		fi
		echo -e ""

		# The newly unpacked directory will have some unhelpful nesting, so we flatten that.
		pushd "${VENDOR_ASTYLE_LOCAL}/astyle/build/gcc" >/dev/null
		make
		
		# Check if making worked.
		if [ $? != 0 ]; then
			# Something went wrong.
			echo -e "\n${RED}ERROR - Failed to build AStyle.\n${NO_COLOUR}"
			popd >/dev/null
			return 1
		fi
		popd >/dev/null
	else
		# The source has already been downloaded.
		echo -e "${CYAN}\tAstyle available...\n${NO_COLOUR}"
    	fi

	# TODO - Test that now the required files actually exist.

	# All done.
	return 0
}

######################################## FUNCTION #########################################
###											###
### NAME:		unpack_vendor_uncrustify					###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		Checks if uncrustify is available for use, and			###
###			if not, sets it up ready to go.					###
###											###
###########################################################################################

unpack_vendor_uncrustify()
{
	# Check if the uncrustify source has been downloaded already.
	if [ ! -d ${VENDOR_UNCRUSTIFY_LOCAL}/uncrustify* ]; then
		# We need to download and unpack the source before we can use it.
		echo -e "${CYAN}\tDownloading the Uncrustify vendor source...\n${NO_COLOUR}"
		wget -O ${TMP_CACHE}/uncrustify_vendor.tar.gz ${VENDOR_UNCRUSTIFY_REMOTE}
		tar -xzf ${TMP_CACHE}/uncrustify_vendor.tar.gz -C ${VENDOR_UNCRUSTIFY_LOCAL}
		if [ $? -ne 0 ]; then
			# We couldn't unzip the file, so something went wrong, and we abort.
			echo -e "\n${RED}ERROR - Failed to extract uncrustify_vendor.tar.gz\n${NO_COLOUR}"
			return 1
		fi
		echo -e ""

		pushd ${VENDOR_UNCRUSTIFY_LOCAL}/uncrustify* >/dev/null
		${VENDOR_UNCRUSTIFY_LOCAL}/uncrustify*/configure
		
		# Check if configuring worked.
		if [ $? != 0 ]; then
			# Something went wrong.
			echo -e "\n${RED}ERROR - Failed to build Uncrustify: the 'configure' stage failed.\n${NO_COLOUR}"
			popd >/dev/null
			return 1
		fi
		# Then we make.
		make
	
		# Check if making worked.
		if [ $? != 0 ]; then
			# Something went wrong.
			echo -e "\n${RED}ERROR - Failed to build Uncrustify: the 'make' stage failed.\n${NO_COLOUR}"
			popd >/dev/null
			return 1
		fi
		popd >/dev/null
	else
		# The source has already been downloaded.
		echo -e "${CYAN}\tUncrustify available...\n${NO_COLOUR}"

		# TODO - Maybe at some stage we might want to check if the existing files are up to date.
    	fi

	# TODO - Test that now the required files actually exist.

	# All done.
	return 0
}

######################################## FUNCTION #########################################
###											###
### NAME:		unpack_vendor_oclint						###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		Checks if OCLint is available for use, and			###
###			if not, sets it up ready to go.					###
###											###
###########################################################################################

unpack_vendor_oclint()
{
	# Check if oclint source has been downloaded already.
	if [ ! -d ${VENDOR_OCLINT_LOCAL}/oclint-* ]; then
		# We need to download and unpack the source before we can use it.
		echo -e "${CYAN}\tDownloading the OCLint vendor source...\n${NO_COLOUR}"
		wget -O ${TMP_CACHE}/oclint_vendor.tar.gz ${VENDOR_OCLINT_REMOTE}
		tar -xzf ${TMP_CACHE}/oclint_vendor.tar.gz -C ${VENDOR_OCLINT_LOCAL}
		if [ $? -ne 0 ]; then
			# We couldn't unzip the file, so something went wrong, and we abort.
			echo -e "\n${RED}ERROR - Failed to extract oclint_vendor.tar.gz\n${NO_COLOUR}"
			return 1
		fi
		echo -e ""

		# Set the environmental variable for OCLint.
		OCLINT_HOME=${VENDOR_OCLINT_LOCAL}/oclint-0.8.1
		export PATH=$OCLINT_HOME/bin:$PATH

		pushd ${VENDOR_OCLINT_LOCAL}/oclint-0.8.1/lib/oclint/rules/

		# List of all the rules implemented by OCLint.
		files=(*.so)

		# Array with the list of rules of interest to us.
		req_rules_list=(libDeadCodeRule.so libForLoopShouldBeWhileLoopRule.so libGotoStatementRule.so libMultipleUnaryOperatorRule.so libReturnFromFinallyBlockRule.so libThrowExceptionFromFinallyBlockRule.so libDefaultLabelNotLastInSwitchStatementRule.so libInvertedLogicRule.so libJumbledIncrementerRule.so libMissingBreakInSwitchStatementRule.so libNonCaseLabelInSwitchStatementRule.so libSwitchStatementsShouldHaveDefaultRule.so libEmptyElseBlockRule.so libEmptyIfStatementRule.so libEmptyForStatementRule.so libEmptyTryStatementRule.so libEmptyCatchStatementRule.so libEmptyWhileStatementRule.so libEmptySwitchStatementRule.so libEmptyDoWhileStatementRule.so libEmptyFinallyStatementRule.so libLongVariableNameRule.so libRedundantConditionalOperatorRule.so libRedundantIfStatementRule.so libRedundantLocalVariableRule.so libUselessParenthesesRule.so libUnusedLocalVariableRule.so libUnusedMethodParameterRule.so libTooManyParametersRule.so)

		# Array to hold list of rules to be deleted.
		del_rules_list=()

		# Obtain and delete the rules that are not required.
		for item1 in "${files[@]}"; do
		    for item2 in "${req_rules_list[@]}"; do
		        [[ $item1 == "$item2" ]] && continue 2
		    done
		    rm $item1
		done
		popd >/dev/null 		
	else
		# The source has already been downloaded.
		echo -e "${CYAN}\tOCLint available...\n${NO_COLOUR}"

		# TODO - Maybe at some stage we might want to check if the existing files are up to date.
    	fi

	# TODO - Test that now the required files actually exist.

	# All done.
	return 0
}

######################################## FUNCTION #########################################
###											###
### NAME:		unpack_vendor_pcregrep						###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		Checks if uncrustify is available for use, and			###
###			if not, sets it up ready to go.					###
###											###
###########################################################################################

unpack_vendor_pcregrep()
{
	# Check if pcregrep has been downloaded already.
	if [ ! -d ${VENDOR_PCREGREP_LOCAL}/pcre-8.35 ]; then
		# We need to download and unpack the source before we can use it.
		echo -e "${CYAN}\tDownloading pcregrep...\n${NO_COLOUR}"
		wget -O ${TMP_CACHE}/pcre_vendor.tar.gz ${VENDOR_PCREGREP_REMOTE}
		tar -xzf ${TMP_CACHE}/pcre_vendor.tar.gz -C ${VENDOR_PCREGREP_LOCAL}
		if [ $? -ne 0 ]; then
			# We couldn't unzip the file, so something went wrong, and we abort.
			echo -e "\n${RED}ERROR - Failed to extract pcre_vendor.tar.gz\n${NO_COLOUR}"
			return 1
		fi
		echo -e ""

		pushd ${VENDOR_PCREGREP_LOCAL}/pcre-8.35 >/dev/null
		${VENDOR_PCREGREP_LOCAL}/pcre-8.35/configure
		
		# Check if configuring worked.
		if [ $? != 0 ]; then
			# Something went wrong.
			echo -e "\n${RED}ERROR - Failed to build Pcregrep: the 'configure' stage failed.\n${NO_COLOUR}"
			popd >/dev/null
			return 1
		fi
		# Then we make.
		make
	
		# Check if making worked.
		if [ $? != 0 ]; then
			# Something went wrong.
			echo -e "\n${RED}ERROR - Failed to build Pcregrep: the 'make' stage failed.\n${NO_COLOUR}"
			popd >/dev/null
			return 1
		fi
		popd >/dev/null
	else
		# The source has already been downloaded.
		echo -e "${CYAN}\tPcregrep available...\n${NO_COLOUR}"

		# TODO - Maybe at some stage we might want to check if the existing files are up to date.
    	fi

	# TODO - Test that now the required files actually exist.

	# All done.
	return 0
}

######################################## FUNCTION #########################################
###											###
### NAME:		pack_allv							###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		For each vendor source which was previously unpacked, packs	###
###			those sources back again.					###
###											###
###########################################################################################

pack_allv()
{
	# Just pack each of the vendor sources in turn.
	pack_mavlink
	pack_freertos
	pack_vendor_nuttx
	pack_vendor_lm4tools
	pack_vendor_stlink
	pack_vendor_astyle
	pack_vendor_uncrustify
	pack_vendor_oclint
	pack_vendor_pcregrep
}

######################################## FUNCTION #########################################
###											###
### NAME:		pack_mavlink							###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		Checks if the MAVlink vendor source was previously unpacked,	###
###			and if it was, then packs it back up again.			###
###											###
###########################################################################################

pack_mavlink()
{
	# Check if the MAVlink repository has been downloaded already.
	if [ -d ${VENDOR_MAVLINK_LOCAL} ]; then
		# We just delete the downloaded clone of the repository.		
		echo -e "${CYAN}\tCleaning up MAVlink vendor source...\n${NO_COLOUR}"
		rm -Rf ${VENDOR_MAVLINK_LOCAL}
    	fi
		# Else, the source is already packed.

	# All done.
	return	
}

######################################## FUNCTION #########################################
###											###
### NAME:		pack_freertos							###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		Checks if the FreeRTOS vendor source was previously unpacked,	###
###			and if it was, then packs it back up again.			###
###											###
###########################################################################################

pack_freertos()
{
	# Check if the FreeRTOS repository has been downloaded already.
	if [ -d ${VENDOR_FREERTOS_LOCAL} ]; then
		# We just delete the downloaded clone of the repository.		
		echo -e "${CYAN}\tCleaning up FreeRTOS vendor source...\n${NO_COLOUR}"
		rm -Rf ${VENDOR_FREERTOS_LOCAL}
    	fi
		# Else, the source is already packed.

	# All done.
	return	
}

######################################## FUNCTION #########################################
###											###
### NAME:		pack_nuttx							###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		Checks if the NuttX vendor source was previously unpacked,	###
###			and if it was, then packs it back up again.			###
###											###
###########################################################################################

pack_vendor_nuttx()
{
	# Check if the NuttX repository has been downloaded already.
	if [ -d ${VENDOR_NUTTX_LOCAL} ]; then
		# We just delete the downloaded clone of the repository.
		echo -e "${CYAN}\tCleaning up the NuttX vendor source...\n${NO_COLOUR}"
		rm -Rf ${VENDOR_NUTTX_LOCAL}
	fi
	# Else, the source is already packed.

	# All done.
	return
}

######################################## FUNCTION #########################################
###											###
### NAME:			pack_vendor_lm4tools					###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		Checks if the lm4tools vendor source was previously unpacked,	###
###			and if it was, then packs it back up again.			###
###											###
###########################################################################################

pack_vendor_lm4tools()
{
	# Check if the lm4tools repository has been downloaded already.
	if [ -d ${VENDOR_LM4TOOLS_LOCAL} ]; then
		# We just delete the downloaded clone of the repository.		
		echo -e "${CYAN}\tCleaning up lm4tools vendor source...\n${NO_COLOUR}"
		rm -Rf ${VENDOR_LM4TOOLS_LOCAL}
    	fi
		# Else, the source is already packed.

	# All done.
	return	
}

######################################## FUNCTION #########################################
###											###
### NAME:		pack_vendor_stlink						###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		Checks if the STLink vendor source was previously unpacked,	###
###			and if it was, then packs it back up again.			###
###											###
###########################################################################################

pack_vendor_stlink()
{
	# Check if the STLink repository has been downloaded already.
	if [ -d ${VENDOR_STLINK_LOCAL} ]; then
		# We just delete the downloaded clone of the repository.		
		echo -e "${CYAN}\tCleaning up STLink vendor source...\n${NO_COLOUR}"
		rm -Rf ${VENDOR_STLINK_LOCAL}
    	fi
		# Else, the source is already packed.

	# All done.
	return	
}

######################################## FUNCTION #########################################
###											###
### NAME:		pack_vendor_astyle						###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		Checks if astyle was previously unpacked,			###
###			and if it was, then packs it back up again.			###
###											###
###########################################################################################

pack_vendor_astyle()
{
	# Check if astyle source has been downloaded already.
	if [ -d ${VENDOR_ASTYLE_LOCAL} ]; then
		# We just delete the downloaded tar file and source files of astyle.		
		echo -e "${CYAN}\tCleaning up Astyle source...\n${NO_COLOUR}"
		rm -Rf ${VENDOR_ASTYLE_LOCAL}/astyle
		rm ${TMP_CACHE}/astyle_vendor.tar.gz
    	fi
		# Else, the source is already packed.

	# All done.
	return	
}

######################################## FUNCTION #########################################
###											###
### NAME:		pack_vendor_uncrustify						###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		Checks if uncrustify was previously unpacked,			###
###			and if it was, then packs it back up again.			###
###											###
###########################################################################################

pack_vendor_uncrustify()
{
	# Check if uncrustify source has been downloaded already.
	if [ -d ${VENDOR_UNCRUSTIFY_LOCAL} ]; then
		# We just delete the downloaded tar file and source files of uncrustify.		
		echo -e "${CYAN}\tCleaning up Uncrustify source...\n${NO_COLOUR}"
		rm -Rf ${VENDOR_UNCRUSTIFY_LOCAL}/uncrustify*
		rm ${TMP_CACHE}/uncrustify_vendor.tar.gz
    	fi
		# Else, the source is already packed.

	# All done.
	return	
}

######################################## FUNCTION #########################################
###											###
### NAME:		pack_vendor_oclint						###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		Checks if oclint was previously unpacked,			###
###			and if it was, then packs it back up again.			###
###											###
###########################################################################################

pack_vendor_oclint()
{
	# Check if oclint source has been downloaded already.
	if [ -d ${VENDOR_OCLINT_LOCAL} ]; then
		# We just delete the downloaded tar file and source files of oclint.		
		echo -e "${CYAN}\tCleaning up OCLint source...\n${NO_COLOUR}"
		rm -Rf ${VENDOR_OCLINT_LOCAL}/oclint-*
		rm ${TMP_CACHE}/oclint_vendor.tar.gz
    	fi
		# Else, the source is already packed.

	# All done.
	return	
}

######################################## FUNCTION #########################################
###											###
### NAME:		pack_vendor_pcregrep						###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		Checks if pcregrep was previously unpacked,			###
###			and if it was, then packs it back up again.			###
###											###
###########################################################################################

pack_vendor_pcregrep()
{
	# Check if pcregrep has been downloaded already.
	if [ -d ${VENDOR_PCREGREP_LOCAL} ]; then
		# We just delete the downloaded tar file and source files of pcregrep.		
		echo -e "${CYAN}\tCleaning up pcregrep source...\n${NO_COLOUR}"
		rm -Rf ${VENDOR_PCREGREP_LOCAL}/pcre-8.35
		rm ${TMP_CACHE}/pcregrep_vendor.tar.gz
    	fi
		# Else, the source is already packed.

	# All done.
	return	
}

# ALL DONE.
