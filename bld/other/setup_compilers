#!/bin/bash

#	Copyright (C) 2012 Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

###########################################################################################################################
###															###
### Name:		setup_compilers											###
###															###
### Author:		Edwin Hayes											###
###															###
### Date Created:	26-02-2012											###
###															###
### Type:		Bash Script											###
###															###
### Purpose:		Provides functions which checks to see if a specific compiler (and the other bits of its	###
###			matching toolchain) are set up and ready to go, and if not, sets it up.  Also offers functions	###
###			to 'un-set' each compiler once it is no longer required.					###
###															###
###########################################################################################################################

# DEFINE VARIABLES.

TMP_COMPILER_DIR="${TCPATH}/tmp/tmp_compiler"

######################################## FUNCTION #########################################
###											###
### NAME:		unpack_avrc							###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		Checks if the AVR compiler (and associated toolchain) is	###
###			available for use, and if not, sets it up ready to go.		###
###											###
###########################################################################################

unpack_avrc()
{
	# TODO - At the moment, this doesn't do anything.

	# The compiler is already set to go.
	echo -e "${CYAN}AVR compiler available.\n${NO_COLOUR}"

	# TODO - Test the now the required executables actually exist.

	# All done.
	return 0
}

######################################## FUNCTION #########################################
###											###
### NAME:		unpack_avr32c							###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		Checks if the AVR32 compiler (and associated toolchain) is	###
###			available for use, and if not, sets it up ready to go.		###
###											###
###########################################################################################

unpack_avr32c()
{
	# Check if the AVR32 compiler has been uncompressed already.
	if [ ! -d $TCPATH/res/avr32/avr32comp ]; then
		# We need to uncompress the compiler before we continue.		
		echo -e "${CYAN}Uncompressing the AVR32 compiler and libraries...\n${NO_COLOUR}"
		tar -C $TCPATH/res/avr32 -xf  $TCPATH/res/avr32/avr32comp.tar
	else
		# The compiler is already set to go.
		echo -e "${CYAN}AVR32 compiler available.\n${NO_COLOUR}"
    	fi

	# TODO - Test the now the required executables actually exist.

	# All done.
	return 0
}

######################################## FUNCTION #########################################
###											###
### NAME:		unpack_armc							###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		Checks if the ARM compiler (and associated toolchain) is	###
###			available for use, and if not, sets it up ready to go.		###
###											###
###########################################################################################

unpack_armc()
{
	# TODO - At the moment, this doesn't do anything.

	# The compiler is already set to go.
	echo -e "${CYAN}ARM compiler available.\n${NO_COLOUR}"

	# TODO - Test the now the required executables actually exist.

	# All done.
	return 0
}

######################################## FUNCTION #########################################
###											###
### NAME:		unpack_embeddedarmc						###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		Checks if the embedded ARM compiler (and associated toolchain)	###
###			is available for use, and if not, sets it up ready to go.  This	###
###			is the compiler used for Cortex devices such as STM32.  	###
###											###
###########################################################################################

unpack_embeddedarmc()
{
	# Check to see if the embedded arm compiler is already available.

	# Check if there is a cached copy of the compiler.
	if [ -f "${TMP_COMPILER_DIR}/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-gcc" ]; then
		# TODO - Probably should check that the other files are present.

		# We don't need to do anything, since a compiler is already ready to go.
		echo -e "${CYAN}Embedded ARM compiler (already) available.\n${NO_COLOUR}"
	else
		# The compiler isn't ready, so we need to unpack one.

		# Because building the compiler from source is REALLY slow, we look to see if there is already a suitable compiler installed.
		if command -v arm-none-eabi-gcc >/dev/null 2>&1; then
			# Looks like there is already a compiler installed, so we'll just link to it.
			echo -e "${CYAN}Linking to existing embedded ARM compiler installation...\n${NO_COLOUR}"
			mkdir -p "${TMP_COMPILER_DIR}/embeddedarm/gcc-arm-none-eabi/install-native/bin"
			ln -s `which arm-none-eabi-gcc` "${TMP_COMPILER_DIR}/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-gcc"
			ln -s `which arm-none-eabi-objcopy` "${TMP_COMPILER_DIR}/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-objcopy"
			ln -s `which arm-none-eabi-objdump` "${TMP_COMPILER_DIR}/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-objdump"
			ln -s `which arm-none-eabi-size` "${TMP_COMPILER_DIR}/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-size"

			# TODO - Probably need to link some files other than just GCC.

			# We should be all good to go now.
			echo -e "${CYAN}Embedded ARM compiler available.\n${NO_COLOUR}"
		else
			# We'll need to download and build the compiler ourselves.  This will be slow.
			echo -e "${CYAN}No existing embedded ARM compiler found.  We'll download the source and build one.  This might take some time.\n${NO_COLOUR}"
			mkdir -p "${TMP_COMPILER_DIR}/embeddedarm"

			# Download the source.
			echo -e "${CYAN}Downloading embedded ARM compiler source...\n${NO_COLOUR}"
			wget -nc -O "${TMP_COMPILER_DIR}/embeddedarm/gcc-arm-none-eabi-src.tar.bz2" "https://launchpad.net/gcc-arm-embedded/4.7/4.7-2013-q1-update/+download/gcc-arm-none-eabi-4_7-2013q1-20130313-src.tar.bz2"
			echo ""
			
			# Unpack the source.
			echo -e "${CYAN}Unpacking the source...\n${NO_COLOUR}"
			rm -rf "${TMP_COMPILER_DIR}/embeddedarm/gcc-arm-none-eabi"
			tar -xjf "${TMP_COMPILER_DIR}/embeddedarm/gcc-arm-none-eabi-src.tar.bz2" -C "${TMP_COMPILER_DIR}/embeddedarm/"
			mv "${TMP_COMPILER_DIR}/embeddedarm/gcc-arm-none-eabi-4_7-2013q1-20130313" "${TMP_COMPILER_DIR}/embeddedarm/gcc-arm-none-eabi"
			pushd "${TMP_COMPILER_DIR}/embeddedarm/gcc-arm-none-eabi/src" >/dev/null
				# NOTE - We test if this command works at the moment, because if it doesn't, then bad things happen in the next line.
			if [ ${PWD} == "${TMP_COMPILER_DIR}/embeddedarm/gcc-arm-none-eabi/src" ]; then
				# We are in the newly created directly, which contains futher source files to unpack.				
				find -name '*.tar.*' | xargs -I% tar -xf %
				popd >/dev/null
			else
				# Somehow we didn't end up in the newly created directory.  All we can do is bail.
				echo -e "${RED}FATAL ERROR - Something went wrong during the unpacking processs.  Abandon ship!\n${NO_COLOUR}"
				return 1
			fi

			# Patch the source so that it actually works properly.
			echo -e "${CYAN}Applying patches to the source...\n${NO_COLOUR}"
			pushd "${TMP_COMPILER_DIR}/embeddedarm/gcc-arm-none-eabi/src/zlib-1.2.5" >/dev/null
			patch -p1 <../zlib-1.2.5.patch
			popd >/dev/null
			cp "${TCPATH}/res/arm/embedded-arm/build-common.sh.patch" "${TMP_COMPILER_DIR}/embeddedarm/gcc-arm-none-eabi/build-common.sh.patch"
			cp "${TCPATH}/res/arm/embedded-arm/build-prerequisites.sh.patch" "${TMP_COMPILER_DIR}/embeddedarm/gcc-arm-none-eabi/build-prerequisites.sh.patch"
			pushd "${TMP_COMPILER_DIR}/embeddedarm/gcc-arm-none-eabi" >/dev/null
			patch < "build-common.sh.patch"
			patch < "build-prerequisites.sh.patch"
			popd >/dev/null
			echo ""

			# Build the dependencies for the embedded ARM toolchain.
			echo -e "${CYAN}Building embedded ARM toolchain dependencies...\n${NO_COLOUR}"
			pushd "${TMP_COMPILER_DIR}/embeddedarm/gcc-arm-none-eabi" >/dev/null
			${TMP_COMPILER_DIR}/embeddedarm/gcc-arm-none-eabi/build-prerequisites.sh --skip_mingw32		
			# Check if building the dependencies worked.
			if [ $? != 0 ]; then
				# Something went wrong.
				echo -e "\n${RED}ERROR - Failed to build embedded ARM compiler dependencies.\n${NO_COLOUR}"
				popd >/dev/null
				return 1
			fi
			popd >/dev/null
			echo ""

			# Build the actual embedded ARM toolchain.  This takes quite a long time.
			echo -e "${CYAN}Building embedded ARM toolchain...\n${NO_COLOUR}"
			pushd "${TMP_COMPILER_DIR}/embeddedarm/gcc-arm-none-eabi" >/dev/null
			${TMP_COMPILER_DIR}/embeddedarm/gcc-arm-none-eabi/build-toolchain.sh --skip_mingw32
			# Check if building the dependencies worked.
			if [ $? != 0 ]; then
				# Something went wrong.
				echo -e "\n${RED}ERROR - Failed to build embedded ARM compiler dependencies.\n${NO_COLOUR}"
				popd >/dev/null
				return 1
			fi
			popd >/dev/null
			echo ""
		
			# We should be all good to go now.
			echo -e "${CYAN}Embedded ARM compiler available.\n${NO_COLOUR}"
		fi
	fi

	# TODO - Test the now the required executables actually exist.

	# All done.
	return 0
}

######################################## FUNCTION #########################################
###											###
### NAME:		unpack_arduinoc							###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		Checks if the Arduino compiler (and associated toolchain) is	###
###			available for use, and if not, sets it up ready to go.  Note	###
###			that because Arduino uses an old version of avr-gcc, and that	###
###			some projects won't compile on newer versions, that this isn't	###
###			the same as the regular AVR compiler.				###
###											###
###########################################################################################

unpack_arduinoc()
{
	# Check to see if the Arduino compiler is already available.

	# Check if there is a cached copy of the compiler.
	if [ -f "${TMP_COMPILER_DIR}/arduino/arduino-dist/arduino" ]; then
		# TODO - Probably should check that the other files are present.

		# We don't need to do anything, since a compiler is already ready to go.
		echo -e "${CYAN}Arduino compiler (already) available.\n${NO_COLOUR}"

	else
		# The compiler isn't ready, so we need to unpack one.

		# We'll need to download the compiler ourselves.  Rather than building it, we'll cheat and get a binary version.
		echo -e "${CYAN}No existing Arduino compiler found.  We'll download a suitable version.\n${NO_COLOUR}"
		rm -rf "${TMP_COMPILER_DIR}/arduino"
		mkdir -p "${TMP_COMPILER_DIR}/arduino"

		# NOTE - Because we're downloading a release version, we are just guessing that the host computer is x86_64 Linux.

		# TODO - Fix this.

		# Download the release.
		echo -e "${CYAN}Downloading Arduino IDE release...\n${NO_COLOUR}"
		wget -nc -O "${TMP_COMPILER_DIR}/arduino/arduino.tgz" "http://downloads.arduino.cc/arduino-1.5.4-linux64.tgz"
		echo ""
			
		# Unpack the release.
		echo -e "${CYAN}Unpacking the release...\n${NO_COLOUR}"
		tar -xzf "${TMP_COMPILER_DIR}/arduino/arduino.tgz" -C "${TMP_COMPILER_DIR}/arduino/"
		mv "${TMP_COMPILER_DIR}/arduino/arduino-1.5.4" "${TMP_COMPILER_DIR}/arduino/arduino-dist"
			
		# We should be all good to go now.
		echo -e "${CYAN}Arduino compiler available.\n${NO_COLOUR}"
	fi

	# TODO - Test that now the required files actually exist.

	# All done.
	return 0
}

######################################## FUNCTION #########################################
###											###
### NAME:		unpack_nativec							###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		Checks if the native build system is available for use, and if	###
###			not, sets it up ready to go.  This is required for parts of the	###
###			toolchain which come in source form and need to be compiled for	###
###			use, and for the test scaffold.					###
###											###
###########################################################################################

unpack_nativec()
{
	# TODO - At the moment, we just assume the native build system is good to go.

	# The compiler is already set to go.
	echo -e "${CYAN}Native compiler available.\n${NO_COLOUR}"

	# TODO - Test the now the required executables actually exist.

	# All done.
	return 0
}

######################################## FUNCTION #########################################
###											###
### NAME:		unpack_uploader							###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		Checks if the modular code uploading tool is available for use,	###
###			and if not, sets it up ready to go.				###
###											###
###########################################################################################

unpack_uploader()
{
	
	# We need to compile the uploader before we continue.		
	echo -e "${CYAN}Compiling the Uploader tool...\n${NO_COLOUR}"
	mkdir $TCPATH/tmp/uploader
	cp $TCPATH/res/common/uploader/*.cpp $TCPATH/tmp/uploader
	cp $TCPATH/res/common/uploader/*.hpp $TCPATH/tmp/uploader
	cp $TCPATH/res/common/uploader/*.h $TCPATH/tmp/uploader
	cp $TCPATH/res/common/uploader/Makefile $TCPATH/tmp/uploader
	cp $TCPATH/res/common/can_messages.hpp $TCPATH/tmp/uploader
	make -C $TCPATH/tmp/uploader all
	
	# NOTE - Don't put anything in here; we need the return value from 'make' below.

	# Check the return value from make, to determine if an error occurred during compilation.
	if [ $? != 0 ]; then
		# Something went wrong.
		echo -e "\n${RED}Compilation error.  Failed to build uploader.\n${NO_COLOUR}"
		return 1
	fi
	
	mkdir -p $TCPATH/res/common/uploader/bin
	cp $TCPATH/tmp/uploader/uploader $TCPATH/res/common/uploader/bin
	
	rm -rf $TCPATH/tmp/uploader

	if [ ! -f $TCPATH/res/common/uploader/bin/uploader ]; then
		echo -e "${RED}Uploader binary does not exist after compiling.\n${NO_COLOUR}"
		return 1
	fi
	
	echo -e ""

	# All done.
	return 0
}

######################################## FUNCTION #########################################
###											###
### NAME:		pack_allc							###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		For each compiler which was previously unpacked, packs those	###
###			compilers back again.						###
###											###
###########################################################################################

pack_allc()
{
	# Just pack each of the compilers in turn.
	pack_avrc
	pack_avr32c
	pack_armc
	pack_embeddedarm
	pack_arduinoc
	pack_nativec
	pack_uploader
}

######################################## FUNCTION #########################################
###											###
### NAME:		pack_avrc							###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		Doesn't do anything, for now.					###
###											###
###########################################################################################

pack_avrc()
{
	# For now, this doesn't do anything.

	# All done.
	return	
}

######################################## FUNCTION #########################################
###											###
### NAME:		pack_avr32c							###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		Checks if the AVR32 compiler was previously unpacked, and if it	###
###			was, then packs it back up again.				###
###											###
###########################################################################################

pack_avr32c()
{
	# Check if the AVR32 compiler has been uncompressed already.
	if [ -d $TCPATH/res/avr32/avr32comp ]; then
		# We just delete the uncompressed copy of the compiler.		
		echo -e "${CYAN}Cleaning up AVR32 compiler...\n${NO_COLOUR}"
		rm -Rf $TCPATH/res/avr32/avr32comp
    	fi
		# Else, the compiler is already packed.

	# All done.
	return	
}

######################################## FUNCTION #########################################
###											###
### NAME:		pack_armc							###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		Doesn't do anything, for now.					###
###											###
###########################################################################################

pack_armc()
{
	# For now, this doesn't do anything.

	# All done.
	return	
}

######################################## FUNCTION #########################################
###											###
### NAME:		pack_embeddedarmc						###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		Checks if the embedded ARM compiler was previously unpacked,	###
###			and if it was, then packs it up again.				###
###											###
###########################################################################################

pack_embeddedarmc()
{
	# Check if the embedded ARM compiler exists in the compiler cache directory.
	if [ -d "$TMP_COMPILER_DIR/embeddedarm" ]; then
		# We just delete the cached directory.
		echo -e "${CYAN}Cleaning up embedded ARM compiler...\n${NO_COLOUR}"
		rm -Rf "$TMP_COMPILER_DIR/embeddedarm"
    	fi
		# Else, the compiler is already packed.

	# All done.
	return	
}

######################################## FUNCTION #########################################
###											###
### NAME:		pack_arduinoc							###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		Checks if the Arduino compiler was previously unpacked,	and if	###
###			it was, then packs it up again.					###
###											###
###########################################################################################

pack_arduinoc()
{
	# Check if the Arduino compiler exists in the compiler cache directory.
	if [ -d "$TMP_COMPILER_DIR/arduino" ]; then
		# We just delete the cached directory.
		echo -e "${CYAN}Cleaning up Arduino compiler...\n${NO_COLOUR}"
		rm -Rf "$TMP_COMPILER_DIR/arduino"
    	fi
		# Else, the compiler is already packed.

	# All done.
	return	
}

######################################## FUNCTION #########################################
###											###
### NAME:		pack_nativec							###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		Doesn't do anything, for now.					###
###											###
###########################################################################################

pack_nativec()
{
	# For now, this doesn't do anything.

	# All done.
	return	
}

######################################## FUNCTION #########################################
###											###
### NAME:		pack_uploader							###
###											###
### Inputs/Outputs:	None.								###
###											###
### Purpose:		Checks if the uploader was previously unpacked, and if it	###
###			was, then packs it back up again.				###
###											###
###########################################################################################

pack_uploader()
{
	# Check if the uploader has been compiled already.
	if [ -d $TCPATH/res/common/uploader/bin ]; then
		# We just delete the binary.		
		echo -e "${CYAN}Cleaning up uploader...\n${NO_COLOUR}"
		rm -Rf $TCPATH/res/common/uploader/bin
    	fi
		# Else, the uploader is already packed.

	# All done.
	return	
}
