#!/bin/bash

#	Copyright (C) 2011 Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

###########################################################################################################################
###															###
### NAME:		preprocess											###
###															###
### Author:		Edwin Hayes											###
###															###
### Date Created:	03-12-2011											###
###															###
### Type:		Bash Script											###
###															###
### Purpose:		This script provides functions which implement preprocessing of source files.			###
###															###
###########################################################################################################################

######################################## FUNCTION #########################################
###											###
### NAME:		preprocess_template						###
###											###
### Inputs/Outputs:	A single input argument: the path to the file to process.	###
###											###
### Purpose:		Preprocesses a source file which have been newly created from  	###
###			a template file.  This preprocessing generally only affects the	###
###			commentary at the top of the file, and a few other bits.  Since	###
###			this preprocessing will be performed on a new template file 	###
###			before it is added to the src folder, the user will never see 	###
###			the unexpanded macros unless they actually edit the templates.  ###
###			If any macros in the template should NOT be expanded, then they	###
###			should be surrounded by inverted delimiters: >>> <<<		###
###			In this case, the preprocessor will simply reverse the 		###
###			delimiters, and leave the unexpanded macros in the source file, ###
###			ready to be expanded at compile time.				###
###											###
###			Requires that a valid build configuration has been loaded.	###
###											###
###########################################################################################

preprocess_template()
{	
	# Preprocess the files.
	echo -e "${CYAN}\tPreprocessing template file ${1##*/}...\n${NO_COLOUR}"

	# Check that the specified file exists.
	if [ ! -w $1 ]; then
		# The specified file is invalid, so bail.
		echo -e "\n${RED}ERROR - Invalid argument to preprocess_template.  File does not exist.\n${NO_COLOUR}"
		return
	fi

	# Check if the user configuration file exists. If not, generate one.
	# Check if the username is defined in the user config file.
	grep -q "tc_authname" ${TCPATH}/var/config.cfg
	if [ $? != 0 -o ! -f ${TCPATH}/var/config.cfg ]; then
		# Load the script containing the configuration wizard.
		source ${TCPATH}/bld/edit/edit_user_config
		echo -e "\n${RED}User configuration file does not exist. Starting wizard.\n${NO_COLOUR}"
		vf_config_wizard
	fi

	# Populate a variable with the users information, from the configuration file.
	local AUTHOR=$(grep -v "#" $TCPATH/var/config.cfg | grep tc_authname | cut -d '=' -f2)

	# Populate a string with the current date.
	local DATE=$(date +"%-d-%-m-%Y")

	# Figure out what the NAME of the file actually is.
	local NAME=${1##*/}
	local NAME=${NAME%.*}
	local EXT=${1##*.}

	# Hence determine what some other fields should become.
	if [ "$EXT" == "c" ]; then
		CEXT="c"
		HEXT="h"
	elif [ "$EXT" == "cpp" ]; then
		CEXT="cpp"
		HEXT="hpp"
	elif [ "$EXT" == "s" ]; then
		CEXT="s"
		HEXT=""
	elif [ "$EXT" == "h" ]; then
		CEXT="c"
		HEXT="h"
	elif [ "$EXT" == "hpp" ]; then
		CEXT="cpp"
		HEXT="hpp"
	else
		CEXT=""
		HEXT=""
	fi

	# Replace each instance of a macro in the template files with the corresponding information.

	sed -i "s^<<<TC_INSERTS_FILE_NAME_HERE>>>^$NAME.$EXT^g" $1
	sed -i "s^<<<TC_INSERTS_FILE_BASENAME_HERE>>>^$NAME^g" $1
	sed -i "s^<<<TC_INSERTS_H_FILE_NAME_HERE>>>^$NAME.$HEXT^g" $1
	sed -i "s^<<<TC_INSERTS_C_FILE_NAME_HERE>>>^$NAME.$CEXT^g" $1

	sed -i "s^<<<TC_INSERTS_COMPONENT_NAME_HERE>>>^$COMPONENT^g" $1
	sed -i "s^<<<TC_INSERTS_LIBRARY_NAME_HERE>>>^$LIBRARY^g" $1

	sed -i "s^<<<TC_INSERTS_SUBSYSTEM_HERE>>>^$SUBSYSTEM^g" $1
	sed -i "s^<<<TC_INSERTS_AUTHOR_NAME_HERE>>>^$AUTHOR^g" $1
	sed -i "s^<<<TC_INSERTS_DATE_HERE>>>^$DATE^g" $1

	sed -i "s^<<<TC_INSERTS_TARGET_HERE>>>^$TARGET^g" $1
	sed -i "s^<<<TC_INSERTS_PLATFORM_HERE>>>^$PLATFORM^g" $1

	sed -i "s^<<<TC_INSERTS_IO_FILE_NAME_HERE>>>^$IOHEADER^g" $1
	sed -i "s^<<<TC_INSERTS_STDINT_FILE_NAME_HERE>>>^$STDINTHEADER^g" $1

	# 	There are also upper-case versions of some of those same macros.

	# NOTE - We also remove special characters from the basename here, since we expect it to be used for macro definitions, where special characters are not allowed.

	NAME_WITHOUT_SPECIAL_CHARACTERS=${NAME//-/_}
	sed -i "s^<<<TC_INSERTS_UC_FILE_BASENAME_HERE>>>^${NAME_WITHOUT_SPECIAL_CHARACTERS^^}^g" $1
	NAME_WITHOUT_SPECIAL_CHARACTERS=

	sed -i "s^<<<TC_INSERTS_UC_COMPONENT_NAME_HERE>>>^${COMPONENT^^}^g" $1
	sed -i "s^<<<TC_INSERTS_UC_LIBRARY_NAME_HERE>>>^${LIBRARY^^}^g" $1

	# Re-reverse the delimiters for any macros with reversed delimiters.

	sed -i 's^>>>TC_INSERTS_FILE_NAME_HERE<<<^<<<TC_INSERTS_FILE_NAME_HERE>>>^g' $1
	sed -i 's^>>>TC_INSERTS_FILE_BASENAME_HERE<<<^<<<TC_INSERTS_FILE_BASENAME_HERE>>>^g' $1
	sed -i 's^>>>TC_INSERTS_H_FILE_NAME_HERE<<<^<<<TC_INSERTS_H_FILE_NAME_HERE>>>^g' $1
	sed -i 's^>>>TC_INSERTS_C_FILE_NAME_HERE<<<^<<<TC_INSERTS_C_FILE_NAME_HERE>>>^g' $1

	sed -i 's^>>>TC_INSERTS_COMPONENT_NAME_HERE<<<^<<<TC_INSERTS_COMPONENT_NAME_HERE>>>^g' $1
	sed -i 's^>>>TC_INSERTS_LIBRARY_NAME_HERE<<<^<<<TC_INSERTS_LIBRARY_NAME_HERE>>>^g' $1

	sed -i 's^>>>TC_INSERTS_SUBSYSTEM_HERE<<<^<<<TC_INSERTS_SUBSYSTEM_HERE>>>^g' $1
	sed -i 's^>>>TC_INSERTS_AUTHOR_NAME_HERE<<<^<<<TC_INSERTS_AUTHOR_NAME_HERE>>>^g' $1
	sed -i 's^>>>TC_INSERTS_DATE_HERE<<<^<<<TC_INSERTS_DATE_HERE>>>^g' $1

	sed -i 's^>>>TC_INSERTS_TARGET_HERE<<<^<<<TC_INSERTS_TARGET_HERE>>>^g' $1
	sed -i 's^>>>TC_INSERTS_PLATFORM_HERE<<<^<<<TC_INSERTS_PLATFORM_HERE>>>^g' $1
	
	sed -i 's^>>>TC_INSERTS_IO_FILE_NAME_HERE<<<^<<<TC_INSERTS_IO_FILE_NAME_HERE>>>^g' $1
	sed -i 's^>>>TC_INSERTS_STDINT_FILE_NAME_HERE<<<^<<<TC_INSERTS_STDINT_FILE_NAME_HERE>>>^g' $1

	# 	There are also upper-case versions of some of those same macros.

	sed -i "s^>>>TC_INSERTS_UC_FILE_BASENAME_HERE<<<^<<<TC_INSERTS_UC_FILE_BASENAME_HERE>>>^g" $1

	sed -i "s^>>>TC_INSERTS_UC_COMPONENT_NAME_HERE<<<^<<<TC_INSERTS_UC_COMPONENT_NAME_HERE>>>^g" $1
	sed -i "s^>>>TC_INSERTS_UC_LIBRARY_NAME_HERE<<<^<<<TC_INSERTS_UC_LIBRARY_NAME_HERE>>>^g" $1

	# All done.
	return 0
}

######################################## FUNCTION #########################################
###											###
### NAME:		preprocess_general						###
###											###
### Inputs/Outputs:	A single input argument: the path to the file to process.	###
###											###
### Purpose:		Preprocesses a single source file.				###
###											###
###			Requires that a valid build configuration has been loaded.	###
###											###
###########################################################################################

preprocess_general()
{
	# Preprocess the files.
	echo -e "${CYAN}\tPreprocessing file ${1##*/}...\n${NO_COLOUR}"

	# Check that the specified file exists.
	if [ ! -w $1 ]; then
		# The specified file is invalid, so bail.
		echo -e "${RED}ERROR - Invalid argument to preprocess_general.  File '$1' does not exist.\n${NO_COLOUR}"
		return
	fi

	# Check if the user configuration file exists. If not, generate one.
	# Check if the username is defined in the user config file.
	grep -q "tc_authname" ${TCPATH}/var/config.cfg
	if [ $? != 0 -o ! -f ${TCPATH}/var/config.cfg ]; then
		# Load the script containing the configuration wizard.
		source ${TCPATH}/bld/edit/edit_user_config
		echo -e "\n${RED}User configuration file does not exist. Starting wizard.\n${NO_COLOUR}"
		vf_config_wizard
	fi

	# Populate a variable with the users information, from the configuration file.
	local AUTHOR=$(grep -v "#" $TCPATH/var/config.cfg | grep tc_authname | cut -d '=' -f2)

	# Populate a string with the current date.
	local DATE=$(date +"%-d-%-m-%Y")

	# Figure out what the NAME of the file actually is.
	local NAME=${1##*/}
	local NAME=${NAME%.*}
	local EXT=${1##*.}

	# Hence determine what some other fields should become.
	if [ "$EXT" == "c" ]; then
		CEXT="c"
		HEXT="h"
	elif [ "$EXT" == "cpp" ]; then
		CEXT="cpp"
		HEXT="hpp"
	elif [ "$EXT" == "s" ]; then
		CEXT="s"
		HEXT=""
	elif [ "$EXT" == "h" ]; then
		CEXT="c"
		HEXT="h"
	elif [ "$EXT" == "hpp" ]; then
		CEXT="cpp"
		HEXT="hpp"
	else
		CEXT=""
		HEXT=""
	fi

	# Replace each instance of a macro in the template files with the corresponding information.

	sed -i "s^<<<TC_INSERTS_FILE_NAME_HERE>>>^$NAME.$EXT^g" $1
	sed -i "s^<<<TC_INSERTS_FILE_BASENAME_HERE>>>^$NAME^g" $1		
	sed -i "s^<<<TC_INSERTS_H_FILE_NAME_HERE>>>^$NAME.$HEXT^g" $1
	sed -i "s^<<<TC_INSERTS_C_FILE_NAME_HERE>>>^$NAME.$CEXT^g" $1

	sed -i "s^<<<TC_INSERTS_COMPONENT_NAME_HERE>>>^$COMPONENT^g" $1
	sed -i "s^<<<TC_INSERTS_LIBRARY_NAME_HERE>>>^$LIBRARY^g" $1

	sed -i "s^<<<TC_INSERTS_SUBSYSTEM_HERE>>>^$SUBSYSTEM^g" $1
	sed -i "s^<<<TC_INSERTS_AUTHOR_NAME_HERE>>>^$AUTHOR^g" $1
	sed -i "s^<<<TC_INSERTS_DATE_HERE>>>^$DATE^g" $1

	sed -i "s^<<<TC_INSERTS_TARGET_HERE>>>^$TARGET^g" $1
	sed -i "s^<<<TC_INSERTS_PLATFORM_HERE>>>^$PLATFORM^g" $1

	sed -i "s^<<<TC_INSERTS_IO_FILE_NAME_HERE>>>^$IOHEADER^g" $1
	sed -i "s^<<<TC_INSERTS_STDINT_FILE_NAME_HERE>>>^$STDINTHEADER^g" $1
	
	sed -i "s^<<<TC_INSERTS_CLK_SPEED_IN_MHZ_HERE>>>^$CLK_SPEED_IN_MHZ^g" $1

	sed -i "s^<<<TC_INSERTS_BOOTLOADER_TRAMPOLINE_TABLE_BASE_ADDRESS_HERE>>>^$BOOTLOADER_TRAMPOLINE_ADDRESS^g" $1
	sed -i "s^<<<TC_INSERTS_SHARED_FUNCTION_TABLE_BASE_ADDRESS_HERE>>>^$SHARED_FUNCTIONS_ADDRESS^g" $1

	# 	There are also upper-case versions of some of those same macros.

	# NOTE - We also remove special characters from the basename here, since we expect it to be used for macro definitions, where special characters are not allowed.

	NAME_WITHOUT_SPECIAL_CHARACTERS=${NAME//-/_}
	sed -i "s^<<<TC_INSERTS_UC_FILE_BASENAME_HERE>>>^${NAME_WITHOUT_SPECIAL_CHARACTERS^^}^g" $1
	NAME_WITHOUT_SPECIAL_CHARACTERS=

	sed -i "s^<<<TC_INSERTS_UC_COMPONENT_NAME_HERE>>>^${COMPONENT^^}^g" $1
	sed -i "s^<<<TC_INSERTS_UC_LIBRARY_NAME_HERE>>>^${LIBRARY^^}^g" $1

	# All done.
	return 0
}

######################################## FUNCTION #########################################
###											###
### NAME:		preprocess_bootloader						###
###											###
### Inputs/Outputs:	A single input argument: the path to the file to process.	###
###											###
### Purpose:		Preprocesses a single bootloader source file. Should not be	###
###			used to preprocess application code!				###
###											###
###			Requires that a valid bootloader build configuration has been	###
###			loaded.								###
###											###
###########################################################################################

preprocess_bootloader()
{
	# Preprocess the files.
	echo -e "${CYAN}\tPreprocessing bootloader file ${1##*/}...\n${NO_COLOUR}"

	# Check that the specified file exists.
	if [ ! -w $1 ]; then
		# The specified file is invalid, so bail.
		echo -e "\n${RED}ERROR - Invalid argument to preprocess_bootloader.  File does not exist.\n${NO_COLOUR}"
		return
	fi
	
	# Figure out what the NAME of the file actually is.
	local NAME=${1##*/}
	local NAME=${NAME%.*}
	local EXT=${1##*.}

	# Hence determine what some other fields should become.
	if [ "$EXT" == "c" ]; then
		CEXT="c"
		HEXT="h"
	elif [ "$EXT" == "cpp" ]; then
		CEXT="cpp"
		HEXT="hpp"
	elif [ "$EXT" == "s" ]; then
		CEXT="s"
		HEXT=""
	elif [ "$EXT" == "h" ]; then
		CEXT="c"
		HEXT="h"
	elif [ "$EXT" == "hpp" ]; then
		CEXT="cpp"
		HEXT="hpp"
	else
		CEXT=""
		HEXT=""
	fi

	# Replace each instance of a macro in the bootloader files with the corresponding information.

	sed -i "s^<<<TC_INSERTS_FILE_NAME_HERE>>>^$NAME.$EXT^g" $1
	sed -i "s^<<<TC_INSERTS_FILE_BASENAME_HERE>>>^$NAME^g" $1		
	sed -i "s^<<<TC_INSERTS_H_FILE_NAME_HERE>>>^$NAME.$HEXT^g" $1
	sed -i "s^<<<TC_INSERTS_C_FILE_NAME_HERE>>>^$NAME.$CEXT^g" $1

	sed -i "s^<<<TC_INSERTS_COMPONENT_NAME_HERE>>>^$NAME^g" $1

	sed -i "s^<<<TC_INSERTS_TARGET_HERE>>>^$TARGET^g" $1

	sed -i "s^<<<TC_INSERTS_IO_FILE_NAME_HERE>>>^$IOHEADER^g" $1
	sed -i "s^<<<TC_INSERTS_STDINT_FILE_NAME_HERE>>>^$STDINTHEADER^g" $1

	sed -i "s^<<<TC_INSERTS_BLINK_PORT_HERE>>>^$BLINK_PORT^g" $1
	sed -i "s^<<<TC_INSERTS_BLINK_PIN_HERE>>>^$BLINK_PIN^g" $1
	sed -i "s^<<<TC_INSERTS_LED_LOGIC_HERE>>>^$LED_LOGIC^g" $1
	sed -i "s^<<<TC_INSERTS_FORCE_BL_PORT_HERE>>>^$FORCE_BL_PORT^g" $1
	sed -i "s^<<<TC_INSERTS_FORCE_BL_PIN_HERE>>>^$FORCE_BL_PIN^g" $1
	sed -i "s^<<<TC_INSERTS_INPUT_LOGIC_HERE>>>^$INPUT_LOGIC^g" $1
	sed -i "s^<<<TC_INSERTS_CLK_SPEED_IN_MHZ_HERE>>>^$CLK_SPEED_IN_MHZ^g" $1
	sed -i "s^<<<TC_INSERTS_BOOTLOADER_ACTIVE_MODULE_HERE>>>^$ACTIVE_MODULE^g" $1
	sed -i "s^<<<TC_INSERTS_SHUTDOWN_STATE_MEM_HERE>>>^$SHUTDOWNSTATE_MEM^g" $1
	sed -i "s^<<<TC_INSERTS_CAN_BAUD_RATES_HERE>>>^$CAN_BAUD_RATES^g" $1
	sed -i "s^<<<TC_INSERTS_NODE_ID_HERE>>>^$NODE_ID^g" $1
	sed -i "s^<<<TC_INSERTS_SS_PORT_HERE>>>^$SS_PORT^g" $1
	sed -i "s^<<<TC_INSERTS_SS_PIN_HERE>>>^$SS_PIN^g" $1
	sed -i "s^<<<TC_INSERTS_SCK_PORT_HERE>>>^$SCK_PORT^g" $1
	sed -i "s^<<<TC_INSERTS_SCK_PIN_HERE>>>^$SCK_PIN^g" $1
	sed -i "s^<<<TC_INSERTS_MOSI_PORT_HERE>>>^$MOSI_PORT^g" $1
	sed -i "s^<<<TC_INSERTS_MOSI_PIN_HERE>>>^$MOSI_PIN^g" $1
	sed -i "s^<<<TC_INSERTS_INT_VECTOR_HERE>>>^$INT_VECTOR^g" $1
	sed -i "s^<<<TC_INSERTS_INT_VECTOR_CONFIG_NUMBER_HERE>>>^$INT_VECTOR_CONFIG_NUMBER^g" $1
	sed -i "s^<<<TC_INSERTS_INT_NUMBER_HERE>>>^$INT_NUMBER^g" $1
	sed -i "s^<<<TC_INSERTS_INT_PORT_HERE>>>^$INT_PORT^g" $1
	sed -i "s^<<<TC_INSERTS_INT_PIN_HERE>>>^$INT_PIN^g" $1
	
	sed -i "s^<<<TC_INSERTS_BOOTLOADER_START_ADDRESS_HERE>>>^$BOOTSTART^g" $1

	# There are also upper-case versions of some of those same macros.

	# NOTE - We also remove special characters from the basename here, since we expect it to be used for macro definitions, where special characters are not allowed.

	NAME_WITHOUT_SPECIAL_CHARACTERS=${NAME//-/_}
	sed -i "s^<<<TC_INSERTS_UC_FILE_BASENAME_HERE>>>^${NAME_WITHOUT_SPECIAL_CHARACTERS^^}^g" $1
	NAME_WITHOUT_SPECIAL_CHARACTERS=

	sed -i "s^<<<TC_INSERTS_UC_COMPONENT_NAME_HERE>>>^${NAME^^}^g" $1

	# All done.
	return 0
}

######################################## FUNCTION #########################################
###											###
### NAME:		preprocess_hal							###
###											###
### Inputs/Outputs:	A single input argument: the path to the file to process.	###
###											###
### Purpose:		Preprocesses a single HAL library source file.			###
###											###
###			Requires that a valid build configuration has been loaded.	###
###											###
###########################################################################################

preprocess_hal()
{
	# Preprocess the files.
	echo -e "${CYAN}\tPreprocessing HAL file ${1##*/}...\n${NO_COLOUR}"

	# Check that the specified file exists.
	if [ ! -w $1 ]; then
		# The specified file is invalid, so bail.
		echo -e "\n${RED}ERROR - Invalid argument to preprocess_hal.  File does not exist.\n${NO_COLOUR}"
		return
	fi

	# Figure out what the NAME of the file actually is.
	local NAME=${1##*/}
	local NAME=${NAME%.*}
	local EXT=${1##*.}

	# Hence determine what some other fields should become.
	if [ "$EXT" == "c" ]; then
		CEXT="c"
		HEXT="h"
	elif [ "$EXT" == "cpp" ]; then
		CEXT="cpp"
		HEXT="hpp"
	elif [ "$EXT" == "s" ]; then
		CEXT="s"
		HEXT=""
	elif [ "$EXT" == "h" ]; then
		CEXT="c"
		HEXT="h"
	elif [ "$EXT" == "hpp" ]; then
		CEXT="cpp"
		HEXT="hpp"
	else
		CEXT=""
		HEXT=""
	fi

	# Replace each instance of a macro in the template files with the corresponding information.

	sed -i "s^<<<TC_INSERTS_FILE_NAME_HERE>>>^$NAME.$EXT^g" $1
	sed -i "s^<<<TC_INSERTS_FILE_BASENAME_HERE>>>^$NAME^g" $1		
	sed -i "s^<<<TC_INSERTS_H_FILE_NAME_HERE>>>^$NAME.$HEXT^g" $1
	sed -i "s^<<<TC_INSERTS_C_FILE_NAME_HERE>>>^$NAME.$CEXT^g" $1

	sed -i "s^<<<TC_INSERTS_LIBRARY_NAME_HERE>>>^HAL^g" $1

	sed -i "s^<<<TC_INSERTS_TARGET_HERE>>>^$TARGET^g" $1
	sed -i "s^<<<TC_INSERTS_PLATFORM_HERE>>>^$PLATFORM^g" $1
	sed -i "s^<<<TC_INSERTS_CLK_SPEED_IN_MHZ_HERE>>>^$CLK_SPEED_IN_MHZ^g" $1

	sed -i "s^<<<TC_INSERTS_IO_FILE_NAME_HERE>>>^$IOHEADER^g" $1
	sed -i "s^<<<TC_INSERTS_STDINT_FILE_NAME_HERE>>>^$STDINTHEADER^g" $1

	# 	There are also upper-case versions of some of those same macros.

	# NOTE - We also remove special characters from the basename here, since we expect it to be used for macro definitions, where special characters are not allowed.

	NAME_WITHOUT_SPECIAL_CHARACTERS=${NAME//-/_}
	sed -i "s^<<<TC_INSERTS_UC_FILE_BASENAME_HERE>>>^${NAME_WITHOUT_SPECIAL_CHARACTERS^^}^g" $1
	NAME_WITHOUT_SPECIAL_CHARACTERS=

	sed -i "s^<<<TC_INSERTS_UC_LIBRARY_NAME_HERE>>>^${LIBRARY^^}^g" $1

	# All done.
	return 0
}

