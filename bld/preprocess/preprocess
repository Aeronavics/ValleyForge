#!/bin/bash

###########################################################################################################################
###															###
### NAME:		preprocess											###
###															###
### Author:		Edwin Hayes											###
###															###
### Date Created:	03-12-2011											###
###															###
### Type:		Bash Script											###
###															###
### Purpose:		This script provides functions which implement preprocessing of source files.			###
###															###
###########################################################################################################################

######################################## FUNCTION #########################################
###											###
### NAME:		preprocess_template						###
###											###
### Inputs/Outputs:	A single input argument: the path to the file to process.	###
###											###
### Purpose:		Preprocesses a source file which have been newly created from  	###
###			a template file.  This preprocessing generally only affects the	###
###			commentary at the top of the file, and a few other bits.  Since	###
###			this preprocessing will be performed on a new template file 	###
###			before it is added to the src folder, the user will never see 	###
###			the unexpanded macros unless they actually edit the templates.  ###
###			If any macros in the template should NOT be expanded, then they	###
###			should be surrounded by inverted delimiters: >>> <<<		###
###			In this case, the preprocessor will simply reverse the 		###
###			delimiters, and leave the unexpanded macros in the source file, ###
###			ready to be expanded at compile time.				###
###											###
###			Requires that a valid build configuration has been loaded.	###
###											###
###########################################################################################

preprocess_template()
{	
	# Preprocess the files.
	echo -e "${CYAN}Preprocessing template file ${1##*/}...${NO_COLOUR}"

	# Check that the specified file exists.
	if [ ! -w $1 ]; then
		# The specified file is invalid, so bail.
		echo -e "\n${RED}ERROR - Invalid argument to preprocess_template.  File does not exist.\n${NO_COLOUR}"
		return
	fi

	# Populate a variable with the users information, from the configuration file.
	local AUTHOR=$(grep -v "#" $TCPATH/var/config.cfg | grep tc_authname | cut -d '=' -f2)

	# TODO - Need to confirm that such a configuration file actually exists?

	# Populate a string with the current date.
	local DATE=$(date +"%-d-%-m-%Y")

	# Figure out what the NAME of the file actually is.
	local NAME=${1##*/}
	local NAME=${NAME%.*}
	local EXT=${1##*.}

	# Replace each instance of a macro in the template files with the corresponding information.

	sed -i "s^<<<TC_INSERTS_FILE_NAME_HERE>>>^$NAME.$EXT^g" $1
	sed -i "s^<<<TC_INSERTS_FILE_BASENAME_HERE>>>^$NAME^g" $1
	sed -i "s^<<<TC_INSERTS_H_FILE_NAME_HERE>>>^$NAME.h^g" $1
	sed -i "s^<<<TC_INSERTS_C_FILE_NAME_HERE>>>^$NAME.c^g" $1

	sed -i "s^<<<TC_INSERTS_COMPONENT_NAME_HERE>>>^$COMPONENT^g" $1
	sed -i "s^<<<TC_INSERTS_SUBSYSTEM_HERE>>>^$SUBSYSTEM^g" $1
	sed -i "s^<<<TC_INSERTS_AUTHOR_NAME_HERE>>>^$AUTHOR^g" $1
	sed -i "s^<<<TC_INSERTS_DATE_HERE>>>^$DATE^g" $1

	sed -i "s^<<<TC_INSERTS_TARGET_HERE>>>^$TARGET^g" $1
	sed -i "s^<<<TC_INSERTS_PLATFORM_HERE>>>^$PLATFORM^g" $1

	sed -i "s^<<<TC_INSERTS_IO_FILE_NAME_HERE>>>^$IOHEADER^g" $1
	sed -i "s^<<<TC_INSERTS_STDINT_FILE_NAME_HERE>>>^$STDINTHEADER^g" $1

	# 	There are also upper-case versions of some of those same macros.

	sed -i "s^<<<TC_INSERTS_UC_FILE_BASENAME_HERE>>>^${NAME^^}^g" $1

	sed -i "s^<<<TC_INSERTS_UC_COMPONENT_NAME_HERE>>>^${COMPONENT^^}^g" $1

	# Re-reverse the delimiters for any macros with reversed delimiters.

	sed -i 's^>>>TC_INSERTS_FILE_NAME_HERE<<<^<<<TC_INSERTS_FILE_NAME_HERE>>>^g' $1
	sed -i 's^>>>TC_INSERTS_FILE_BASENAME_HERE<<<^<<<TC_INSERTS_FILE_BASENAME_HERE>>>^g' $1
	sed -i 's^>>>TC_INSERTS_H_FILE_NAME_HERE<<<^<<<TC_INSERTS_H_FILE_NAME_HERE>>>^g' $1
	sed -i 's^>>>TC_INSERTS_C_FILE_NAME_HERE<<<^<<<TC_INSERTS_C_FILE_NAME_HERE>>>^g' $1

	sed -i 's^>>>TC_INSERTS_COMPONENT_NAME_HERE<<<^<<<TC_INSERTS_COMPONENT_NAME_HERE>>>^g' $1
	sed -i 's^>>>TC_INSERTS_SUBSYSTEM_HERE<<<^<<<TC_INSERTS_SUBSYSTEM_HERE>>>^g' $1
	sed -i 's^>>>TC_INSERTS_AUTHOR_NAME_HERE<<<^<<<TC_INSERTS_AUTHOR_NAME_HERE>>>^g' $1
	sed -i 's^>>>TC_INSERTS_DATE_HERE<<<^<<<TC_INSERTS_DATE_HERE>>>^g' $1

	sed -i 's^>>>TC_INSERTS_TARGET_HERE<<<^<<<TC_INSERTS_TARGET_HERE>>>^g' $1
	sed -i 's^>>>TC_INSERTS_PLATFORM_HERE<<<^<<<TC_INSERTS_PLATFORM_HERE>>>^g' $1
	
	sed -i 's^>>>TC_INSERTS_IO_FILE_NAME_HERE<<<^<<<TC_INSERTS_IO_FILE_NAME_HERE>>>^g' $1
	sed -i 's^>>>TC_INSERTS_STDINT_FILE_NAME_HERE<<<^<<<TC_INSERTS_STDINT_FILE_NAME_HERE>>>^g' $1

	# 	There are also upper-case versions of some of those same macros.

	sed -i "s^>>>TC_INSERTS_UC_FILE_BASENAME_HERE<<<^<<<TC_INSERTS_UC_FILE_BASENAME_HERE>>>^g" $1

	sed -i "s^>>>TC_INSERTS_UC_COMPONENT_NAME_HERE<<<^<<<TC_INSERTS_UC_COMPONENT_NAME_HERE>>>^g" $1

	# All done.
	echo -e "${CYAN}All done.\n${NO_COLOUR}"	
	return
}

######################################## FUNCTION #########################################
###											###
### NAME:		preprocess_general						###
###											###
### Inputs/Outputs:	A single input argument: the path to the file to process.	###
###											###
### Purpose:		Preprocesses a single source file.				###
###											###
###			Requires that a valid build configuration has been loaded.	###
###											###
###########################################################################################

preprocess_general()
{
	# Preprocess the files.
	echo -e "${CYAN}Preprocessing file ${1##*/}...${NO_COLOUR}"

	# Check that the specified file exists.
	if [ ! -w $1 ]; then
		# The specified file is invalid, so bail.
		echo -e "\n${RED}ERROR - Invalid argument to preprocess_general.  File does not exist.\n${NO_COLOUR}"
		return
	fi

	# Populate a variable with the users information, from the configuration file.
	local AUTHOR=$(grep -v "#" $TCPATH/var/config.cfg | grep tc_authname | cut -d '=' -f2)

	# TODO - Need to confirm that such a configuration file actually exists?

	# Populate a string with the current date.
	local DATE=$(date +"%-d-%-m-%Y")

	# Figure out what the NAME of the file actually is.
	local NAME=${1##*/}
	local NAME=${NAME%.*}
	local EXT=${1##*.}

	# Replace each instance of a macro in the template files with the corresponding information.

	sed -i "s^<<<TC_INSERTS_FILE_NAME_HERE>>>^$NAME.$EXT^g" $1
	sed -i "s^<<<TC_INSERTS_FILE_BASENAME_HERE>>>^$NAME^g" $1		
	sed -i "s^<<<TC_INSERTS_H_FILE_NAME_HERE>>>^$NAME.h^g" $1
	sed -i "s^<<<TC_INSERTS_C_FILE_NAME_HERE>>>^$NAME.c^g" $1

	sed -i "s^<<<TC_INSERTS_COMPONENT_NAME_HERE>>>^$COMPONENT^g" $1
	sed -i "s^<<<TC_INSERTS_SUBSYSTEM_HERE>>>^$SUBSYSTEM^g" $1
	sed -i "s^<<<TC_INSERTS_AUTHOR_NAME_HERE>>>^$AUTHOR^g" $1
	sed -i "s^<<<TC_INSERTS_DATE_HERE>>>^$DATE^g" $1

	sed -i "s^<<<TC_INSERTS_TARGET_HERE>>>^$TARGET^g" $1
	sed -i "s^<<<TC_INSERTS_PLATFORM_HERE>>>^$PLATFORM^g" $1

	sed -i "s^<<<TC_INSERTS_IO_FILE_NAME_HERE>>>^$IOHEADER^g" $1
	sed -i "s^<<<TC_INSERTS_STDINT_FILE_NAME_HERE>>>^$STDINTHEADER^g" $1

	# 	There are also upper-case versions of some of those same macros.

	sed -i "s^<<<TC_INSERTS_UC_FILE_BASENAME_HERE>>>^${NAME^^}^g" $1

	sed -i "s^<<<TC_INSERTS_UC_COMPONENT_NAME_HERE>>>^${COMPONENT^^}^g" $1

	# All done.
	echo -e "${CYAN}All done.\n${NO_COLOUR}"	
	return
}

######################################## FUNCTION #########################################
###											###
### NAME:		preprocess_bootloader						###
###											###
### Inputs/Outputs:	A single input argument: the path to the file to process.	###
###											###
### Purpose:		Preprocesses a single bootloader source file. Should not be	###
###			used to preprocess application code!				###
###											###
###			Requires that a valid bootloader build configuration has been	###
###			loaded.								###
###											###
###########################################################################################

preprocess_bootloader()
{
	# Preprocess the files.
	echo -e "${CYAN}Preprocessing bootloader file ${1##*/}...${NO_COLOUR}"

	# Check that the specified file exists.
	if [ ! -w $1 ]; then
		# The specified file is invalid, so bail.
		echo -e "\n${RED}ERROR - Invalid argument to preprocess_bootloader.  File does not exist.\n${NO_COLOUR}"
		return
	fi
	
	# Figure out what the NAME of the file actually is.
	local NAME=${1##*/}
	local NAME=${NAME%.*}
	local EXT=${1##*.}

	# Replace each instance of a macro in the bootloader files with the corresponding information.

	sed -i "s^<<<TC_INSERTS_FILE_NAME_HERE>>>^$NAME.$EXT^g" $1
	sed -i "s^<<<TC_INSERTS_FILE_BASENAME_HERE>>>^$NAME^g" $1		
	sed -i "s^<<<TC_INSERTS_H_FILE_NAME_HERE>>>^$NAME.h^g" $1
	sed -i "s^<<<TC_INSERTS_C_FILE_NAME_HERE>>>^$NAME.c^g" $1

	sed -i "s^<<<TC_INSERTS_COMPONENT_NAME_HERE>>>^$NAME^g" $1

	sed -i "s^<<<TC_INSERTS_TARGET_HERE>>>^$TARGET^g" $1

	sed -i "s^<<<TC_INSERTS_IO_FILE_NAME_HERE>>>^$IOHEADER^g" $1
	sed -i "s^<<<TC_INSERTS_STDINT_FILE_NAME_HERE>>>^$STDINTHEADER^g" $1

	sed -i "s^<<<TC_INSERTS_BLINK_PORT_HERE>>>^$BLINK_PORT^g" $1
	sed -i "s^<<<TC_INSERTS_BLINK_PIN_HERE>>>^$BLINK_PIN^g" $1
	sed -i "s^<<<TC_INSERTS_LED_LOGIC_HERE>>>^$LED_LOGIC^g" $1
	sed -i "s^<<<TC_INSERTS_FORCE_BL_PORT_HERE>>>^$FORCE_BL_PORT^g" $1
	sed -i "s^<<<TC_INSERTS_FORCE_BL_PIN_HERE>>>^$FORCE_BL_PIN^g" $1
	sed -i "s^<<<TC_INSERTS_INPUT_LOGIC_HERE>>>^$INPUT_LOGIC^g" $1
	sed -i "s^<<<TC_INSERTS_CLK_SPEED_IN_MHZ_HERE>>>^$CLK_SPEED_IN_MHZ^g" $1
	sed -i "s^<<<TC_INSERTS_BOOTLOADER_ACTIVE_MODULE_HERE>>>^$ACTIVE_MODULE^g" $1
	
	# 	There are also upper-case versions of some of those same macros.

	sed -i "s^<<<TC_INSERTS_UC_FILE_BASENAME_HERE>>>^${NAME^^}^g" $1

	sed -i "s^<<<TC_INSERTS_UC_COMPONENT_NAME_HERE>>>^${NAME^^}^g" $1

	# All done.
	echo -e "${CYAN}All done.\n${NO_COLOUR}"	
	return
}

######################################## FUNCTION #########################################
###											###
### NAME:		preprocess_library_template					###
###											###
### Inputs/Outputs:	A single input argument: the path to the file to process.	###
###											###
### Purpose:		Preprocesses a library source file which have been newly	###
###			created from a template file.  This preprocessing generally 	###
###			only affects the commentary at the top of the file, and a few 	###
###			other bits.  Since this preprocessing will be performed on a 	###
###			new template file before it is added to the src folder, the 	###
###			user will never see the unexpanded macros unless they actually	###
###			edit the templates. If any macros in the template should NOT be	###
###			expanded, then they should be surrounded by inverted		###
###			delimiters: >>> <<< In this case, the preprocessor will simply	###
###			reverse the delimiters, and leave the unexpanded macros in the	###
###			source file, ready to be expanded at compile time.		###
###											###
###########################################################################################

preprocess_library_template()
{	
	# Preprocess the files.
	echo -e "${CYAN}Preprocessing template file ${1##*/}...${NO_COLOUR}"

	# Check that the specified file exists.
	if [ ! -w $1 ]; then
		# The specified file is invalid, so bail.
		echo -e "\n${RED}ERROR - Invalid argument to preprocess_library_template.  File does not exist.\n${NO_COLOUR}"
		return
	fi

	# Populate a variable with the users information, from the configuration file.
	local AUTHOR=$(grep -v "#" $TCPATH/var/config.cfg | grep tc_authname | cut -d '=' -f2)

	# TODO - Need to confirm that such a configuration file actually exists?

	# Populate a string with the current date.
	local DATE=$(date +"%-d-%-m-%Y")

	# Figure out what the NAME of the file actually is.
	local NAME=${1##*/}
	local NAME=${NAME%.*}
	local EXT=${1##*.}

	# Replace each instance of a macro in the template files with the corresponding information.

	sed -i "s^<<<TC_INSERTS_FILE_NAME_HERE>>>^$NAME.$EXT^g" $1
	sed -i "s^<<<TC_INSERTS_FILE_BASENAME_HERE>>>^$NAME^g" $1
	sed -i "s^<<<TC_INSERTS_H_FILE_NAME_HERE>>>^$NAME.h^g" $1
	sed -i "s^<<<TC_INSERTS_C_FILE_NAME_HERE>>>^$NAME.c^g" $1

	sed -i "s^<<<TC_INSERTS_BUILD_LIST_HERE>>>^$BUILDS^g" $1
	sed -i "s^<<<TC_INSERTS_AUTHOR_NAME_HERE>>>^$AUTHOR^g" $1
	sed -i "s^<<<TC_INSERTS_DATE_HERE>>>^$DATE^g" $1

	sed -i "s^<<<TC_INSERTS_LIBRARY_NAME_HERE>>>^$LIBRARY^g" $1

	sed -i "s^<<<TC_INSERTS_STDINT_FILE_NAME_HERE>>>^$STDINTHEADER^g" $1

	# 	There are also upper-case versions of some of those same macros.

	sed -i "s^<<<TC_INSERTS_UC_FILE_BASENAME_HERE>>>^${NAME^^}^g" $1

	sed -i "s^<<<TC_INSERTS_UC_LIBRARY_NAME_HERE>>>^${LIBRARY^^}^g" $1

	# Re-reverse the delimiters for any macros with reversed delimiters.

	sed -i 's^>>>TC_INSERTS_FILE_NAME_HERE<<<^<<<TC_INSERTS_FILE_NAME_HERE>>>^g' $1
	sed -i 's^>>>TC_INSERTS_FILE_BASENAME_HERE<<<^<<<TC_INSERTS_FILE_BASENAME_HERE>>>^g' $1
	sed -i 's^>>>TC_INSERTS_H_FILE_NAME_HERE<<<^<<<TC_INSERTS_H_FILE_NAME_HERE>>>^g' $1
	sed -i 's^>>>TC_INSERTS_C_FILE_NAME_HERE<<<^<<<TC_INSERTS_C_FILE_NAME_HERE>>>^g' $1

	sed -i 's^>>>TC_INSERTS_BUILD_LIST_HERE<<<^<<<TC_INSERTS_BUILD_LIST_HERE>>>^g' $1
	sed -i 's^>>>TC_INSERTS_AUTHOR_NAME_HERE<<<^<<<TC_INSERTS_AUTHOR_NAME_HERE>>>^g' $1
	sed -i 's^>>>TC_INSERTS_DATE_HERE<<<^<<<TC_INSERTS_DATE_HERE>>>^g' $1
	
	sed -i 's^>>>TC_INSERTS_LIBRARY_NAME_HERE<<<^<<<TC_INSERTS_LIBRARY_NAME_HERE>>>^g' $1

	sed -i 's^>>>TC_INSERTS_STDINT_FILE_NAME_HERE<<<^<<<TC_INSERTS_STDINT_FILE_NAME_HERE>>>^g' $1

	# 	There are also upper-case versions of some of those same macros.

	sed -i "s^>>>TC_INSERTS_UC_FILE_BASENAME_HERE<<<^<<<TC_INSERTS_UC_FILE_BASENAME_HERE>>>^g" $1

	sed -i "s^>>>TC_INSERTS_UC_LIBRARY_NAME_HERE<<<^<<<TC_INSERTS_UC_LIBRARY_NAME_HERE>>>^g" $1

	# All done.
	echo -e "${CYAN}All done.\n${NO_COLOUR}"	
	return
}

######################################## FUNCTION #########################################
###											###
### NAME:		preprocess_library						###
###											###
### Inputs/Outputs:	A single input argument: the path to the file to process.	###
###											###
### Purpose:		Preprocesses a single library source file.			###
###											###
###			Requires that a valid build configuration has been loaded.	###
###											###
###########################################################################################

preprocess_library()
{
	# Preprocess the files.
	echo -e "${CYAN}Preprocessing file ${1##*/}...${NO_COLOUR}"

	# Check that the specified file exists.
	if [ ! -w $1 ]; then
		# The specified file is invalid, so bail.
		echo -e "\n${RED}ERROR - Invalid argument to preprocess_library.  File does not exist.\n${NO_COLOUR}"
		return
	fi

	# Populate a variable with the users information, from the configuration file.
	local AUTHOR=$(grep -v "#" $TCPATH/var/config.cfg | grep tc_authname | cut -d '=' -f2)

	# TODO - Need to confirm that such a configuration file actually exists?

	# Populate a string with the current date.
	local DATE=$(date +"%-d-%-m-%Y")

	# Figure out what the NAME of the file actually is.
	local NAME=${1##*/}
	local NAME=${NAME%.*}
	local EXT=${1##*.}

	# Replace each instance of a macro in the template files with the corresponding information.

	sed -i "s^<<<TC_INSERTS_FILE_NAME_HERE>>>^$NAME.$EXT^g" $1
	sed -i "s^<<<TC_INSERTS_FILE_BASENAME_HERE>>>^$NAME^g" $1		
	sed -i "s^<<<TC_INSERTS_H_FILE_NAME_HERE>>>^$NAME.h^g" $1
	sed -i "s^<<<TC_INSERTS_C_FILE_NAME_HERE>>>^$NAME.c^g" $1

	sed -i "s^<<<TC_INSERTS_BUILD_LIST_HERE>>>^$BUILDS^g" $1
	sed -i "s^<<<TC_INSERTS_AUTHOR_NAME_HERE>>>^$AUTHOR^g" $1
	sed -i "s^<<<TC_INSERTS_DATE_HERE>>>^$DATE^g" $1

	sed -i "s^<<<TC_INSERTS_LIBRARY_NAME_HERE>>>^$LIBRARY^g" $1

	sed -i "s^<<<TC_INSERTS_TARGET_HERE>>>^$TARGET^g" $1
	sed -i "s^<<<TC_INSERTS_PLATFORM_HERE>>>^$PLATFORM^g" $1

	sed -i "s^<<<TC_INSERTS_IO_FILE_NAME_HERE>>>^$IOHEADER^g" $1
	sed -i "s^<<<TC_INSERTS_STDINT_FILE_NAME_HERE>>>^$STDINTHEADER^g" $1

	# 	There are also upper-case versions of some of those same macros.

	sed -i "s^<<<TC_INSERTS_UC_FILE_BASENAME_HERE>>>^${NAME^^}^g" $1

	sed -i "s^<<<TC_INSERTS_UC_LIBRARY_NAME_HERE>>>^${LIBRARY^^}^g" $1

	# All done.
	echo -e "${CYAN}All done.\n${NO_COLOUR}"	
	return
}

######################################## FUNCTION #########################################
###											###
### NAME:		preprocess_hal							###
###											###
### Inputs/Outputs:	A single input argument: the path to the file to process.	###
###											###
### Purpose:		Preprocesses a single HAL library source file.			###
###											###
###			Requires that a valid build configuration has been loaded.	###
###											###
###########################################################################################

preprocess_hal()
{
	# Preprocess the files.
	echo -e "${CYAN}Preprocessing HAL file ${1##*/}...${NO_COLOUR}"

	# Check that the specified file exists.
	if [ ! -w $1 ]; then
		# The specified file is invalid, so bail.
		echo -e "\n${RED}ERROR - Invalid argument to preprocess_hal.  File does not exist.\n${NO_COLOUR}"
		return
	fi

	# Figure out what the NAME of the file actually is.
	local NAME=${1##*/}
	local NAME=${NAME%.*}
	local EXT=${1##*.}

	# Replace each instance of a macro in the template files with the corresponding information.

	sed -i "s^<<<TC_INSERTS_FILE_NAME_HERE>>>^$NAME.$EXT^g" $1
	sed -i "s^<<<TC_INSERTS_FILE_BASENAME_HERE>>>^$NAME^g" $1		
	sed -i "s^<<<TC_INSERTS_H_FILE_NAME_HERE>>>^$NAME.h^g" $1
	sed -i "s^<<<TC_INSERTS_C_FILE_NAME_HERE>>>^$NAME.c^g" $1

	sed -i "s^<<<TC_INSERTS_LIBRARY_NAME_HERE>>>^HAL^g" $1

	sed -i "s^<<<TC_INSERTS_TARGET_HERE>>>^$TARGET^g" $1
	sed -i "s^<<<TC_INSERTS_PLATFORM_HERE>>>^$PLATFORM^g" $1

	sed -i "s^<<<TC_INSERTS_IO_FILE_NAME_HERE>>>^$IOHEADER^g" $1
	sed -i "s^<<<TC_INSERTS_STDINT_FILE_NAME_HERE>>>^$STDINTHEADER^g" $1

	# 	There are also upper-case versions of some of those same macros.

	sed -i "s^<<<TC_INSERTS_UC_FILE_BASENAME_HERE>>>^${NAME^^}^g" $1

	sed -i "s^<<<TC_INSERTS_UC_LIBRARY_NAME_HERE>>>^${LIBRARY^^}^g" $1

	# All done.
	echo -e "${CYAN}All done.\n${NO_COLOUR}"	
	return
}

