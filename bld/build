#!/bin/bash

###########################################################################################################################
###															###
### Name:		build												###
###															###
### Author:		Zac Frank											###
###															###
### Date Created:	17-11-2011											###
###															###
### Type:		Bash Script											###
###															###
### Purpose:		This script builds the components being developed with the toolchain.			 	###
###															###
###########################################################################################################################

# FIGURE OUT WHERE WE ARE.

# Determine what the absolute path to the root of the toolchain is.
SCRIPT=`readlink -f $0`
SCRIPTPATH=`dirname $SCRIPT`
TCPATH=$(echo $SCRIPTPATH | sed 's/\/bld.*//')

# DEFINE CONSTANTS.

# Define file names.

USER_CONFIG_FILE="var/config.cfg"
BUILD_CONFIG_FILE="bld/build_configs.cfg"
LIB_SOURCE_PATH="lib"
TMP_SRC_DIR="tmp/tmp_src"
OUTPUT_DIR="bin"

# Define the colours used for interface output.
source $TCPATH/bld/common/def_colours

# Define the functions used for preprocessing.
source $TCPATH/bld/preprocess/preprocess

# Define the functions used for set up the compilers.
source $TCPATH/bld/other/setup_compilers

# Define the functions used to actually build components.
for f in $TCPATH/bld/make_functions/make*; do
	source "$f"
done

##################################### MINOR FUNCTIONS ####################################

# Find the rtos files and copy them into the tmp directory
get_rtos_files ()
{
	echo -e "${CYAN}Importing common FreeRTOS files...\n${NO_COLOUR}"
	# Copy the FreeRTOS common files into our temporary directory.
	cp $TCPATH/$BCONF_COMMON_RTOS_PATH/*.c $TCPATH/$BCONF_COMMON_RTOS_PATH/*.cpp $TCPATH/$BCONF_COMMON_RTOS_PATH/*.h $TCPATH/$BCONF_COMMON_RTOS_PATH/*.s $TCPATH/$TMP_SRC_DIR/$COMPONENT 2>/dev/null
	echo -e "${CYAN}Importing port specific FreeRTOS files...\n${NO_COLOUR}"
	# Copy the FreeRTOS port files into our temporary directory.
	cp $TCPATH/$BCONF_SPECIFIC_RTOS_PATH/*.c $TCPATH/$BCONF_SPECIFIC_RTOS_PATH/*.cpp $TCPATH/$BCONF_SPECIFIC_RTOS_PATH/*.h $TCPATH/$BCONF_SPECIFIC_RTOS_PATH/*.s $TCPATH/$TMP_SRC_DIR/$COMPONENT 2>/dev/null
	echo -e "${CYAN}Files imported.\n${NO_COLOUR}"
}

# Find suitable libraries and copy them into the tmp directory.
get_suitable_libs()
{
	# Indicate what we're doing.
	echo -e "${CYAN}Searching for compatible libraries...\n${NO_COLOUR}"

	# Check if a output location was given.
	if [ -z $1 ]; then
		# No specific output location was given, so use the default one for the current component.
		OUTPATH=$TCPATH/$TMP_SRC_DIR/$COMPONENT/lib
	else
		# Use the specified output location instead.
		OUTPATH=$TCPATH/$TMP_SRC_DIR/$1
	fi

	# Iterate through all the libraries.
	COUNT=0
	for LIBRARY in $(ls -C $TCPATH/$LIB_SOURCE_PATH); do
		# TODO - This is going to totally bail if there are any files in $LIB_SOURCE_PATH.

		# Check if we can find the config file for this library.
		if ! [ -r $TCPATH/$LIB_SOURCE_PATH/$LIBRARY/$LIBRARY.cfg ]; then
			# The configuration file isn't there.  Ask the user if they want to create the file, or skip this library.
			echo -e "${RED}No configuration file found for library $LIBRARY.\n${NO_COLOUR}"
			echo -e -n "${GREEN}Do you wish to create the missing configuration file now? (Y/N) ${NO_COLOUR}"
			read -n 1
			echo -e "\n" # NOTE - This is because the read command won't put a newline after it reads a character.
		
			# If they responded YES, then rebuild the configuration file.  If NO, then we bail.
			if [[ $REPLY =~ ^[Yy]$ ]]; then
				# Rebuild the configuration file.
			
				# Call the 'create_library' script: it will handle rebuilding the configuration file.
				bash $TCPATH/bld/create/create_library --name $LIBRARY

				# TODO - Need to check that this actually worked.  If it didn't, then we need to bail.
			else
				# Just skip this component and move on.
				echo -e "${YELLOW}No configuration file.  Skipping library $LIBRARY.\n${NO_COLOUR}"
				continue
			fi	
		fi

		# Extract relevant configuration information from the configuration file.
		BUILDS=$(grep -v "#" $TCPATH/$LIB_SOURCE_PATH/$LIBRARY/$LIBRARY.cfg | grep "^BUILDS" | cut -d '=' -f2)
		
		# Check if it is suitable for the current build configuration.
		if [ ! -z $(echo $BUILDS | grep -w -o "$BCONF") ]; then
			# The current build configuration is listed in the configuration as suitable, so use this library.
			echo -e "${CYAN}Importing library $LIBRARY.\n${NO_COLOUR}"
			
			# Copy all the files across from the library directory.
			mkdir -p $TCPATH/$TMP_SRC_DIR/$COMPONENT/lib/
			cp -rf $TCPATH/$LIB_SOURCE_PATH/$LIBRARY $OUTPATH

			# Preprocess the copied header files.
			shopt -s nullglob
			for FILE in $OUTPATH/$LIBRARY/*.h; do
				# Preprocess this header file.
				preprocess_library $FILE
			done
			shopt -u nullglob

			# Preprocess the copied source files.
			shopt -s nullglob
			for FILE in $OUTPATH/$LIBRARY/*.c; do
				# Preprocess this source file.
				preprocess_library $FILE
			done
			shopt -u nullglob

			# Preprocess the copied source files.
			shopt -s nullglob
			for FILE in $OUTPATH/$LIBRARY/*.cpp; do
				# Preprocess this source file.
				preprocess_library $FILE
			done
			shopt -u nullglob

			# Preprocess the copied assembler files.
			shopt -s nullglob
			for FILE in $OUTPATH/$LIBRARY/*.s; do
				# Preprocess this source file.
				preprocess_library $FILE
			done
			shopt -u nullglob

			# Increment the number of libraries imported.
			COUNT=`expr $COUNT + 1`
		fi
	done

	# All done.
	echo -e "${CYAN}Imported $COUNT compatible libraries.\n${NO_COLOUR}"
	return
}

# Find suitable HAL libraries and copy them into the tmp directory.
get_hal()
{
	# Check if using the HAL is disabled.
	if [ $NOHAL ]; then
		# The HAL is disabled, so don't do anything here.
		echo -e "${YELLOW}'No HAL' option selected; not importing HAL.\n${NO_COLOUR}"
		return 0
	fi

	# Check if a output location was given.
	if [ -z $1 ]; then
		# No specific output location was given, so use the default one for the current component.
		OUTPATH=$TCPATH/$TMP_SRC_DIR/$COMPONENT/hal
	else
		# Use the specified output location instead.
		OUTPATH=$TCPATH/$TMP_SRC_DIR/$1
	fi

	# Check if the HAL header and source paths were set by the build configuration.
	if [ -z "$HAL_EN_LIST" ] || [ -z $HAL_HEADER_PATH ] || [ -z $HAL_SOURCE_PATH ] || [ ! -d ${TCPATH}/$HAL_HEADER_PATH ] || [ ! -d ${TCPATH}/$HAL_SOURCE_PATH ]; then
		# We don't import the HAL at all.
		echo -e "${YELLOW}Not importing HAL for this build configuration.\n${NO_COLOUR}"
		return 0
	fi
	# Else, we're going to use the HAL.
	mkdir -p $OUTPATH

	# Indicate what we're doing.
	echo -e "${CYAN}Importing HAL...\n${NO_COLOUR}"

	# Copy in the common HAL files.
	cp $TCPATH/$HAL_HEADER_PATH/hal.h $OUTPATH
	cp $TCPATH/$HAL_HEADER_PATH/semaphore.h $OUTPATH
	cp $TCPATH/$HAL_HEADER_PATH/target_config.h $OUTPATH
	cp $TCPATH/$HAL_SOURCE_PATH/hal.cpp $OUTPATH 2>/dev/null
	cp $TCPATH/$HAL_SOURCE_PATH/hal.s $OUTPATH 2>/dev/null
	cp $TCPATH/$HAL_SOURCE_PATH/hal.o $OUTPATH 2>/dev/null
	cp $TCPATH/$HAL_SOURCE_PATH/semaphore.cpp $OUTPATH 2>/dev/null
	cp $TCPATH/$HAL_SOURCE_PATH/semaphore.s $OUTPATH 2>/dev/null
	cp $TCPATH/$HAL_SOURCE_PATH/semaphore.o $OUTPATH 2>/dev/null

	# Only import each particular peripheral if it is enabled in the configuration.

	# Iterate through the items in the enabled HAL peripherals list.
	for PERIPHERAL in $HAL_EN_LIST; do
		# Copy the corresponding files over.
		cp $TCPATH/$HAL_HEADER_PATH/$PERIPHERAL.h $OUTPATH
		cp $TCPATH/$HAL_SOURCE_PATH/${PERIPHERAL}_*.h $OUTPATH 2>/dev/null
		cp $TCPATH/$HAL_SOURCE_PATH/$PERIPHERAL.cpp $OUTPATH 2>/dev/null
		cp $TCPATH/$HAL_SOURCE_PATH/$PERIPHERAL.s $OUTPATH 2>/dev/null
		cp $TCPATH/$HAL_SOURCE_PATH/$PERIPHERAL.o $OUTPATH 2>/dev/null		
	done

	# Preprocess the imported files.

	# Preprocess the copied header files.
	shopt -s nullglob
	for FILE in $OUTPATH/*.h; do
		# Preprocess this header file.
		preprocess_hal $FILE
	done
	shopt -u nullglob

	# Preprocess the copied source files.
	shopt -s nullglob
	for FILE in $OUTPATH/*.c; do
		# Preprocess this source file.
		preprocess_hal $FILE
	done
	shopt -u nullglob

	# Preprocess the copied source files.
	shopt -s nullglob
	for FILE in $OUTPATH/*.cpp; do
		# Preprocess this source file.
		preprocess_hal $FILE
	done
	shopt -u nullglob

	# Preprocess the copied assembler files.
	shopt -s nullglob
	for FILE in $OUTPATH/*.s; do
		# Preprocess this source file.
		preprocess_hal $FILE
	done
	shopt -u nullglob

	# All done.
	echo -e "${CYAN}Imported HAL.\n${NO_COLOUR}"
	return
}

# Print a usage message.
usage()
{
	# Block-concatenate the message.
	cat << EOF

Usage: $0 [Options] [Component Names]

This script is used, as part of the 'Valley Forge' Embedded Toolchain to build components.

Parameters:

	[Component Names]		Space separated list of the components to build, or "all".

Options:
	-h --help			Show this message.
	-a --all			Build all components.
	-r --retain			Retain temporary files at completion of script.
	-l --loader			Build the bootloader for each component as well.
	-n --name <Component Name>	Specify the name of a component to build.
	   --nohal			Do not compile using the HAL (mostly for debugging).
EOF
	# All done.
	return
}

################################ SCRIPT PROPER STARTS HERE ###############################

# Delete everything in the tmp directory.
rm -rf  $TCPATH/tmp/*

# PARSE ANY COMMAND LINE PARAMETERS.

# Indicate where we are up to in the script.
echo -e "${BOLD_CYAN}Parsing command line parameters...\n${NO_COLOUR}"

# Reset fields to be extracted from the parameters.
NAME=
RETAIN=
ALL=
LOADER=
NOHAL=
POSTPACK=

# Define variables required for 'getopt' to work.
PROGNAME=${0##*/} 
SHORTOPTS="harlpcn:"
LONGOPTS="help,all,retain,loader,postpack,clean,nohal,name:"

# Use 'getopt' to parse the command line options.
ARGS=$(getopt -s bash --options $SHORTOPTS --longoptions $LONGOPTS --name $PROGNAME -- "$@")
eval set -- "$ARGS"

# Handle the parsed parameters.
while true; do
	# Select the appropriate behaviour for each parameter.
	case $1 in
		-h|--help)
			# Just print the usage message and then exit.
			usage
			exit 0
			;;
		-a|--all)
			# Select 'building all components'.
			ALL=1
			;;
		-r|--retain)
			# Select 'retaining temporary files'.
			RETAIN=1
			;;
		-l|--loader)
			# Select 'creating bootloaders'.
			LOADER=1
			;;
		-p|--postpack)
			# Select 'pack up compilers, post build'.
			POSTPACK=1
			;;
		-c|--clean)
			# Remind the user that there is no 'clean' option here.
			echo -e "${RED}\nThis script automatically cleans temporary files upon completion.\n" 
			echo -e "To retain files built during compilation, type ./build retain\n${NO_COLOUR}"
			exit 0		
			;;
		-n|--name)
			# Specify the name of the component to build.
			shift
			NAME="$NAME$1 " # NOTE - The space is intentional!
			;;
		--nohal)
			# Select 'not using HAL'.
			NOHAL=1
			;;
		--)
			# We're done parsing options.  Anything else must be parameters.
			shift
			NAME="$NAME$* " # NOTE - The space in intentional!
			break
			;;
		*)
			# Anything else must be parameters.
			shift
			NAME="$NAME$* " # NOTE - The space is intentional!
			break
			;;
	esac

	# Advance on to the next parameter.
	shift
done

# If the provided name was 'all', then set the ALL variable even if the '-a' option wasn't given.
if [ "$NAME" == "all " ]; then  # NOTE - The space is intentional!
	ALL=1
fi

# If there was no component name specified, we'll just try to build the 'active component' instead.
if [ "$NAME" == " " ] && ! [ $ALL ]; then  # NOTE - The space is intentional!
	# Try to build the 'active component' instead.

	# Check to make sure the user configuration file is there.
	if [ ! -r $TCPATH/$USER_CONFIG_FILE ]; then
		# The configuration file is missing, so we don't know what to compile.
		echo -e "${BOLD_RED}FATAL - User configuration file ($USER_CONFIG_FILE) was not found.\n${NO_COLOUR}"
		exit 1
	fi

	# Extract the value of the 'active component' from the user configuration file.
	CURR=$(grep -v "#" $TCPATH/$USER_CONFIG_FILE | grep tc_curr | cut -d '=' -f 2)

	# Check if the toolchain has an 'active component' to build.
	if [ "$CURR" == "none" ] || [ -z "$CURR" ]; then
		# Tell the user there is nothing to compile, then exit.
		echo -e "${RED}No active component is set; nothing to build.\n${NO_COLOUR}"
		exit 0
	else
		# Schedule the 'active component' to be built.
		NAME=$CURR
	fi
fi

# If we're going to build 'everything', then get a list of what 'everything' actually entails.
if [ $ALL ]; then
	# Get a list of all the components in the src folder.
	NAME=$(ls -C $TCPATH/src)
fi

# BUILD THE COMPONENTS ONE BY ONE.

# Parse the build configurations file.
source $TCPATH/bld/common/load_build_configs

# NOTE - Since each component is independent of one another, the order they are built in doesn't matter.

# Iterate through each of the components in the queue.
for COMPONENT in $NAME
do
	# First, check if this component actually exists.
	if [ ! -d "$TCPATH/src/$COMPONENT" ]; then
		# The component does't have a matching source folder, so skip it and move on.
		echo -e "${RED}No source folder found.  Skipping component $COMPONENT.\n${NO_COLOUR}"
		continue
	fi

	# Indicate we are starting the build process for this component.
	echo -e "${BOLD_CYAN}Building component $COMPONENT...\n${NO_COLOUR}"

	# First, we need to read the configuration information for this component.
	echo -e "${CYAN}Loading component build configuration...\n${NO_COLOUR}"

	# Reset any variables which may have been set by the previous component.
	SUBSYSTEM=
	TARGET=
	PLATFORM=
	BOOTLOADER=

	# Check if we can find the config file for this component.
	if ! [ -r "$TCPATH/src/$COMPONENT/$COMPONENT.cfg" ]; then
		# The configuration file isn't there.  Ask the user if they want to create the file, or skip this component.
		echo -e "${RED}No configuration file found for component $COMPONENT.\n${NO_COLOUR}"
		echo -e -n "${GREEN}Do you wish to create the missing configuration file now? (Y/N) ${NO_COLOUR}"
		read -n 1
		echo -e "\n" # NOTE - This is because the read command won't put a newline after it reads a character.
		
		# If they responded YES, then rebuild the configuration file.  If NO, then skip this component.
		if [[ $REPLY =~ ^[Yy]$ ]]; then
			# Rebuild the configuration file.
			
			# Call the 'component_create' script: it will handle rebuilding the configuration file.
			bash $TCPATH/bld/create/create_component -c $COMPONENT

			# TODO - Need to check that this actually worked.  If it didn't, then we need to bail.
		else
			# Just skip this component and move on.
			echo -e "${YELLOW}No configuration file.  Skipping component $COMPONENT.\n${NO_COLOUR}"
			continue
		fi
	fi

	# Extract relevant configuration information from the configuration file.
	source $TCPATH/src/$COMPONENT/$COMPONENT.cfg 

	# Reset any variables which may have been set by a previous component.
	source $TCPATH/bld/common/clear_bconf_vars

	# Check to see if we can find a matching build configuration.
	BCONF="bconf_${TARGET}_${PLATFORM}"
	if [ `declare -f | grep "$BCONF ()" | wc -l` == 0 ]; then
		# No matching build configuration was found, so skip this component and move on.
		echo -e "${RED}No suitable build configuration found.  Skipping component $COMPONENT.\n${NO_COLOUR}"
		continue
	else
		# There is a matching build configuration, so load it.
		echo -e "${CYAN}Loading build configuration ($BCONF)...\n${NO_COLOUR}"
		$BCONF

		# Check that all the required variables were set by the build configuration.
		if [ -z "$BCONF_NAME" ] || [ -z "$MAKEFUNCTION" ] || [ -z "$MAKEFILE" ]; then
			# At least one of the required variables was not set, so skip this component and move on.
			echo -e "${RED}Build configuration incomplete.  Skipping component $COMPONENT.\n${NO_COLOUR}"
			continue
		fi
	
		# Check that the make function specified by the build configuration actually exists.
		if [ `declare -f | grep "$MAKEFUNCTION" | wc -l` == 0 ]; then
			# The specified make function doesn't exist, so skip this component and move on.
			echo -e "${RED}Build configuration specifies an invalid make function.  Skipping component $COMPONENT.\n${NO_COLOUR}"
			continue
		fi

		# The build configuration was loaded successfully.
		echo -e "${CYAN}Loaded build configuration '$BCONF_NAME'.\n${NO_COLOUR}"
	fi

	# TODO - If there is anything required to set up the platform, maybe it goes about here?
	
	# Now, we compile the application code.
	echo -e "${CYAN}Compiling application code...\n${NO_COLOUR}"

	# Count the number of C files in the source folder for this component.
	C_COUNT=`ls -l $TCPATH/src/$COMPONENT/*.c 2>/dev/null | wc -l`
	echo -e "${CYAN}Found $C_COUNT C source files.\n${NO_COLOUR}"

	# Count the number of CPP files in the source folder for this component.
	P_COUNT=`ls -l $TCPATH/src/$COMPONENT/*.cpp 2>/dev/null | wc -l`
	echo -e "${CYAN}Found $P_COUNT CPP source files.\n${NO_COLOUR}"

	# Count the number of S files in the source folder for this component.
	S_COUNT=`ls -l $TCPATH/src/$COMPONENT/*.s 2>/dev/null | wc -l`
	echo -e "${CYAN}Found $S_COUNT assembler source files.\n${NO_COLOUR}"

	# If there are no C source files and no assembler source files, then there is nothing to do.
	if [ ! $C_COUNT ] && [ ! $P_COUNT ] && [ ! $S_COUNT ]; then
		# There are no source files, so skip this component and move on.
		echo -e "${YELLOW}No source files present in source folder.  Skipping component $COMPONENT\n${NO_COLOUR}"
		continue
	fi

	# Make sure there aren't any old files in the spot we are about to put new files.
	rm -rf $TCPATH/$TMP_SRC_DIR/$COMPONENT
	mkdir -p $TCPATH/$TMP_SRC_DIR/$COMPONENT

	# Copy all the source files into the tmp directory, where the actual making will occur.
	cp $TCPATH/src/$COMPONENT/*.c $TCPATH/src/$COMPONENT/*.cpp $TCPATH/src/$COMPONENT/*.h $TCPATH/src/$COMPONENT/*.s $TCPATH/$TMP_SRC_DIR/$COMPONENT 2>/dev/null

	# Preprocess the copied header files.
	shopt -s nullglob
	for FILE in $TCPATH/$TMP_SRC_DIR/$COMPONENT/*.h; do
		# Preprocess this header file.
		preprocess_general $FILE
	done
	shopt -u nullglob

	# Preprocess the copied source files.
	shopt -s nullglob
	for FILE in $TCPATH/$TMP_SRC_DIR/$COMPONENT/*.c; do
		# Preprocess this source file.
		preprocess_general $FILE
	done
	shopt -u nullglob

	# Preprocess the copied source files.
	shopt -s nullglob
	for FILE in $TCPATH/$TMP_SRC_DIR/$COMPONENT/*.cpp; do
		# Preprocess this source file.
		preprocess_general $FILE
	done
	shopt -u nullglob

	# Preprocess the copied assembler files.
	shopt -s nullglob
	for FILE in $TCPATH/$TMP_SRC_DIR/$COMPONENT/*.s; do
		# Preprocess this source file.
		preprocess_general $FILE
	done
	shopt -u nullglob

	# Check to see if the platform is freertos.
	if [ $PLATFORM == "freertos" ]; then
	    # Fetch the freertos files.
	    get_rtos_files
	fi

	# Fetch any user library files which might be required.
	get_suitable_libs

	# Fetch the HAL library files.
	get_hal

	# Actually run the appropriate make function for this build configuration.
	$MAKEFUNCTION

	# Check if the make function worked.  If not, we don't go any further with this component.
	if [ $? != 0 ]; then
		# We just skip the bootloader and anything else, and move on.
		echo -e "${YELLOW}Application code build failed.  Skipping additional build stages...\n${NO_COLOUR}"
		continue
	fi

	# Check if we should also make the corresponding bootloader for this component.
	if [ $LOADER ]; then
		# We need to make the corresponding bootloader as well.

		# Now, we build the application code for the component.
		echo -e "${CYAN}Building bootloader for component ${COMPONENT}...\n${NO_COLOUR}"
		
		# First, we need to read the configuration information for this component.
		echo -e "${CYAN}Loading bootloader configuration...\n${NO_COLOUR}"

		# Reset any variables which may have been set by the previous bootloader.
		source $TCPATH/bld/common/clear_bconf_vars

		# Check to see if we can find a matching bootloader configuration.
		BLOADCONF="bload_${TARGET}_${BOOTLOADER}"
		if [ `declare -f | grep "$BLOADCONF ()" | wc -l` == 0 ]; then
			# No matching bootloader configuration was found, so skip this and move on.
			echo -e "${RED}No suitable bootloader configuration found.  Skipping bootloader for component $COMPONENT.\n${NO_COLOUR}"
			continue
		else
			# There is a matching bootloader configuration, so load it.
			echo -e "${CYAN}Loading bootloader configuration ($BLOADCONF)...\n${NO_COLOUR}"
			$BLOADCONF

			# Check that all the required variables were set by the bootloader configuration.
			if [ -z "$BLOAD_NAME" ] || [ -z "$MAKEFUNCTION" ] || [ -z "$MAKEFILE" ]; then
				# At least one of the required variables was not set, so skip this and move on.
				echo -e "${RED}Bootloader configuration incomplete.  Skipping bootloader for component $COMPONENT.\n${NO_COLOUR}"
				continue
			fi
	
			# Check that the make function specified by the bootloader configuration actually exists.
			if [ `declare -f | grep "$MAKEFUNCTION" | wc -l` == 0 ]; then
				# The specified make function doesn't exist, so skip this and move on.
				echo -e "${RED}Build configuration specifies an invalid make function.  Skipping bootloader for component $COMPONENT.\n${NO_COLOUR}"
				continue
			fi

			# The bootloader configuration was loaded successfully.
			echo -e "${CYAN}Loaded bootloader configuration '$BLOAD_NAME'.\n${NO_COLOUR}"
		fi

		# Now, we compile the bootloader.
		echo -e "${CYAN}Compiling bootloader...\n${NO_COLOUR}"

		# Actually run the appropriate make function for this build configuration.
		$MAKEFUNCTION
	fi
done

# Now wer are done with the actual work, we just have to tidy up.
echo -e "${BOLD_CYAN}Tidying up...\n${NO_COLOUR}"

# Check if we are supposed to be packing up the compilers after we are finished.
if [ $POSTPACK ]; then
	# Pack up the compilers.
	echo -e "${CYAN}Packing compilers...\n${NO_COLOUR}"
	pack_allc
else
	# Don't pack the compilers, so that subsequent build attempts are faster.
	echo -e "${CYAN}Leaving compilers unpacked.\n${NO_COLOUR}"
fi

# Check if we are supposed to be deleting temporary files after we are finished.
if [ ! $RETAIN ]; then
	# Delete all the temporary files.
	echo -e "${CYAN}Removing temporary files...\n${NO_COLOUR}"

	# Delete the temporary source folders.
	rm -rf  $TCPATH/$TMP_SRC_DIR
else
	# Don't delete any temporary files.
	echo -e "${CYAN}Retaining temporary files.\n${NO_COLOUR}"
fi

# Indicate that we're done.
echo -e "${BOLD_CYAN}All done...\n${NO_COLOUR}"

# All done.
exit 0

