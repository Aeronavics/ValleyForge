#!/usr/bin/env bash

#	Copyright (C) 2011 Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

###########################################################################################################################
###
### Name:		build
###
### Author:		Zac Frank
###
### Date Created:	17-11-2011
###
### Type:		Bash Script
###
### Purpose:		This script builds the components being developed with the toolchain.
###
###########################################################################################################################

# MAKE SURE WE'RE IN A SANE ENVIRONMENT.

# Determine which operating system we are using.
VF_OS="$(uname)"
unset VF_OS_DARWIN
unset VF_OS_LINUX
if [ "${VF_OS}" == "Darwin" ]; then
	VF_OS_DARWIN=1
	VF_OSCFG_READLINK='greadlink'
	VF_OSCFG_SED='gsed'
	VF_OSCFG_SED_EXTPARAM='-E'
	VF_OSCFG_SED_INLPARAM='-i'
else
	VF_OS_LINUX=1
	VF_OSCFG_READLINK='readlink'
	VF_OSCFG_SED='sed'
	VF_OSCFG_SED_EXTPARAM='-r'
	VF_OSCFG_SED_INLPARAM='-i'
fi

# Check if we've got a sufficiently advanced version of BASH to actually run the toolchain.
if [[ ${BASH_VERSINFO[0]} < 4 ]]; then
	# BASH version before v4 are missing things we required, such as "read -i".
	echo -e "\033[0;31mBASH versions prior to 4.x are not supported.  Upgrade to a never version of BASH."
	exit 1
fi

# Check if all the tools we're expecting are installed.
VF_REQUIRED="${VF_OSCFG_READLINK} ${VF_OSCFG_SED}"
for VF_REQUIRED_ITEM in ${VF_REQUIRED}; do
	if [ -z "$(which ${VF_REQUIRED})" ]; then
		echo -e "\033[0;31mUnabled to find: ${VF_REQUIRED}.  Install this utility then try again."
		exit 1
	fi
done
unset VF_REQUIRED_ITEM
unset VF_REQUIRED

# Determine what the absolute path to the root of the toolchain is.
VF_SCRIPT=$(${VF_OSCFG_READLINK} -f $0)
VF_SCRIPTPATH=$(dirname $VF_SCRIPT)
TCPATH=$(echo $VF_SCRIPTPATH | ${VF_OSCFG_SED} 's/\/bld.*//')
unset VF_SCRIPTPATH
unset VF_SCRIPT

# Define file names.

USER_CONFIG_FILE="var/config.cfg"
LIB_SOURCE_PATH="lib"
TMP_SRC_DIR="tmp/tmp_src"
OUTPUT_DIR="bin"

# Define the colours used for interface output.
source $TCPATH/bld/common/def_colours

# Define the functions used for preprocessing.
source $TCPATH/bld/preprocess/preprocess

# Define the functions used to set up the compilers.
source $TCPATH/bld/other/setup_compilers

# Define the functions used to set up any vendor sources.
source $TCPATH/bld/other/setup_vendorsources

# Import functions for code compliance testing.
source $TCPATH/bld/code_compliance/compliance_checks

# Define the functions used to actually build components.
for f in $(find $TCPATH/bld/make_functions -type f -name "make*"); do
	source "$f"
done

# Define the functions used to for code generation.
for f in $(find $TCPATH/bld/code_generation -type f -name "gen_*"); do
	source "$f"
done

# Create directories which don't come automatically with the toolchain.
source $TCPATH/bld/common/create_empty_dirs

##################################### MINOR FUNCTIONS ####################################

# Find suitable libraries and copy them into the tmp directory.
get_suitable_libs()
{
	# Indicate what we're doing.
	echo -e "${CYAN}Searching for compatible libraries...\n${NO_COLOUR}"

	# Check if a output location was given.
	if [ -z $1 ]; then
		# No specific output location was given, so use the default one for the current component.
		OUTPATH=$TCPATH/$TMP_SRC_DIR/$COMPONENT
	else
		# Use the specified output location instead.
		OUTPATH=$TCPATH/$TMP_SRC_DIR/$1
	fi

	# Work out what libraries there are.
	local VF_LIBRARIES=`find $TCPATH/${LIB_SOURCE_PATH} -name '*.cfg' | sed "s/.*\/${LIB_SOURCE_PATH}\///g" | grep -e "\([^/]*\)/\1.cfg" | sed "s/\/[^/]*\.cfg//g"`
	local VF_LIBRARY_COUNT=`echo ${VF_LIBRARIES} | wc -w | xargs`

	# Check if there are actually any libraries.
	if [ -z "${VF_LIBRARIES}" ]; then
		echo -e "${YELLOW}No libraries found.\n${NO_COLOUR}"
		return 0
	else
		echo -e "${CYAN}Found ${VF_LIBRARY_COUNT} candidate libaries: ${NO_COLOUR}${VF_LIBRARIES//$'\n'/' '}\n${NO_COLOUR}"
	fi

	# Iterate through all the libraries.
	local COUNT=0
	local VF_COMPATIBLE_LIBRARIES=
	for LIBRARY in ${VF_LIBRARIES}; do
		# TODO - This is going to totally bail if there are any files in $LIB_SOURCE_PATH.

		# Since the library might be nested, figure out what the actual name of the library will be.
		LIBRARY_NAME=${LIBRARY##*/}

		# Extract relevant configuration information from the configuration file.
		BUILDS=$(grep -v "#" $TCPATH/$LIB_SOURCE_PATH/$LIBRARY/$LIBRARY_NAME.cfg | grep "^BUILDS" | cut -d '=' -f2)
		
		# Check if it is suitable for the current build configuration.
		if [ ! -z $(echo $BUILDS | grep -w -o "$BCONF") ]; then
			# The current build configuration is listed in the configuration as suitable, so use this library.
			echo -e "${CYAN}Importing library $LIBRARY.\n${NO_COLOUR}"
			
			# Copy all the files across from the library directory.
			mkdir -p $OUTPATH/${LIBRARY}
			cp -rf $TCPATH/$LIB_SOURCE_PATH/$LIBRARY $OUTPATH

			# Increment the number of libraries imported.
			COUNT=`expr $COUNT + 1`
			VF_COMPATIBLE_LIBRARIES="${VF_COMPATIBLE_LIBRARIES} ${LIBRARY}"
		fi
	done

	# All done.
	echo -e "${CYAN}Imported $COUNT compatible libraries: ${NO_COLOUR}${VF_COMPATIBLE_LIBRARIES//$'\n'/' '}\n${NO_COLOUR}"
	return
}

# Find suitable HAL libraries and copy them into the tmp directory.
get_hal()
{
	# Check if using the HAL is disabled.
	if [ -n "${NOHAL}${VF_NO_HAL}" ]; then
		# The HAL is disabled, so don't do anything here.
		echo -e "${YELLOW}'No HAL' option selected; not importing HAL.\n${NO_COLOUR}"
		return 0
	fi

	# Check if a output location was given.
	if [ -z $1 ]; then
		# No specific output location was given, so use the default one for the current component.
		OUTPATH=$TCPATH/$TMP_SRC_DIR/$COMPONENT/hal
	else
		# Use the specified output location instead.
		OUTPATH=$TCPATH/$TMP_SRC_DIR/$1
	fi

	# Check if the HAL header and source paths were set by the build configuration.
	if [ -z "$HAL_EN_LIST" ] || [ -z "$HAL_HEADER_PATH" ] || [ -z "$HAL_SOURCE_PATH" ] || [ ! -d ${TCPATH}/$HAL_HEADER_PATH ] || [ ! -d ${TCPATH}/$HAL_SOURCE_PATH ]; then
		# We don't import the HAL at all.
		echo -e "${YELLOW}Not importing HAL for this build configuration.\n${NO_COLOUR}"
		return 0
	fi
	# Else, we're going to use the HAL.
	mkdir -p $OUTPATH

	# Indicate what we're doing.
	echo -e "${CYAN}Importing HAL...\n${NO_COLOUR}"

	# Copy in the common HAL files.
	cp $TCPATH/$HAL_HEADER_PATH/hal.hpp $OUTPATH
	cp $TCPATH/$HAL_SOURCE_PATH/hal.cpp $OUTPATH 2>/dev/null
	cp $TCPATH/$HAL_SOURCE_PATH/hal.s $OUTPATH 2>/dev/null
	cp $TCPATH/$HAL_SOURCE_PATH/hal.o $OUTPATH 2>/dev/null

	# Copy target specific configuration files.
	cp $TCPATH/$HAL_SOURCE_PATH/target_config.* $OUTPATH
	cp $TCPATH/$HAL_SOURCE_PATH/target_config_*.* $OUTPATH 2>/dev/null

	# Only import each particular peripheral if it is enabled in the configuration.

	# Iterate through the items in the enabled HAL peripherals list.
	for PERIPHERAL in $HAL_EN_LIST; do
		# Copy the corresponding interface files over.
		cp $TCPATH/$HAL_HEADER_PATH/$PERIPHERAL.h $OUTPATH 2>/dev/null
		cp $TCPATH/$HAL_HEADER_PATH/$PERIPHERAL.hpp $OUTPATH 2>/dev/null
		cp $TCPATH/$HAL_HEADER_PATH/$PERIPHERAL.hs $OUTPATH 2>/dev/null

		# Copy the corresponding implementation files over.
		cp $TCPATH/$HAL_SOURCE_PATH/${PERIPHERAL}_*.h $OUTPATH 2>/dev/null
		cp $TCPATH/$HAL_SOURCE_PATH/${PERIPHERAL}_*.hpp $OUTPATH 2>/dev/null
		cp $TCPATH/$HAL_SOURCE_PATH/${PERIPHERAL}_*.hs $OUTPATH 2>/dev/null
		cp $TCPATH/$HAL_SOURCE_PATH/$PERIPHERAL.c $OUTPATH 2>/dev/null
		cp $TCPATH/$HAL_SOURCE_PATH/$PERIPHERAL.cpp $OUTPATH 2>/dev/null
		cp $TCPATH/$HAL_SOURCE_PATH/$PERIPHERAL.s $OUTPATH 2>/dev/null
		cp $TCPATH/$HAL_SOURCE_PATH/$PERIPHERAL.o $OUTPATH 2>/dev/null
		cp $TCPATH/$HAL_SOURCE_PATH/${PERIPHERAL}_*.c $OUTPATH 2>/dev/null
		cp $TCPATH/$HAL_SOURCE_PATH/${PERIPHERAL}_*.cpp $OUTPATH 2>/dev/null
		cp $TCPATH/$HAL_SOURCE_PATH/${PERIPHERAL}_*.s $OUTPATH 2>/dev/null
		cp $TCPATH/$HAL_SOURCE_PATH/${PERIPHERAL}_*.o $OUTPATH 2>/dev/null
	done

	# Preprocess the imported files.

	# Preprocess the copied header files.
	for FILE in $(find $OUTPATH -name "*.h"); do
		# Preprocess this source file.
		preprocess_hal $FILE
	done

	# Preprocess the copied header files.
	for FILE in $(find $OUTPATH -name "*.hpp"); do
		# Preprocess this source file.
		preprocess_hal $FILE
	done

	# Preprocess the copied header files.
	for FILE in $(find $OUTPATH -name "*.hs"); do
		# Preprocess this source file.
		preprocess_hal $FILE
	done

	# Preprocess the copied source files.
	for FILE in $(find $OUTPATH -name "*.c"); do
		# Preprocess this source file.
		preprocess_hal $FILE
	done

	# Preprocess the copied source files.
	for FILE in $(find $OUTPATH -name "*.cpp"); do
		# Preprocess this source file.
		preprocess_hal $FILE
	done

	# Preprocess the copied assembler files.
	for FILE in $(find $OUTPATH -name "*.s"); do
		# Preprocess this source file.
		preprocess_hal $FILE
	done

	# All done.
	echo -e "${CYAN}Imported HAL.\n${NO_COLOUR}"
	return
}

# Check what source code we seem to have available to build.
check_source()
{
	# Count the number of C files in the source folder for this component.
	C_COUNT=`find $TCPATH/$TMP_SRC_DIR/$COMPONENT -name "*.c" | wc -l | xargs`
	echo -e "${WHITE}Found $C_COUNT C source files.\n${NO_COLOUR}"

	# Count the number of CPP files in the source folder for this component.
	P_COUNT=`find $TCPATH/$TMP_SRC_DIR/$COMPONENT -name "*.cpp" | wc -l | xargs`
	echo -e "${WHITE}Found $P_COUNT CPP source files.\n${NO_COLOUR}"

	# Count the number of S files in the source folder for this component.
	S_COUNT=`find $TCPATH/$TMP_SRC_DIR/$COMPONENT -name "*.s" | wc -l | xargs`
	echo -e "${WHITE}Found $S_COUNT assembler source files.\n${NO_COLOUR}"

	# Count the number of PDE/INO files in the source folder for this component.
	I_COUNT=`find $TCPATH/$TMP_SRC_DIR/$COMPONENT -name "*.ino" -o -name "*.pde" | wc -l | xargs`
	echo -e "${WHITE}Found $I_COUNT PDE/INO source files.\n${NO_COLOUR}"

	# If there are no C/C++ source files and no assembler source files, then there is nothing to do.
	if [ $C_COUNT == "0" ] && [ $P_COUNT == "0" ] && [ $S_COUNT == "0" ] && [ $I_COUNT == "0" ]; then
		# There are no source files, so skip this component and move on.
		echo -e "${YELLOW}No application source files present.\n${NO_COLOUR}"
		return 1
	fi

	# All done.
	return 0
}

# Do generic pre-compile tasks; fetching source and preprocessing.
generic_precompile()
{
	# Check there is some source code to compile.
	if ! check_source; then
		# Seems there is nothing to do.
		NOCODE=1
		#return 1
	fi

	# Fetch any user library files which might be required.
	get_suitable_libs

	# Perform any required code generation.
	generate_code $TCPATH/$TMP_SRC_DIR/$COMPONENT

	# Perform any required preprocessing.
	preprocess_code $TCPATH/$TMP_SRC_DIR/$COMPONENT

	# Fetch the HAL library files.  This is done after other preprocessing, since the HAL is preprocessed separately.
	get_hal

	# Check if we are supposed to run compliance checks before building.
	if [ $VF_EN_COMPLIANCE_CHECKS ]; then
		# Create an output directory to put results into.
		if [ ${COMPLIANCE_OUTPUT_FILE} ]; then
			mkdir -p $TCPATH/$OUTPUT_DIR/$COMPONENT
		fi

		# Run code compliance checks.
		echo -e "${CYAN}Checking tools used for code compliance...\n${NO_COLOUR}"

		# Install tools used for code compliance if not present already.
		unpack_vendor_astyle
		unpack_vendor_uncrustify
		unpack_vendor_pcregrep

		echo -e "${CYAN}Checking code compliance...\n${NO_COLOUR}"
		if ! compliance_check_directory $TCPATH/$TMP_SRC_DIR/$COMPONENT $TCPATH/$OUTPUT_DIR/$COMPONENT/compliance_results.txt; then
			# Code compliance tests failed with errors, so we abort this component.
			echo -e "${RED}Code compliance tests failed.  Skipping component $COMPONENT.\n${NO_COLOUR}"
			return 1
		fi
	else
		# We're skipping all the code compliance checks.
		echo -e "${YELLOW}Not running code compliance checks.\n${NO_COLOUR}"
	fi

	# All done.
	return 0
}

# Preprocess any source files which require it.
preprocess_code()
{
	# Check if the specified location is actually legit.
	if [ ! -d $1 ]; then
		# The specified location is not a directory.
		echo -e "${RED}Invalid source location for preprocessing.\n${NO_COLOUR}"
		return 1
	fi
	echo -e "${CYAN}Preprocessing files...\n${NO_COLOUR}"

	# Construct a string with any required prune statements for files that should not be preprocessed.
	PREPROCESSOR_MASK_STRING=
	if [ -n "${PREPROCESSOR_MASK}" ]; then
		echo -e "${YELLOW}\tNot preprocessing some files according to mask: ${PREPROCESSOR_MASK}\n${NO_COLOUR}"
		for PREPROCESSOR_MASK_WORD in ${PREPROCESSOR_MASK}; do
			PREPROCESSOR_MASK_STRING+=" -wholename $1/${PREPROCESSOR_MASK_WORD} -prune -o"
		done
	fi

	# Preprocess any appropriate files.
	for FILE in $(find $1 ${PREPROCESSOR_MASK_STRING} -name "*.h" -print \
							-o -name "*.hpp" -print \
							-o -name "*.hs" -print \
							-o -name "*.c" -print \
							-o -name "*.cpp" -print \
							-o -name "*.s" -print); do
		# Preprocess this header file.
		echo -e "${CYAN}\tPreprocessing file ${FILE##*/}...${NO_COLOUR}"
		preprocess_general $FILE
	done
	echo ""

	# All done.
	return 0
}

# Do any code generation which is required.
generate_code()
{
	# Check if the specified location is actually legit.
	if [ ! -d $1 ]; then
		# The specified location is not a directory.
		echo -e "${RED}Invalid source location for code generation.\n${NO_COLOUR}"
		return 1
	fi

	# Check if there is actually some code generation to be done.
	if [ -z "${CODE_GENERATORS}" ]; then
		# There is nothing to be done here.
		echo -e "${YELLOW}Not performing any code generation for this build configuration.\n${NO_COLOUR}"
		return 0
	fi

	# Iterate over the list of possible code generation functions.
	echo -e "${CYAN}Running code generators...\n${NO_COLOUR}"
	for f in $CODE_GENERATORS; do
		# Check that this code generator function specified by the build configuration actually exists.
		if [ `declare -f | grep "$f" | wc -l` == 0 ]; then
			# The specified code generator function doesn't exist, so skip this function and move on.
			echo -e "${RED}Build configuration specifies an invalid code generation function.  Skipping.\n${NO_COLOUR}"
			GENERATE_FUNCTION_INVALID=1
		else
			# The function is legit, so actually run the function.
			$f $1
		fi		
	done
	# Check if any of the code generation functions in the list were invalid.
	if [ ${GENERATE_FUNCTION_INVALID} ]; then
		# One of the specified code generation functions was invalid, so report the failure.
		GENERATE_FUNCTION_INVALID=
		return 1
	fi

	# All done.
	return 0
}

# Print a usage message.
usage()
{
	# Block-concatenate the message.
	cat << EOF
Usage: $0 [Options] [Component Names]

This script is used, as part of the 'Valley Forge' Embedded Toolchain to build components.

Parameters:

	[Component Names]		Space separated list of the components to build, or "all".

Options:
	-h --help			Show this message.
	-a --all			Build all components.
	-c --check			Run code compliance checks before building each component.
	-r --retain			Retain temporary files at completion of script.
	-b --bootloader			Build the bootloader for each component as well.
	-f --filesystem			Build the filesystem for each component as well. (Where appropriate.)
	-n --name <Component Name>	Specify the name of a component to build.
	-p --postpack			Pack up the compilers used after the build (takes longer next time).
	   --nohal			Do not compile using the HAL (mostly for debugging).
	   --noapp			Do not compile any application code (build filesystem/bootloader separately).
EOF
	# All done.
	return
}

# Tidy up all of the temporary files from building the component.
tidy_up() 
{
	# Now we are done with the actual work, we just have to tidy up.
	echo -e "${BOLD_CYAN}Tidying up...\n${NO_COLOUR}"

	# Check if we are supposed to be packing up the compilers after we are finished.
	if [ $POSTPACK ]; then
		# Pack up the compilers.
		echo -e "${CYAN}Packing compilers...\n${NO_COLOUR}"
		pack_allc

		# Pack up the vendor sources.
		echo -e "${CYAN}Packing vendor sources...\n${NO_COLOUR}"
		pack_allv
	else
		# Don't pack the compilers and vendor sources, so that subsequent build attempts are faster.
		echo -e "${CYAN}Leaving compilers and vendor sources unpacked.\n${NO_COLOUR}"
	fi

	# Check if we are supposed to be deleting temporary files after we are finished.
	if [ ! $RETAIN ]; then
		# Delete all the temporary files.
		echo -e "${CYAN}Removing temporary files...\n${NO_COLOUR}"

		# Delete the temporary source folders.
		rm -rf  $TCPATH/$TMP_SRC_DIR
	else
		# Don't delete any temporary files.
		echo -e "${CYAN}Retaining temporary files.\n${NO_COLOUR}"
	fi

	# All done.
	return 0
}

################################ SCRIPT PROPER STARTS HERE ###############################

# Delete any temporary source files from last time.
rm -rf  $TCPATH/TMP_SRC_DIR

# PARSE ANY COMMAND LINE PARAMETERS.

# Indicate where we are up to in the script.
echo -e "${BOLD_CYAN}Parsing command line parameters...\n${NO_COLOUR}"

# Reset fields to be extracted from the parameters.
NAME=
RETAIN=
ALL=
BUILD_BOOTLOADER=
BUILD_FILESYSTEM=
NOHAL=
NOAPP=
POSTPACK=
VF_EN_COMPLIANCE_CHECKS=

# Define variables required for 'getopt' to work.
PROGNAME=${0##*/} 
SHORTOPTS="harbfpcn:"
LONGOPTS="help,all,retain,bootloader,filesystem,postpack,check,nohal,noapp,name:"

# Use 'getopt' to parse the command line options.
if [ VF_OS_DARWIN ]; then
	ARGS=$(getopt $SHORTOPTS "$*")
else
	ARGS=$(getopt -s bash --options $SHORTOPTS --longoptions $LONGOPTS --name $PROGNAME -- "$@")
fi
eval set -- "$ARGS"

# Handle the parsed parameters.
while true; do
	# Select the appropriate behaviour for each parameter.
	case $1 in
		-h|--help)
			# Just print the usage message and then exit.
			usage
			exit 0
			;;
		-a|--all)
			# Select 'building all components'.
			ALL=1
			;;
		-r|--retain)
			# Select 'retaining temporary files'.
			RETAIN=1
			;;
		-b|--bootloader)
			# Select 'creating bootloaders'.
			BUILD_BOOTLOADER=1
			;;
		-f|--filesystem)
			# Select 'creating root filesystems'.
			BUILD_FILESYSTEM=1
			;;
		-p|--postpack)
			# Select 'pack up compilers, post build'.
			POSTPACK=1
			;;
		-c|--check)
			# Select 'run code compliance checks'.
			VF_EN_COMPLIANCE_CHECKS=1
			;;
		-n|--name)
			# Specify the name of the component to build.
			shift
			NAME="$NAME$1 " # NOTE - The space is intentional!
			;;
		--nohal)
			# Select 'not using HAL'.
			NOHAL=1
			;;
		--noapp)
			# Select 'not building application code'.
			NOAPP=1
			;;
		--)
			# We're done parsing options.  Anything else must be parameters.
			shift
			NAME="$NAME$* " # NOTE - The space in intentional!
			break
			;;
		*)
			# Anything else must be parameters.
			shift
			NAME="$NAME$* " # NOTE - The space is intentional!
			break
			;;
	esac

	# Advance on to the next parameter.
	shift
done

# If the provided name was 'all', then set the ALL variable even if the '-a' option wasn't given.
if [ "$NAME" == "all " ]; then  # NOTE - The space is intentional!
	ALL=1
fi

# If there was no component name specified, we'll just try to build the 'active component' instead.
if [ "$NAME" == " " ] && ! [ $ALL ]; then  # NOTE - The space is intentional!
	# Try to build the 'active component' instead.

	# Check to make sure the user configuration file is there.
	if [ ! -r $TCPATH/$USER_CONFIG_FILE ]; then
		# The configuration file is missing, so we don't know what to compile.
		echo -e "${BOLD_RED}FATAL - User configuration file ($USER_CONFIG_FILE) was not found.\n${NO_COLOUR}"
		exit 1
	fi

	# Extract the value of the 'active component' from the user configuration file.
	CURR=$(grep -v "#" $TCPATH/$USER_CONFIG_FILE | grep tc_curr | cut -d '=' -f 2)

	# Check if the toolchain has an 'active component' to build.
	if [ "$CURR" == "none" ] || [ -z "$CURR" ]; then
		# Tell the user there is nothing to compile, then exit.
		echo -e "${RED}No active component is set; nothing to build.\n${NO_COLOUR}"
		exit 0
	else
		# Schedule the 'active component' to be built.
		NAME=$CURR
	fi
fi

# If we're going to build 'everything', then get a list of what 'everything' actually entails.
if [ $ALL ]; then
	# Get a list of all the components in the src folder.
	NAME=$(ls -C $TCPATH/src)
fi

# BUILD THE COMPONENTS ONE BY ONE.

# Check if we are supposed to run compliance checks before building.
if [ $VF_EN_COMPLIANCE_CHECKS ]; then
	# Load the correct code compliance configuration.
	if ! compliance_load_config; then
		# Something went wrong, so we just tell the user and exit.
		echo -e "${RED}Unable to load code compliance configuration.\n${NO_COLOUR}"
		exit 0
	fi
fi

# Parse the build configurations file.
source $TCPATH/bld/common/load_build_configs

# NOTE - Since each component is independent of one another, the order they are built in doesn't matter.

# Iterate through each of the components in the queue.
for COMPONENT in $NAME
do
	# First, check if this component actually exists.
	if [ ! -d "$TCPATH/src/$COMPONENT" ]; then
		# The component does't have a matching source folder, so skip it and move on.
		echo -e "${RED}No source folder found.  Skipping component $COMPONENT.\n${NO_COLOUR}"
		continue
	fi

	# Indicate we are starting the build process for this component.
	echo -e "${BOLD_CYAN}Building component $COMPONENT...\n${NO_COLOUR}"

	# First, we need to read the configuration information for this component.
	echo -e "${CYAN}Loading component build configuration...\n${NO_COLOUR}"

	# Since the component might be nested, figure out what the actual name of the component will be.
	COMPONENT_NAME=${COMPONENT##*/}

	# Reset any variables which may have been set by the previous component.
	source $TCPATH/bld/common/clear_component_vars

	# Check if we can find the config file for this component.
	if ! [ -r "$TCPATH/src/$COMPONENT/$COMPONENT_NAME.cfg" ]; then
		# The configuration file isn't there.  Ask the user if they want to create the file, or skip this component.
		echo -e "${RED}No configuration file found for component $COMPONENT.\n${NO_COLOUR}"
		echo -e -n "${GREEN}Do you wish to create the missing configuration file now? (Y/N) ${NO_COLOUR}"
		read -n 1
		echo -e "\n" # NOTE - This is because the read command won't put a newline after it reads a character.
		
		# If they responded YES, then rebuild the configuration file.  If NO, then skip this component.
		if [[ $REPLY =~ ^[Yy]$ ]]; then
			# Rebuild the configuration file.
			
			# Call the 'component_create' script: it will handle rebuilding the configuration file.
			bash $TCPATH/bld/create/create_component --component $COMPONENT

			# Check that the component configuration was actually created.
			if [ ! -f ${TCPATH}/src/${COMPONENT}/${COMPONENT_NAME}.cfg ]; then
				echo -e "${RED}Creation of the configuration file has failed. Exiting...\n${NO_COLOUR}"
				exit 1
			fi
		else
			# Just skip this component and move on.
			echo -e "${YELLOW}No configuration file.  Skipping component $COMPONENT.\n${NO_COLOUR}"
			continue
		fi
	fi

	# Extract relevant configuration information from the configuration file.
	source $TCPATH/src/$COMPONENT/$COMPONENT_NAME.cfg 

	# Reset any variables which may have been set by a previous component.
	source $TCPATH/bld/common/clear_bconf_vars

	# Check to see if we can find a matching build configuration.
	BCONF="bconf_${TARGET}_${PLATFORM}"
	if [ `declare -f | grep "$BCONF ()" | wc -l` == 0 ]; then
		# No matching build configuration was found, so skip this component and move on.
		echo -e "${RED}No suitable build configuration found.  Skipping component $COMPONENT.\n${NO_COLOUR}"
		continue
	else
		# There is a matching build configuration, so load it.
		echo -e "${CYAN}Loading build configuration ($BCONF)...\n${NO_COLOUR}"
		$BCONF

		# Check that all the required variables were set by the build configuration.
		if [ -z "$BCONF_NAME" ] || [ -z "$MAKEFUNCTION" ]; then
			# At least one of the required variables was not set, so skip this component and move on.
			echo -e "${RED}Build configuration incomplete.  Skipping component $COMPONENT.\n${NO_COLOUR}"
			continue
		fi
	
		# Check that the make function specified by the build configuration actually exists.
		if [ `declare -f | grep "$MAKEFUNCTION" | wc -l` == 0 ]; then
			# The specified make function doesn't exist, so skip this component and move on.
			echo -e "${RED}Build configuration specifies an invalid make function.  Skipping component $COMPONENT.\n${NO_COLOUR}"
			continue
		fi

		# The build configuration was loaded successfully.
		echo -e "${CYAN}Loaded build configuration '$BCONF_NAME'.\n${NO_COLOUR}"
	fi

	# Extract relevant configuration information from the configuration file, again.  This allow component specific configurations.
	source $TCPATH/src/$COMPONENT/$COMPONENT_NAME.cfg 

	# Make sure there aren't any old files in the spot we are about to put new files.
	rm -rf $TCPATH/$TMP_SRC_DIR/$COMPONENT
	mkdir -p $TCPATH/$TMP_SRC_DIR/$COMPONENT

	# Copy the entire source folder into the tmp directory, where the actual making will occur.
	echo -e "${CYAN}Copying component source to temporary location...\n${NO_COLOUR}"
	cp -rf $TCPATH/src/$COMPONENT/* $TCPATH/$TMP_SRC_DIR/$COMPONENT

	# Check if there are any other source files we need to import.
	if [ ! -z "${SRC_IMPORT_FILES}" ]; then
		# There are some other files which need to be imported (probably from in res).
		echo -e "${CYAN}Importing external source file resources...\n${NO_COLOUR}"

		# Iterate over the list of source files to import.
		local SRC_IMPORT_FILE=
		for SRC_IMPORT_FILE in ${SRC_IMPORT_FILES}; do
			# Split the line into source and target.
			local SRC_IMPORT_TARGET=$(echo $SRC_IMPORT_FILE | cut -f 1 -d ':')
			local SRC_IMPORT_DESTINATION=$(echo $SRC_IMPORT_FILE | grep ":" | cut -f 2 -d ':')

			# Check if the target exists.
			if [ ! -f ${TCPATH}/${SRC_IMPORT_TARGET} ]; then
				# The file was missing, so we skip this file.
				echo -e "${RED}Could not import source file '${SRC_IMPORT_TARGET}'.  File not found.\n${NO_COLOUR}"
				continue
			fi

			# Check if the destination was blank.
			if [ -z "${SRC_IMPORT_DESTINATION}" ]; then
				# The destination was blank, so we skip this file.
				echo -e "${RED}Could not import source file '${SRC_IMPORT_TARGET}'.  No destination specified.\n${NO_COLOUR}"
				continue
			fi

			# Copy the target to the destination.
			cp ${TCPATH}/${SRC_IMPORT_TARGET} $TCPATH/$TMP_SRC_DIR/$COMPONENT/${SRC_IMPORT_DESTINATION}
			echo -e "${CYAN}\tImported source file '${SRC_IMPORT_DESTINATION}'.\n${NO_COLOUR}"
		done
	fi

	# Check that we haven't been asked to skip building the application code.
	if [ $NOAPP ]; then
		# Else, we're deliberately not compiling the application code for the component.
		echo -e "${YELLOW}Skipped application build for component $COMPONENT: application code disabled.\n${NO_COLOUR}"
	else
		# Now, we compile the application code.
		echo -e "${BOLD_CYAN}Making application code for ${COMPONENT}...\n${NO_COLOUR}"

		# Actually run the appropriate make function for this build configuration.
		$MAKEFUNCTION
		REPLY=$?

		# Check if there wasn't actually anything to build.
		if [ $NOCODE ]; then
			# There wasn't anything to build, so we just carry on.									
			echo -e "${YELLOW}Skipped application build for component $COMPONENT: nothing to build.\n${NO_COLOUR}"
			unset NOCODE

		# Check if the make function worked.
		elif [ $REPLY != 0 ]; then
			echo -e "${RED}Application code build failed.\n${NO_COLOUR}"
		fi
	fi

	# Check if we should also make the corresponding filesystem for this component.
	if [ "$BUILD_FILESYSTEM" -a "$FSFUNCTION" ]; then
		# We need to make the corresponding filesystem as well.

		# Now, we build the filesystem for the component.
		echo -e "${BOLD_CYAN}Building filesystem for ${COMPONENT}...\n${NO_COLOUR}"
	
		# Check that the make function specified by the bootloader configuration actually exists.
		if [ `declare -f | grep "$FSFUNCTION" | wc -l` == 0 ]; then
			# The specified make function doesn't exist, so skip this and move on.
			echo -e "${RED}Build configuration specifies an invalid filesystem make function.  Skipping creating filesystem for component $COMPONENT.\n${NO_COLOUR}"
		else		
			# Actually run the appropriate make function for this build configuration.
			$FSFUNCTION
			REPLY=$?

			# Check if there wasn't actually anything to build.
			if [ $NOCODE ]; then
				# There wasn't anything to build, so we just carry on.
				echo -e "${YELLOW}Skipped filesystem build for component $COMPONENT.\n${NO_COLOUR}"
				NOCODE=

			# Check if the make function worked.
			elif [ $REPLY != 0 ]; then
				echo -e "${RED}Filesystem build failed.\n${NO_COLOUR}"
			fi
		fi
	fi

	# Check if we should also make the corresponding bootloader for this component.
	if [ "$BUILD_BOOTLOADER" -a "$BOOTLOADER" ]; then
		# We need to make the corresponding bootloader as well.

		# Now, we build the bootloader code for the component.
		echo -e "${BOLD_CYAN}Building bootloader for ${COMPONENT}...\n${NO_COLOUR}"
		
		# First, we need to read the configuration information for this component.
		echo -e "${CYAN}Loading bootloader configuration...\n${NO_COLOUR}"

		# Reset any variables which may have been set by the previous bootloader.
		source $TCPATH/bld/common/clear_bconf_vars

		# Check to see if we can find a matching bootloader configuration.
		BLOADCONF="bload_${TARGET}_${BOOTLOADER}"
		if [ `declare -f | grep "$BLOADCONF ()" | wc -l` == 0 ]; then
			# No matching bootloader configuration was found, so skip this and move on.
			echo -e "${RED}No suitable bootloader configuration found.  Skipping bootloader for component $COMPONENT.\n${NO_COLOUR}"
			continue
		else
			# There is a matching bootloader configuration, so load it.
			echo -e "${CYAN}Loading bootloader configuration ($BLOADCONF)...\n${NO_COLOUR}"
			$BLOADCONF

			# Check that all the required variables were set by the bootloader configuration.
			if [ -z "$BLOAD_NAME" ] || [ -z "$MAKEFUNCTION" ]; then
				# At least one of the required variables was not set, so skip this and move on.
				echo -e "${RED}Bootloader configuration incomplete.  Skipping bootloader for component $COMPONENT.\n${NO_COLOUR}"
				continue
			fi
	
			# Check that the make function specified by the bootloader configuration actually exists.
			if [ `declare -f | grep "$MAKEFUNCTION" | wc -l` == 0 ]; then
				# The specified make function doesn't exist, so skip this and move on.
				echo -e "${RED}Build configuration specifies an invalid make function.  Skipping bootloader for component $COMPONENT.\n${NO_COLOUR}"
				continue
			fi

			# The bootloader configuration was loaded successfully.
			echo -e "${CYAN}Loaded bootloader configuration '$BLOAD_NAME'.\n${NO_COLOUR}"
		fi

		# Now, we compile the bootloader.
		echo -e "${CYAN}Making bootloader...\n${NO_COLOUR}"

		# Actually run the appropriate make function for this build configuration.
		$MAKEFUNCTION
		REPLY=$?

		# Check if there wasn't actually anything to build.
		if [ $NOCODE ]; then
			# There wasn't anything to build, so we just carry on.									
			echo -e "${YELLOW}Skipped bootloader build for component $COMPONENT.\n${NO_COLOUR}"
			NOCODE=

		# Check if the make function worked.
		elif [ $REPLY != 0 ]; then
			echo -e "${RED}Bootloader code build failed.\n${NO_COLOUR}"
		fi
	fi

	# Check if there are any other files in the source folder which need to be copied across.
	if [ -z "${RESOURCE_FILES}" ]; then
		# There aren't any resources files to copy over.
		echo -e "${CYAN}No resource files to copy.\n${NO_COLOUR}"
	else
		# There are some resources files to copy over to the output directory.
		echo -e "${CYAN}Copying resource files to output:${NO_COLOUR}"
		
		# Make sure there is somewhere to put the files.
		mkdir -p ${TCPATH}/$OUTPUT_DIR/${COMPONENT}
		
		# Copy each of the files across.
		for FILE in ${RESOURCE_FILES}; do
			if [ -f "${TCPATH}/src/${COMPONENT}/${FILE}" ]; then
				cp ${TCPATH}/src/${COMPONENT}/${FILE} ${TCPATH}/${OUTPUT_DIR}/${COMPONENT}/${FILE}
				echo -e "${CYAN}\t${FILE} from src/${COMPONENT}.${NO_COLOUR}"

			elif [ -f "${TCPATH}/var/${COMPONENT}/${FILE}" ]; then
				cp ${TCPATH}/var/${COMPONENT}/${FILE} ${TCPATH}/${OUTPUT_DIR}/${COMPONENT}/${FILE}
				echo -e "${CYAN}\t${FILE} from var/${COMPONENT}.${NO_COLOUR}"

			else
				# The file seems to be missing.
				echo -e "${YELLOW}\tUnable to find resouce file: ${FILE}.${NO_COLOUR}"
			fi
		done
		echo ""
	fi
done

# Remove any temporary files if we haven't specifically asked to keep them.
tidy_up

# All done.
echo -e "${BOLD_CYAN}All done...\n${NO_COLOUR}"
exit 0
