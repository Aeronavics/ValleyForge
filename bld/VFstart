#!/usr/bin/env bash

#	Copyright (C) 2011 Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

###########################################################################################################################
###
### Name:		VFStart
###
### Author:		Zac Frank
###
### Date Created:	15-11-2011
###
### Type:		Bash Script
###
### Purpose:    This script is the starting script for the ValleyForge toolchain. It gives the user some 	###
###			options as to what they would like to do, then calls other scripts depending on the user's	###
###			input.
###
###########################################################################################################################

# MAKE SURE WE'RE IN A SANE ENVIRONMENT.

# Determine which operating system we are using.
VF_OS="$(uname)"
unset VF_OS_DARWIN
unset VF_OS_LINUX
if [ "${VF_OS}" == "Darwin" ]; then
	VF_OS_DARWIN=1
	VF_OSCFG_READLINK='greadlink'
	VF_OSCFG_SED='gsed'
	VF_OSCFG_SED_EXTPARAM='-E'
	VF_OSCFG_SED_INLPARAM='-i'
else
	VF_OS_LINUX=1
	VF_OSCFG_READLINK='readlink'
	VF_OSCFG_SED='sed'
	VF_OSCFG_SED_EXTPARAM='-r'
	VF_OSCFG_SED_INLPARAM='-i'
fi

# Check if we've got a sufficiently advanced version of BASH to actually run the toolchain.
if [[ ${BASH_VERSINFO[0]} < 4 ]]; then
	# BASH version before v4 are missing things we required, such as "read -i".
	echo -e "\033[0;31mBASH versions prior to 4.x are not supported.  Upgrade to a never version of BASH."
	exit 1
fi

# Check if all the tools we're expecting are installed.
VF_REQUIRED="${VF_OSCFG_READLINK} ${VF_OSCFG_SED}"
for VF_REQUIRED_ITEM in ${VF_REQUIRED}; do
	if [ -z "$(which ${VF_REQUIRED})" ]; then
		echo -e "\033[0;31mUnabled to find: ${VF_REQUIRED}.  Install this utility then try again."
		exit 1
	fi
done
unset VF_REQUIRED_ITEM
unset VF_REQUIRED

# Determine what the absolute path to the root of the toolchain is.
VF_SCRIPTPATH=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
TCPATH=$(echo $VF_SCRIPTPATH | ${VF_OSCFG_SED} 's/\/bld.*//')

# DEFINE CONSTANTS.

# Define file names.

TMP_SRC_DIR="tmp/tmp_src"
OUTPUT_DIR="bin"

# Define the colours used for interface output.
source $TCPATH/bld/common/def_colours

# Create directories which don't come automatically with the toolchain.
source $TCPATH/bld/common/create_empty_dirs

# Import functions for performing user configuration.
source $TCPATH/bld/edit/edit_user_config

# Import functions for manipulating config files.
source $TCPATH/bld/common/config_helpers

##################################### MINOR FUNCTIONS ####################################

# Determine the status of the active component.
check_active_component()
{
	# Check if there is an 'active component' specified by the user configuration.
	CURR=$(pull_key $TCPATH/${USER_CONFIG_FILE} "tc_curr")
	if [ -z "$CURR" ]; then
		# Check if there are actually any components listed in the source folder.
		if [ $(ls -1A $TCPATH/src | wc -l) -eq 0 ]; then
			# Indicate to the user that there are no source components at the moment.
			echo -e "${YELLOW}There are no components in this project yet.  To create a component, use CREATE -> NEW COMPONENT.\n${NO_COLOUR}"
		else
			# There is at least one component available, it just isn't activated.
			echo -e "${YELLOW}No component is currently set as active. To set a component to be active, use EDIT -> ACTIVATE.\n${NO_COLOUR}"
	    fi

	# Check if the active project doesn't actually exist.
	elif [ ! -d $TCPATH/src/$CURR ]; then
		# The active component doesn't exist (probably they've deleted it manually).

		# Check if there are actually any components listed in the source folder.
		if [ $(ls -1A $TCPATH/src | wc -l) -eq 0 ]; then
			# Indicate to the user that there are no source components at the moment.
			echo -e "${YELLOW}The active component does not exist.  To create a component, use CREATE -> NEW COMPONENT.\n${NO_COLOUR}"
		else
			# Indicate to the user that the active component does not exist.
			echo -e "${YELLOW}The active component doesn't exist. Please set a component to be active using EDIT -> ACTIVATE.\n${NO_COLOUR}"
		fi

		# Change the active component to nothing.
		CURR=
	else
		# An active component is set, and actually exists.
		echo -e "${BOLD_CYAN}Your active component is $CURR.\n${NO_COLOUR}"
	fi

	# All done.
	return 0
}

# Print a usage message.
usage()
{
	# Block-concatenate the message.
	cat << EOF

Usage: $0 [Options]

This script is used to interact with the 'Valley Forge' Embedded Toolchain.

Options:
	-h --help			Show this message.
	-b --block			Do not quit out of the toolchain interface after a single operation.
EOF
	# All done.
	return
}

################################ SCRIPT PROPER STARTS HERE ###############################

# PARSE ANY COMMAND LINE PARAMETERS.

# Reset fields to be extracted from the parameters.
BLOCKMODE=

# Define variables required for 'getopt' to work.
PROGNAME=${0##*/}
SHORTOPTS="hb"
LONGOPTS="help,block"

# Use 'getopt' to parse the command line options.
if [ VF_OS_DARWIN ]; then
	ARGS=$(getopt $SHORTOPTS "$*")
else
	ARGS=$(getopt -s bash --options $SHORTOPTS --longoptions $LONGOPTS --name $PROGNAME -- "$@")
fi
eval set -- "$ARGS"

# Handle the parsed parameters.
while true; do
	# Select the appropriate behaviour for each parameter.
	case $1 in
		-h|--help)
			# Just print the usage message and then exit.
			usage
			exit 0
			;;
		-b|--block)
			# Select block mode.
			BLOCKMODE=1
			;;
		--)
			# We're done parsing options.  We ignore anything else.
			shift
			break
			;;
		*)
			# We ignore anything else.
			shift
			break
			;;
	esac

	# Advance on to the next parameter.
	shift
done

# PRESENT THE USER WITH THE MAIN INTERFACE.

# Loop continuously until the user exits the script.
REDRAW_TOP=1
while :
do
	# We're at the top level.

	# Check if we should redraw the banner.
	if [ $REDRAW_TOP ]; then
		# Clear the terminal to keep things tidy.
		clear

		# Print welcome message.
		echo -e "${HIGHLIGHT_BLUE}${BOLD}\n ************  Welcome to the ValleyForge Embedded Toolchain Interface  *************${NO_COLOUR}\n"

		# Check if this is the first time the toolchain has been used by this user.
		STARTUP=$(pull_key $TCPATH/${USER_CONFIG_FILE} "tc_startup")
		if [ -z "$STARTUP" ] || [ "$STARTUP" == "start" ]; then
			# Print a message to the user.
			echo -e "${YELLOW}The first time the ValleyForge toolchain is used, some initial configuration is required.\n${NO_COLOUR}"

			# Prompt the user.
			echo -ne  "${GREEN}Do you want to run the setup process now (or be reminded later)? (Y/N or L) ${NO_COLOUR}"

			# Read a single character input from the user and select the appropriate response.
			read -s -n 1
			echo -e "\n" # NOTE - This is required since read won't add a newline after reading a single character.
			case "$REPLY" in
				"Y" | "y" )
					# Run the setup script.
					vf_config_wizard
					;;
				"N" | "n" )
					# The user doesn't want to run the setup.  So we'll just pretend that it has already been set up.
					push_key $TCPATH/${USER_CONFIG_FILE} "tc_startup" "notrun"
					;;
				"L" | "l" )
					# The user wants to be reminded later.
					push_key $TCPATH/${USER_CONFIG_FILE} "tc_startup" "later"
					;;
			esac
		elif [ "$STARTUP" == "later" ]; then
			# The user has not set their details in a previous setting, so remind them to.
		    echo -e "${YELLOW}Setup has not been completed.  To run setup process, use EDIT -> EDIT SETTINGS -> RERUN USER SETUP.\n${NO_COLOUR}"
		fi

		# Check on the status of the active component in this project.
		check_active_component
	fi
	REDRAW_TOP=

	# Print the prompt to the user.
	echo -e  "${GREEN}Please select an option:\n${NO_COLOUR}"
	echo -en "\t${UNDERLINED}I${NO_COLOUR}NFO    ${UNDERLINED}C${NO_COLOUR}REATE    ${UNDERLINED}E${NO_COLOUR}DIT    ${UNDERLINED}D${NO_COLOUR}ELETE    ${UNDERLINED}Q${NO_COLOUR}UIT${NO_COLOUR}"
	REDRAW_MENU=

	# Read a single character input from the user and select the appropriate response.
	read -s -n 1
	echo -e "\n" # NOTE - This is required since read won't add a newline after reading a single character.
	case "$REPLY" in
		"I" | "i" )
			# The user wants to view information.

			# Loop continuously until the user selects a suitable option.
			while :
			do
				# Print the submenu prompt to the user.
				echo -e "${GREEN}Please select an option:\n${NO_COLOUR}"
				echo -en "\t${UNDERLINED}A${NO_COLOUR}CTIVE Component    ${UNDERLINED}P${NO_COLOUR}ROJECT Summary    ${UNDERLINED}T${NO_COLOUR}OOLCHAIN Details    ${UNDERLINED}B${NO_COLOUR}ACK"

				# Read a single character input from the user and select the appropriate response.
				read -s -n 1
				echo -e "\n" # NOTE - This is required since read won't add a newline after reading a single character.
				case "$REPLY" in
					"A" | "a" )
						# Run the print component information script.
						bash $TCPATH/bld/other/print_info_component

						# Redraw the top level menu, since the user will probably want to do something, based on the printed information.
						REDRAW_MENU=1
						break
						;;

					"P" | "p" )
						# Run the print project information script.
						bash $TCPATH/bld/other/print_info_project

						# Check on the status of the active component in the project.
						check_active_component

						# Redraw the top level menu, since the user will probably want to do something, based on the printed information.
						REDRAW_MENU=1
						break
						;;

					"T" | 't' )
						# Run the print toolchain information script.
						bash $TCPATH/bld/other/print_info_toolchain

						# Redraw the top level menu, since the user will probably want to do something, based on the printed information.
						REDRAW_MENU=1
						break
						;;

					"B" | "b" | "Q" | "q" | "X" | "x" )
						# Go back one level.  Force redrawing the top level menu, even if we aren't in block mode.
						REDRAW_TOP=1
						break
						;;

					*)
						# Any other option is invalid.  We print a message to that effect and try again.
						echo -e "${RED}Invalid choice. Try again or press Q to quit.\n${NO_COLOUR}"
						continue
						;;
				esac

				# We're done here.
				break
			done
			;;


		"C" | "c" )
			# The user wants to create something.

			# Loop continuously until the user selects a suitable option.
			while :
			do
				# Print the submenu prompt to the user.
				echo -e "${GREEN}Please select an option:\n${NO_COLOUR}"
				echo -en "\tCreate ${UNDERLINED}C${NO_COLOUR}OMPONENT    Create ${UNDERLINED}F${NO_COLOUR}ILES    Create ${UNDERLINED}L${NO_COLOUR}IBRARY    ${UNDERLINED}B${NO_COLOUR}ACK"

				# Read a single character input from the user and select the appropriate response.
				read -s -n 1
				echo -e "\n" # NOTE - This is required since read won't add a newline after reading a single character.
				case "$REPLY" in
					"C" | "c" )
						# Run the create component script.
						bash $TCPATH/bld/create/create_component
						;;

					"F" | "f" )
						# Run the create files script.
						bash $TCPATH/bld/create/create_files
						;;

					"L" | "l" )
						# Run the create library script.
						bash $TCPATH/bld/create/create_library
						;;

					"B" | "b" | "Q" | "q" | "X" | "x" )
						# Go back one level.  Force redrawing the top level menu, even if we aren't in block mode.
						REDRAW_TOP=1
						break
						;;

					*)
						# Any other option is invalid.  We print a message to that effect and try again.
						echo -e "${RED}Invalid choice. Try again or press Q to quit.\n${NO_COLOUR}"
						continue
						;;
				esac

				# We're done here.
				break
			done
			;;

		"D" | "d" )
			# The user wants to delete something.

			# Loop continuously until the user selects a suitable option.
			while :
			do
				# Print the submenu prompt to the user.
				echo -e "${GREEN}Please select an option:\n${NO_COLOUR}"
				echo -en "\tDelete ${UNDERLINED}C${NO_COLOUR}OMPONENT    Delete ${UNDERLINED}L${NO_COLOUR}IBRARY    ${UNDERLINED}B${NO_COLOUR}ACK"

				# Read a single character input from the user and select the appropriate response.
				read -s -n 1
				echo -e "\n" # NOTE - This is required since read won't add a newline after reading a single character.
				case "$REPLY" in
					"C" | "c" )
						# Run the delete component script.
						bash $TCPATH/bld/delete/delete_component
						;;

					"L" | "l" )
						# Run the delete library script.
						bash $TCPATH/bld/delete/delete_library
						;;

					"B" | "b" | "Q" | "q" | "X" | "x" )
						# Go back one level.  Force redrawing the top level menu, even if we aren't in block mode.
						REDRAW_TOP=1
						break
						;;

					*)
						# Any other option is invalid.  We print a message to that effect and try again.
						echo -e "${RED}Invalid choice. Try again or press Q to quit.\n${NO_COLOUR}"
						continue
						;;
				esac

				# We're done here.
				break
			done
			;;

		"E" | "e" )
			# The user wants to edit something.

			# Loop continuously until the user selects a suitable option.
			while :
			do
				# Print the submenu prompt to the user.
				echo -e "${GREEN}Please select an option:\n${NO_COLOUR}"
				echo -en "\t${UNDERLINED}A${NO_COLOUR}CTIVATE Component    ${UNDERLINED}R${NO_COLOUR}ECONFIGURE Active Component    ${UNDERLINED}E${NO_COLOUR}DIT Settings    ${UNDERLINED}B${NO_COLOUR}ACK"

				# Read a single character input from the user and select the appropriate response.
				read -s -n 1
				echo -e "\n" # NOTE - This is required since read won't add a newline after reading a single character.
				case "$REPLY" in
					"A" | "a" )
						# Work out what components there are.
						COMPONENTS=`find $TCPATH/src/ -name '*.cfg' | sed "s/.*\/src\///g" | grep -e "\([^/]*\)/\1.cfg" | sed "s/\/[^/]*\.cfg//g"`
						COMPONENT_COUNT=`echo ${COMPONENTS} | wc -w`

						# Check if there are actually some valid choices.
						if [ ${COMPONENT_COUNT} == 0 ]; then
							echo -e "${YELLOW}There are currently no components in this project.  Create a new component with CREATE -> CREATE COMPONENT.\n${NO_COLOUR}"
							CURR=


						# Else if there is only one, then there is no choice involved.
						elif [ ${COMPONENT_COUNT} == 0 ]; then
							echo -e "${YELLOW}There is only one component in this project.  Create further components with CREATE -> CREATE COMPONENT.\n${NO_COLOUR}"
							CURR=${COMPONENTS}

						# Else let the user choose one of the options.
						else
							# Create a menu of choices and have the user select one.
							echo -e "${GREEN}Select the component to activate from the list below:${NO_COLOUR}"
							select CURR in ${COMPONENTS}; do
								# Check that the user wasn't a moron.
								if [ -z "$CURR" -o -z `echo "${COMPONENTS}" | grep "$CURR"` ]; then
									echo -e "${RED}Invalid choice.  Try again.\n${NO_COLOUR}"
								else
									echo -e "${BOLD_CYAN}Activated component $CURR.\n${NO_COLOUR}"
									break
								fi
							done
						fi

						# Write the choice of component to file.
						CURR_SED=`echo $CURR | sed 's/\//\\\\\//g'`
						push_key $TCPATH/${USER_CONFIG_FILE} "tc_curr" "$CURR_SED"
						;;

					"R" | "r" )
						# Check that there is an active component selected.
						if [ "$CURR" == "none" ] || [ -z "$CURR" ]; then
							# There is no active component selected, so nothing to do here.
							echo -e "${RED} No component set as active.  Cannot reconfigure active component.\n${NO_COLOUR}"
							REDRAW_TOP=1
							break

						# Check if the active project doesn't actually exist.
						elif [ ! -d $TCPATH/src/$CURR ]; then
							# The active component doesn't exist (probably they've deleted it manually).
							echo -e "${RED} Active component does not exist.  Cannot reconfigure active component.\n${NO_COLOUR}"
							REDRAW_TOP=1
							break
						fi
							# Else we're good to go.

						# Run the create component script on the active component.
						bash $TCPATH/bld/create/create_component -c $CURR
						;;

					"E" | "e" )
						# Run the edit script.
						vf_config_ui
						;;

					"B" | "b" | "Q" | "q" | "X" | "x" )
						# Go back one level.  Force redrawing the top level menu, even if we aren't in block mode.
						REDRAW_TOP=1
						break
						;;

					*)
						# Any other option is invalid.  We print a message to that effect and try again.
						echo -e "${RED}Invalid choice. Try again or press Q to quit.\n${NO_COLOUR}"
						continue
						;;
				esac

				# We're done here.
				break
			done
			;;

		"Q" | "q" | "X" | "x")
			# The user probably wants to exit.
			break
			;;

		*)
			# Any other option is invalid.  We print a message to that effect and try again.
			echo -e "${RED}Invalid choice. Try again or press Q to quit.\n${NO_COLOUR}"
			continue
			;;
	esac

	# Check if the script returned an error condition or not.
	if [ $? != 0 ]; then
		# Check if we are in block mode, which means the UI will reappear, covering any messages.
		if [ $BLOCKMODE ]; then
			# Pause so the user can see any messages.
			read -n 1 -p "Press any key to continue..."
		fi
	fi

	# If we need to redraw the banner, then we have to draw the menu as well.
	if [ $REDRAW_TOP ]; then
		# Also redraw the top menu.
		REDRAW_MENU=1
	fi
	# Check if we are supposed to be redrawing the top level menu again.
	if [ $REDRAW_MENU ]; then
		# Loop back up the top again.
		continue
	fi

	# Check if we are in block mode or not.
	if [ ! $BLOCKMODE ]; then
		# We are not in block mode, so we quit rather than waiting for the user to make a second choice.
		break
	fi
done

# All done.
echo -e "${HIGHLIGHT_BLUE}${BOLD}**********************    Closing ValleyForge Interface...    ***********************${NO_COLOUR}\n"
exit 0
