#!/usr/bin/env bash
# Having the shebang at the top makes my text editor colour the contents of the file nicely.  It isn't required though.

#	Copyright (C) 2017 Aeronavics
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

# This is a config file for the different targets of the ValleyForge toolchain.

# This file contains configurations for embedded ARM architecture targets (usually Cortex type CPUs running baremetal).

# This section contains information on the application build profiles.

function bcdefs_common_F103xx_stm
{
	# General keys for AVR targets.

	MAKEFUNCTION=makecortex
	MAKEFILE=${TCPATH}/res/common/Makefile
	IOHEADER="\"io.h\""
	#SRC_IMPORT_FILES+=" res/arm/embedded-arm/stm32f10x/io.h:io.h"
	STDINTHEADER="<stdint.h>"
		# Compilers and flags.
	C_COMPILER=arm-none-eabi-g++
	P_COMPILER=arm-none-eabi-g++
	ASSEMBLER=arm-none-eabi-as
	LINKER=arm-none-eabi-g++
	OBJCOPY=arm-none-eabi-objcopy
	OBJDUMP=arm-none-eabi-objdump
	SIZE=arm-none-eabi-size
	DEBUGGER=arm-none-eabi-gdb
	MCU_CODE="cortex-m3"
	OPTLEVEL='s' # Choose s for size, or 0-3 for performance.
	#CFLAGS="-mcpu=${MCU_CODE} -O${OPTLEVEL} -mthumb -mfloat-abi=soft -D__weak=\"__attribute__((weak))\" -D__packed=\"__attribute__((__packed__))\" -DUSE_HAL_DRIVER -DSTM32F103xB -Wall -fmessage-length=0 -ffunction-sections -std=c11 -c -fmessage-length=0 -MMD -MP -MF\"$(@:%.o=%.d)\" -MT"	
	#CFLAGS='-Wall -mcpu=${MCU_CODE} -O${OPTLEVEL} -D__weak=\"__attribute__\(\(weak\)\)\"  -D__packed=\"__attribute__\(\(__packed__\)\)\" -DUSE_HAL_DRIVER -mthumb -fpack-struct -fshort-enums -funsigned-bitfields -funsigned-char  -fno-exceptions -D__STM32_F103xx__ -std=c11 -ffunction-sections -fdata-sections'
	#CFLAGS='-Wall -mcpu=${MCU_CODE} -O${OPTLEVEL} -D__weak=\"__attribute__\(\(weak\)\)\"  -D__packed=\"__attribute__\(\(__packed__\)\)\" -DUSE_HAL_DRIVER -mthumb -c -fmessage-length=0 -fpack-struct -D__STM32_F103xx__ -std=c11 -ffunction-sections -fdata-sections'
	#PFLAGS='-Wall -mcpu=${MCU_CODE} -O${OPTLEVEL} -D__weak=\"__attribute__\(\(weak\)\)\"  -D__packed=\"__attribute__\(\(__packed__\)\)\" -DUSE_HAL_DRIVER -mthumb -fno-rtti -fpack-struct -fshort-enums -funsigned-bitfields -funsigned-char -fno-exceptions -D__STM32_F103xx__ -std=c++11 -ffunction-sections -fdata-sections'
	PFLAGS='-I . -mcpu=${MCU_CODE} -mthumb -mfloat-abi=soft -D__weak=\"__attribute__\(\(weak\)\)\" -D__packed=\"__attribute__\(\(__packed__\)\)\" -DUSE_HAL_DRIVER -O${OPTLEVEL} -g0 -Wall -fmessage-length=0 -ffunction-sections -c -fno-exceptions -fno-rtti -fmessage-length=0 -std=c++11'
	CFLAGS='-I . -mcpu=${MCU_CODE} -mthumb -mfloat-abi=soft -D__weak=\"__attribute__\(\(weak\)\)\" -D__cplusplus -D__packed=\"__attribute__\(\(__packed__\)\)\" -DUSE_HAL_DRIVER -O${OPTLEVEL} -g0 -Wall -fmessage-length=0 -ffunction-sections -c -fno-exceptions -fmessage-length=0 -std=c11'
	#PFLAGS='-mcpu=${MCU_CODE} -mthumb -mfloat-abi=soft  -D__STM32_F103xx__ -DUSE_HAL_DRIVER -O${OPTLEVEL} -Wall -fmessage-length=0 -ffunction-sections -c -fmessage-length=0 -MMD -MP'
	#CFLAGS='-mcpu=${MCU_CODE} -mthumb -mfloat-abi=soft -D__STM32_F103xx__ -DUSE_HAL_DRIVER -O${OPTLEVEL} -Wall -fmessage-length=0 -ffunction-sections -c -fmessage-length=0 -MMD -MP'
	AFLAGS='-mcpu=${MCU_CODE} -mthumb -mfloat-abi=soft -g '
	#LFLAGS='-Wl,-Map,${COMPONENT}.map -mcpu=${MCU_CODE} -mthumb -nostdlib'
 	LFLAGS='-mcpu=${MCU_CODE} -mthumb -mfloat-abi=soft -specs=nosys.specs -specs=nano.specs -Wl,-Map=${COMPONENT}.map -Wl,--gc-sections -fno-exceptions -fno-rtti -lm'
	# Template generation keys.
	TEMPLATE_C_SOURCE="${TCPATH}/res/templates/c_template.c"
	TEMPLATE_CPP_SOURCE="${TCPATH}/res/templates/cpp_template.cpp"
	TEMPLATE_H_SOURCE="${TCPATH}/res/templates/h_template.h"
	TEMPLATE_HPP_SOURCE="${TCPATH}/res/templates/hpp_template.hpp"


	TARGET_SPECIFIC_CONFIG="res/arm/embedded-arm/stm32f10x/target_specific_config"


	# HAL specific keys.
#HAL_HEADER_PATH=res/common/hal
#HAL_SOURCE_PATH=res/arm/embedded-arm/stm32f10x/hal
#HAL_EN_LIST="gpio can"
	# Target specific config.

	

	# Platform specific keys.
	PLATFORM_SPECIFIC_CONFIG=

	# Uploading keys (common).
	UPLOAD_FUNCTIONS="upload_cscript upload_stlink"
		# Code generation keys.
	CODE_GENERATORS=" gen_stm_hal_import"
	CODE_GENERATORS_CONFIG_TIME=

}
