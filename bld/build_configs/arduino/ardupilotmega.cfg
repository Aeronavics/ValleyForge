#!/usr/bin/env bash
# Having the shebang at the top makes my text editor colour the contents of the file nicely.  It isn't required though.

#	Copyright (C) 2012 Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

# This is a config file for the different targets of the ValleyForge toolchain.

# This file contains configurations for the Arduino based ArduPilot-Mega target (distinct from the conventional ATmega2560 target).

# TODO - A number of the keys here would better be detected at build time, by parsing the Arduino 'boards.txt' configuration file.

# This section contains information on the application build profiles.

function bconf_ArduPilotMega_BareMetal()
{
bcdefs_common_arduino

BCONF_NAME="Arduino - ArduPilot Mega v1.0-2.5 - Main Processor (Baremetal)"

	# Compilers and flags.
CFLAGS+=' -D__AVR_ATmega2560__ -DF_CPU=16000000L '
PFLAGS+=' -D__AVR_ATmega2560__ -DF_CPU=16000000L '
LFLAGS+=' -Wl,--relax -Wl,-m,avr6 '
	# HAL specific keys.
HAL_HEADER_PATH=res/common/hal
HAL_SOURCE_PATH=res/avr/hal
HAL_EN_LIST=
	# Target specific keys (common to all AVR).
TARGET_SPECIFIC_CONFIG=res/arduino/target_specific_config
MCU_CODE=atmega2560
PORT_COUNT="A B C D E F G H I J K L"
	# Target specific keys (only for Arduino).
ARDUINO_VARIANT="mega"
ARDUINO_BOARD_TAG="mega2560"
ARDUINO_ALTCORE=
ARDUINO_CORE_DIR=
ARDUINO_CORELIB_DIR=
ARDUINO_VARI_DIR=
ARDUINO_SKETCH=
ARDUINO_LIB_DIR=
	# Uploading keys (common).
UPLOAD_FUNCTIONS="upload_avrdude upload_can upload_arduino"
	# Uploading Keys (via upload_avrdude).
AVRDUDE_PART="m2560"
APPLICATION_FLASH_SIZE="248K"
FLASH_PAGE_SIZE=256
SIGNATURE="0x1E9801"
AVRDUDE_LOCKED_BYTEVAL="0x3F"
AVRDUDE_UNLOCKED_BYTEVAL="0x3F"
	# Code generation keys.
CODE_GENERATORS="gen_canmsgs"
}

# This section contains information on the bootloader build profiles.

function bload_ArduPilotMega_ArduinoDefault()
{
BLOAD_NAME="Default Arduino (STK500-Compatible USB/ISP) Bootloader"
MAKEFUNCTION=makearduino_bootloader
	# Target specific keys (only for Arduino).
BLOAD_ARDUINO_BOOTLOADER="hardware/arduino/avr/bootloaders/stk500v2/stk500boot_v2_mega2560.hex"
}

function bload_ArduPilotMega_ISP()
{
BLOAD_NAME="ATmega2560 ISP Only Bootloader"
MAKEFUNCTION=makeavr_bootloader
MAKEFILE=${TCPATH}/res/common/Makefile
SOURCEPATH=${TCPATH}/res/avr/bootloader
IOHEADER="<avr/io.h>"
STDINTHEADER="<stdint.h>"
	# Compilers and flags.
C_COMPILER=avr-gcc
P_COMPILER=avr-g++
ASSEMBLER=avr-as
LINKER=avr-gcc
OBJCOPY=avr-objcopy
OBJDUMP=avr-objdump
SIZE=avr-size
OPTLEVEL="s" # Choose s for size, or 0-3 for performance.
CFLAGS='-I . -g -mmcu=${MCU_CODE} -O${OPTLEVEL} -fpack-struct -fshort-enums -funsigned-bitfields -funsigned-char -fno-exceptions -Wall -std=c11'
PFLAGS='-I . -g -mmcu=${MCU_CODE} -O${OPTLEVEL} -fpack-struct -fshort-enums -funsigned-bitfields -funsigned-char -fno-exceptions -Wall -std=c++11'
AFLAGS='-mmcu=${MCU_CODE} -Wa'
LFLAGS='-Wl,-Map,${COMPONENT}.map -mmcu=${MCU_CODE} -Wl,--section-start=.text=${BOOTSTART} -Wl,--section-start=.shared_jumptable=${SHARED_FUNCTIONS_ADDRESS} -Wl,--undefined=_jumptable -Wl,--relax -Wl,-m,avr6 -Wl,--gc-sections -lm'
	# HAL specific keys.
	# TODO - Do we actually use the HAL in the AVR modular bootloader?  I thought we didn't.
HAL_HEADER_PATH=res/common/hal
HAL_SOURCE_PATH=res/avr/hal
HAL_EN_LIST="gpio watchdog tc eeprom"
	# Target specific keys (common to all AVR).
BLOAD_SPECIFIC_CONFIG=res/avr/bload_specific_config
MCU_CODE=atmega2560
BOOTSTART="3E000" # Starting address to place bootloader at.  See datasheet.
SHARED_FUNCTIONS_ADDRESS="0x3FFDE"
PORT_COUNT="A B C D E F G H I J K L"
MAX_EEPROM_ADDRESS="0FFF"
ACTIVE_MODULE=bootloader_module_isp
	# Code generation keys.
CODE_GENERATORS="gen_avrmagic"
}

function bload_ArduPilotMega_I2C()
{
BLOAD_NAME="ATmega2560 I2C Bootloader"
MAKEFUNCTION=makeavr_bootloader
MAKEFILE=${TCPATH}/res/common/Makefile
SOURCEPATH=${TCPATH}/res/avr/bootloader
IOHEADER="<avr/io.h>"
STDINTHEADER="<stdint.h>"
	# Compilers and flags.
C_COMPILER=avr-gcc
P_COMPILER=avr-g++
ASSEMBLER=avr-as
LINKER=avr-gcc
OBJCOPY=avr-objcopy
OBJDUMP=avr-objdump
SIZE=avr-size
OPTLEVEL="s" # Choose s for size, or 0-3 for performance.
CFLAGS='-I . -g -mmcu=${MCU_CODE} -O${OPTLEVEL} -fpack-struct -fshort-enums -funsigned-bitfields -funsigned-char -fno-exceptions -Wall -std=c11'
PFLAGS='-I . -g -mmcu=${MCU_CODE} -O${OPTLEVEL} -fpack-struct -fshort-enums -funsigned-bitfields -funsigned-char -fno-exceptions -Wall -std=c++11'
AFLAGS='-mmcu=${MCU_CODE} -Wa'
LFLAGS='-Wl,-Map,${COMPONENT}.map -mmcu=${MCU_CODE} -Wl,--section-start=.text=${BOOTSTART} -Wl,--section-start=.shared_jumptable=${SHARED_FUNCTIONS_ADDRESS} -Wl,--undefined=_jumptable -Wl,--relax -Wl,-m,avr6 -Wl,--gc-sections -lm'
	# HAL specific keys.
HAL_HEADER_PATH=res/common/hal
HAL_SOURCE_PATH=res/avr/hal
HAL_EN_LIST="gpio watchdog tc eeprom"
	# Target specific keys (common to all AVR).
BLOAD_SPECIFIC_CONFIG=res/avr/bload_specific_config
MCU_CODE=atmega2560
BOOTSTART="0x3E000" # Starting address to place bootloader at.  See datasheet.
SHARED_FUNCTIONS_ADDRESS="0x3FFDE"
PORT_COUNT="A B C D E F G H I J K L"
MAX_EEPROM_ADDRESS="0FFF"
ACTIVE_MODULE=bootloader_module_i2c
	# Code generation keys.
CODE_GENERATORS="gen_avrmagic"
}

function bload_ArduPilotMega_CANSPI()
{
BLOAD_NAME="ATmega2560 CANbus via Microchip MCP2515 via SPI Bootloader"
MAKEFUNCTION=makeavr_bootloader
MAKEFILE=${TCPATH}/res/common/Makefile
SOURCEPATH=${TCPATH}/res/avr/bootloader
IOHEADER="<avr/io.h>"
STDINTHEADER="<stdint.h>"
	# Compilers and flags.
C_COMPILER=avr-gcc
P_COMPILER=avr-g++
ASSEMBLER=avr-as
LINKER=avr-gcc
OBJCOPY=avr-objcopy
OBJDUMP=avr-objdump
SIZE=avr-size
OPTLEVEL="s" # Choose s for size, or 0-3 for performance.
CFLAGS='-I . -g -mmcu=${MCU_CODE} -O${OPTLEVEL} -fpack-struct -fshort-enums -funsigned-bitfields -funsigned-char -fno-exceptions -Wall -std=c11'
PFLAGS=CFLAGS='-I . -g -mmcu=${MCU_CODE} -O${OPTLEVEL} -fpack-struct -fshort-enums -funsigned-bitfields -funsigned-char -fno-exceptions -Wall -std=c++11'
AFLAGS='-mmcu=${MCU_CODE} -Wa'
LFLAGS='-Wl,-Map,${COMPONENT}.map -mmcu=${MCU_CODE} -Wl,--section-start=.text=${BOOTSTART} -Wl,--section-start=.shared_jumptable=${SHARED_FUNCTIONS_ADDRESS} -Wl,--undefined=_jumptable -Wl,--relax -Wl,-m,avr6 -Wl,--gc-sections -lm'
	# Target specific keys (common to all AVR).
BLOAD_SPECIFIC_CONFIG=res/avr/bload_specific_config
MCU_CODE=atmega2560
BOOTSTART="0x3E000" # Starting address to place bootloader at.  See datasheet.
SHARED_FUNCTIONS_ADDRESS="0x3F9E0"
PORT_COUNT="A B C D E F G H I J K L"
PIN_CHANGE_INTERRUPT_VECTORS="PCINT0_vect PCINT1_vect PCINT2_vect"
PIN_CHANGE_INTERRUPTS="PCINT0 PCINT1 PCINT2 PCINT3 PCINT4 PCINT5 PCINT6 PCINT7 PCINT8 PCINT9 PCINT10 PCINT11 PCINT12 PCINT13 PCINT14 PCINT15 PCINT16 PCINT17 PCINT18 PCINT19 PCINT20 PCINT21 PCINT22 PCINT23"
PIN_CHANGE_INTERRUPT_PORTS="B E J K"
MAX_EEPROM_ADDRESS="0FFF"
ACTIVE_MODULE=bootloader_module_canspi
	# Code generation keys.
CODE_GENERATORS="gen_canmsgs gen_avrmagic"
}
