#! /bin/bash
# Having the shebang at the top makes my text editor colour the contents of the file nicely.  It isn't required though.

#	Copyright (C) 2012 Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

# This is a config file for the different targets of the ValleyForge toolchain.

# This file contains configurations for embedded ARM architecture targets (usually Cortex type CPUs running baremetal).

# This section contains information on the application build profiles.

function bconf_LM3S1968_BareMetal()
{
BCONF_NAME="Luminary Stellaris LM3S1968"
MAKEFUNCTION=makecortex
MAKEFILE=${TCPATH}/res/common/Makefile
IOHEADER="\"io.h\""
STDINTHEADER="<stdint.h>"
SRC_IMPORT_FILES="res/arm/embedded-arm/lm3s1968/io.h:io.h"
	# Compilers and flags.
C_COMPILER=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-gcc
P_COMPILER=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-gcc
ASSEMBLER=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-gcc
LINKER=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-gcc
OBJCOPY=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-objcopy
OBJDUMP=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-objdump
SIZE=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-size
CFLAGS='-I . -Wall -mcpu=${MCU_CODE} -mthumb -fpack-struct -fshort-enums -funsigned-bitfields -funsigned-char -fno-exceptions -std=c11'
PFLAGS='-I . -Wall -mcpu=${MCU_CODE} -mthumb -fpack-struct -fshort-enums -funsigned-bitfields -funsigned-char -fno-exceptions -std=c++11'
AFLAGS='-x assembler-with-cpp -Wa -gstabs -mcpu=${MCU_CODE} -mthumb'
LFLAGS='-Wl,-Map,${COMPONENT}.map -mcpu=${MCU_CODE} -mthumb -nostdlib'
	# HAL specific keys.
HAL_HEADER_PATH=res/common/hal
HAL_SOURCE_PATH=res/arm/embedded-arm/lm3s1968/hal
HAL_EN_LIST=
	# Target specific config.
TARGET_SPECIFIC_CONFIG="res/arm/embedded-arm/lm3s1968/target_specific_config"
MCU_CODE="cortex-m3"
LINKSCRIPT=${TCPATH}/res/arm/embedded-arm/lm3s1968/linkscript.ld
	# Platform specific keys.
PLATFORM_SPECIFIC_CONFIG=
TEMPLATE_C_SOURCE="${TCPATH}/res/templates/c_template.c"
TEMPLATE_CPP_SOURCE="${TCPATH}/res/templates/cpp_template.cpp"
TEMPLATE_H_SOURCE="${TCPATH}/res/templates/h_template.h"
TEMPLATE_HPP_SOURCE="${TCPATH}/res/templates/hpp_template.hpp"
	# Uploading keys (common).
UPLOAD_FUNCTIONS="upload_cscript upload_openocd"
	# Uploading keys (via upload_openocd).
OPENOCD_INTERFACE_FILE="res/common/openocd/none.cfg"
OPENOCD_TARGET_FILE="res/arm/embedded-arm/lm3s1968/openocd_target_config.cfg"
OPENOCD_COMMAND_FILE="res/common/openocd/commands.cfg"
	# Code generation keys.
CODE_GENERATORS=
CODE_GENERATORS_CONFIG_TIME=
}

function bconf_LM3S1968_FreeRTOS()
{
BCONF_NAME="Luminary Stellaris LM3S1968 running FreeRTOS Platform"
MAKEFUNCTION=makecortex
MAKEFILE=${TCPATH}/res/common/Makefile
IOHEADER="\"io.h\""
STDINTHEADER="<stdint.h>"
SRC_IMPORT_FILES="res/arm/embedded-arm/lm3s1968/io.h:io.h"
	# Compilers and flags.
C_COMPILER=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-gcc
P_COMPILER=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-gcc
ASSEMBLER=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-gcc
LINKER=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-gcc
OBJCOPY=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-objcopy
OBJDUMP=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-objdump
SIZE=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-size
CFLAGS='-I . -I ./freertos -Wall -mcpu=${MCU_CODE} -mthumb -fpack-struct -fshort-enums -funsigned-bitfields -funsigned-char -fno-exceptions -std=c11'
PFLAGS='-I . -I ./freertos -Wall -mcpu=${MCU_CODE} -mthumb -fpack-struct -fshort-enums -funsigned-bitfields -funsigned-char -fno-exceptions -std=c++11'
AFLAGS='-x assembler-with-cpp -Wa -gstabs -mcpu=${MCU_CODE} -mthumb'
LFLAGS='-Wl,-Map,${COMPONENT}.map -mcpu=${MCU_CODE} -mthumb -nostartfiles'
	# HAL specific keys.
HAL_HEADER_PATH=res/common/hal
HAL_SOURCE_PATH=res/arm/embedded-arm/lm3s1968/hal
HAL_EN_LIST=
	# Target specific keys.
TARGET_SPECIFIC_CONFIG="res/arm/embedded-arm/lm3s1968/target_specific_config"
MCU_CODE="cortex-m3"
LINKSCRIPT=${TCPATH}/res/arm/embedded-arm/lm3s1968/linkscript.ld
	# Platform specific keys.
PLATFORM_SPECIFIC_CONFIG="res/common/platforms/freertos/platform_specific_config"
FREERTOS_COMMON_SOURCE="${TCPATH}/res/vendor/freertos/Source"
FREERTOS_PORTABLE_SOURCE="${TCPATH}/res/vendor/freertos/Source/portable/GCC/ARM_CM3"
FREERTOS_CONFIG_FILE="${TCPATH}/res/vendor/freertos/Demo/CORTEX_LM3Sxxxx_Eclipse/RTOSDemo/FreeRTOSConfig.h"
FREERTOS_MEMMAN_FILES="${TCPATH}/res/vendor/freertos/Source/portable/MemMang/heap_1.c ${TCPATH}/res/vendor/freertos/Source/portable/MemMang/heap_2.c ${TCPATH}/res/vendor/freertos/Source/portable/MemMang/heap_3.c ${TCPATH}/res/vendor/freertos/Source/portable/MemMang/heap_4.c"
FREERTOS_PATCHES="${TCPATH}/res/common/platforms/freertos/patches"
TEMPLATE_C_SOURCE="${TCPATH}/res/templates/freertos/c_template.c"
TEMPLATE_CPP_SOURCE="${TCPATH}/res/templates/freertos/cpp_template.cpp"
TEMPLATE_H_SOURCE="${TCPATH}/res/templates/h_template.h"
TEMPLATE_HPP_SOURCE="${TCPATH}/res/templates/hpp_template.hpp"
	# Uploading keys (common).
UPLOAD_FUNCTIONS="upload_cscript upload_openocd"
	# Uploading keys (via upload_openocd).
OPENOCD_INTERFACE_FILE="res/common/openocd/none.cfg"
OPENOCD_TARGET_FILE="res/arm/embedded-arm/lm3s1968/openocd_target_config.cfg"
OPENOCD_COMMAND_FILE="res/common/openocd/commands.cfg"
	# Code generation keys.
CODE_GENERATORS=
CODE_GENERATORS_CONFIG_TIME="gen_freertos"
}

function bconf_STM32F100RBT6B_BareMetal()
{
BCONF_NAME="STMicroelectronics STM32F100RBT6B Cortex-M3"
MAKEFUNCTION=makecortex
MAKEFILE=${TCPATH}/res/common/Makefile
IOHEADER="\"io.h\""
STDINTHEADER="<stdint.h>"
SRC_IMPORT_FILES="res/arm/embedded-arm/stm32f10x/io.h:io.h"
	# Compilers and flags.
C_COMPILER=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-gcc
P_COMPILER=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-gcc
ASSEMBLER=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-gcc
LINKER=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-gcc
OBJCOPY=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-objcopy
OBJDUMP=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-objdump
SIZE=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-size
DEBUGGER=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-gdb
CFLAGS='-I . -Wall -mcpu=${MCU_CODE} -mthumb -fpack-struct -fshort-enums -funsigned-bitfields -funsigned-char -fno-exceptions -std=c11'
PFLAGS='-I . -Wall -mcpu=${MCU_CODE} -mthumb -fpack-struct -fshort-enums -funsigned-bitfields -funsigned-char -fno-exceptions -std=c++11'
AFLAGS='-x assembler-with-cpp -Wall -gstabs -mcpu=${MCU_CODE} -mthumb'
LFLAGS='-Wl,-Map,${COMPONENT}.map -mcpu=${MCU_CODE} -mthumb -nostdlib'
	# HAL specific keys.
HAL_HEADER_PATH=res/common/hal
HAL_SOURCE_PATH=res/arm/embedded-arm/stm32f10x/hal
HAL_EN_LIST="gpio"
	# Target specific config.
TARGET_SPECIFIC_CONFIG="res/arm/embedded-arm/stm32f10x/target_specific_config"
MCU_CODE="cortex-m3"
LINKSCRIPT=${TCPATH}/res/arm/embedded-arm/stm32f10x/stm32f100rbt6b/linkscript.ld
	# Platform specific keys.
PLATFORM_SPECIFIC_CONFIG=
TEMPLATE_C_SOURCE="${TCPATH}/res/templates/c_template.c"
TEMPLATE_CPP_SOURCE="${TCPATH}/res/templates/cpp_template.cpp"
TEMPLATE_H_SOURCE="${TCPATH}/res/templates/h_template.h"
TEMPLATE_HPP_SOURCE="${TCPATH}/res/templates/hpp_template.hpp"
	# Uploading keys (common).
UPLOAD_FUNCTIONS="upload_cscript upload_stlink"
	# Code generation keys.
CODE_GENERATORS=
CODE_GENERATORS_CONFIG_TIME=
}

function bconf_STM32F103RBT6_BareMetal()
{
BCONF_NAME="STMicroelectronics STM32F103RBT6 Cortex-M3"
MAKEFUNCTION=makecortex
MAKEFILE=${TCPATH}/res/common/Makefile
IOHEADER="\"io.h\""
STDINTHEADER="<stdint.h>"
SRC_IMPORT_FILES="res/arm/embedded-arm/stm32f10x/io.h:io.h"
	# Compilers and flags.
C_COMPILER=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-gcc
P_COMPILER=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-gcc
ASSEMBLER=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-gcc
LINKER=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-gcc
OBJCOPY=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-objcopy
OBJDUMP=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-objdump
SIZE=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-size
DEBUGGER=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-gdb
CFLAGS='-I . -Wall -mcpu=${MCU_CODE} -mthumb -fpack-struct -fshort-enums -funsigned-bitfields -funsigned-char -fno-exceptions -D__STM32_F103xx__ -std=c11'
PFLAGS='-I . -Wall -mcpu=${MCU_CODE} -mthumb -fpack-struct -fshort-enums -funsigned-bitfields -funsigned-char -fno-exceptions -D__STM32_F103xx__ -std=c++11'
AFLAGS='-x assembler-with-cpp -Wall -gstabs -mcpu=${MCU_CODE} -mthumb'
LFLAGS='-Wl,-Map,${COMPONENT}.map -mcpu=${MCU_CODE} -mthumb -nostdlib'
	# HAL specific keys.
HAL_HEADER_PATH=res/common/hal
HAL_SOURCE_PATH=res/arm/embedded-arm/stm32f10x/hal
HAL_EN_LIST="gpio can"
	# Target specific config.
TARGET_SPECIFIC_CONFIG="res/arm/embedded-arm/stm32f10x/target_specific_config"
MCU_CODE="cortex-m3"
LINKSCRIPT=${TCPATH}/res/arm/embedded-arm/stm32f10x/stm32f103rbt6/linkscript.ld
	# Platform specific keys.
PLATFORM_SPECIFIC_CONFIG=
TEMPLATE_C_SOURCE="${TCPATH}/res/templates/c_template.c"
TEMPLATE_CPP_SOURCE="${TCPATH}/res/templates/cpp_template.cpp"
TEMPLATE_H_SOURCE="${TCPATH}/res/templates/h_template.h"
TEMPLATE_HPP_SOURCE="${TCPATH}/res/templates/hpp_template.hpp"
	# Uploading keys (common).
UPLOAD_FUNCTIONS="upload_cscript upload_stlink"
	# Code generation keys.
CODE_GENERATORS=
CODE_GENERATORS_CONFIG_TIME=
}

function bconf_STM32F103RBT6_NuttX()
{
BCONF_NAME="STMicroelectronics STM32F103RBT6 Cortex-M3"
MAKEFUNCTION=makenuttx_armcortex
MAKEFILE=${TCPATH}/res/common/Makefile
IOHEADER="\"io.h\""
STDINTHEADER="<stdint.h>"
SRC_IMPORT_FILES="res/arm/embedded-arm/stm32f10x/io.h:io.h"
	# Compilers and flags.
C_COMPILER=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-gcc
P_COMPILER=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-gcc
ASSEMBLER=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-gcc
LINKER=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-gcc
OBJCOPY=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-objcopy
OBJDUMP=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-objdump
SIZE=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-size
DEBUGGER=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-gdb
CFLAGS='-I . -Wall -mcpu=${MCU_CODE} -mthumb -fpack-struct -fshort-enums -funsigned-bitfields -funsigned-char -fno-exceptions -D__STM32_F103xx__ -std=c11'
PFLAGS='-I . -Wall -mcpu=${MCU_CODE} -mthumb -fpack-struct -fshort-enums -funsigned-bitfields -funsigned-char -fno-exceptions -D__STM32_F103xx__ -std=c++11'
AFLAGS='-x assembler-with-cpp -Wall -gstabs -mcpu=${MCU_CODE} -mthumb'
LFLAGS='-Wl,-Map,${COMPONENT}.map -mcpu=${MCU_CODE} -mthumb -nostdlib'
	# HAL specific keys.
HAL_HEADER_PATH=res/common/hal
HAL_SOURCE_PATH=res/arm/embedded-arm/stm32f10x/hal
HAL_EN_LIST="gpio can"
	# Target specific config.
TARGET_SPECIFIC_CONFIG="res/arm/embedded-arm/stm32f10x/target_specific_config"
MCU_CODE="cortex-m3"
LINKSCRIPT=${TCPATH}/res/arm/embedded-arm/stm32f10x/stm32f103rbt6/linkscript.ld
	# Platform specific keys.
PLATFORM_SPECIFIC_CONFIG="res/common/platforms/nuttx/platform_specific_config"
NUTTX_COMMON_SOURCE="${TCPATH}/res/vendor/nuttx"
NUTTX_CONFIG_SOURCE="${TCPATH}/res/vendor/nuttx/nuttx/configs/stm3210e-eval/nsh"
NUTTX_TEMPLATE_SOURCE="${TCPATH}/res/templates/nuttx"
NUTTX_PATCHES="${TCPATH}/res/common/platforms/nuttx/patches"
TEMPLATE_C_SOURCE="${TCPATH}/res/templates/nuttx/main.c"
TEMPLATE_CPP_SOURCE="${TCPATH}/res/templates/nuttx/main.cpp"
TEMPLATE_H_SOURCE="${TCPATH}/res/templates/nuttx/main.h"
TEMPLATE_HPP_SOURCE="${TCPATH}/res/templates/nuttx/main.hpp"
TEMPLATE_SUFFIX="_main"
MULTIPLE_EXECUTABLES=1
PREPROCESSOR_MASK+=" nuttx apps misc"
COMPLIANCE_MASK+=" nuttx apps"
	# Uploading keys (common).
UPLOAD_FUNCTIONS="upload_cscript upload_stlink"
	# Code generation keys.
CODE_GENERATORS="gen_nuttx_build"
CODE_GENERATORS_CONFIG_TIME="gen_nuttx"
}

function bconf_TM4C123G_NuttX()
{
BCONF_NAME="Texas Instruments TM4C123G-H6PMI Cortex-M4"
MAKEFUNCTION=makenuttx_armcortex
MAKEFILE=${TCPATH}/res/common/Makefile
IOHEADER="\"io.h\""
STDINTHEADER="<stdint.h>"
	# Compilers and flags.
C_COMPILER=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-gcc
P_COMPILER=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-gcc
ASSEMBLER=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-gcc
LINKER=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-gcc
OBJCOPY=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-objcopy
OBJDUMP=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-objdump
SIZE=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-size
DEBUGGER=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-gdb
CFLAGS='-I . -Wall -mcpu=${MCU_CODE} -mthumb -fpack-struct -fshort-enums -funsigned-bitfields -funsigned-char -fno-exceptions -std=c11'
PFLAGS='-I . -Wall -mcpu=${MCU_CODE} -mthumb -fpack-struct -fshort-enums -funsigned-bitfields -funsigned-char -fno-exceptions -std=c++11'
AFLAGS='-x assembler-with-cpp -Wall -gstabs -mcpu=${MCU_CODE} -mthumb'
LFLAGS='-Wl,-Map,${COMPONENT}.map -mcpu=${MCU_CODE} -mthumb -nostdlib'
	# HAL specific keys.
	# Target specific config.
MCU_CODE="cortex-m4"
	# Platform specific keys.
PLATFORM_SPECIFIC_CONFIG="res/common/platforms/nuttx/platform_specific_config"
NUTTX_COMMON_SOURCE="${TCPATH}/res/vendor/nuttx"
NUTTX_CONFIG_SOURCE="${TCPATH}/res/vendor/nuttx/nuttx/configs/tm4c123g-launchpad/nsh"
NUTTX_TEMPLATE_SOURCE="${TCPATH}/res/templates/nuttx"	
NUTTX_PATCHES="${TCPATH}/res/common/platforms/nuttx/patches"
TEMPLATE_C_SOURCE="${TCPATH}/res/templates/nuttx/main.c"
TEMPLATE_CPP_SOURCE="${TCPATH}/res/templates/nuttx/main.cpp"
TEMPLATE_H_SOURCE="${TCPATH}/res/templates/nuttx/main.h"
TEMPLATE_HPP_SOURCE="${TCPATH}/res/templates/nuttx/main.hpp"
TEMPLATE_SUFFIX="_main"
MULTIPLE_EXECUTABLES=1
PREPROCESSOR_MASK+=" nuttx apps misc"
COMPLIANCE_MASK+=" nuttx apps"
	# Uploading keys (common).
UPLOAD_FUNCTIONS="upload_lm4flash upload_openocd"
	# Uploading keys (via upload_openocd).
OPENOCD_INTERFACE_FILE="res/common/openocd/tiva.cfg"
OPENOCD_TARGET_FILE="res/arm/embedded-arm/tm4c123g/openocd_target_config.cfg"
OPENOCD_COMMAND_FILE="res/arm/embedded-arm/tm4c123g/commands.cfg"
	# Code generation keys.
CODE_GENERATORS="gen_nuttx_build"
CODE_GENERATORS_CONFIG_TIME="gen_nuttx"
}

function bconf_PX4FMU-V2_Pixhawk()
{
BCONF_NAME="Pixhawk PX4FMU V2"
MAKEFUNCTION=makepixhawk_armcortex
MAKEFILE=${TCPATH}/res/common/Makefile
IOHEADER="\"io.h\""
STDINTHEADER="<stdint.h>"
	# Compilers and flags.
C_COMPILER=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-gcc
P_COMPILER=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-gcc
ASSEMBLER=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-gcc
LINKER=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-gcc
OBJCOPY=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-objcopy
OBJDUMP=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-objdump
SIZE=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-size
DEBUGGER=${TCPATH}/tmp/tmp_compiler/embeddedarm/gcc-arm-none-eabi/install-native/bin/arm-none-eabi-gdb
CFLAGS='-I . -Wall -mcpu=${MCU_CODE} -mthumb -fpack-struct -fshort-enums -funsigned-bitfields -funsigned-char -fno-exceptions -std=c++11'
PFLAGS=${CFLAGS}
AFLAGS='-x assembler-with-cpp -Wall -gstabs -mcpu=${MCU_CODE} -mthumb'
LFLAGS='-Wl,-Map,${COMPONENT}.map -mcpu=${MCU_CODE} -mthumb -nostdlib'
	# HAL specific keys.
	# Target specific config.
MCU_CODE="cortex-m3"
TARGET_PIXHAWK_DEVICE="px4fmu-v2_default"
	# Platform specific keys.
PLATFORM_SPECIFIC_CONFIG="res/common/platforms/pixhawk/platform_specific_config"
PIXHAWK_COMMON_SOURCE="${TCPATH}/res/vendor/pixhawk"
PIXHAWK_TEMPLATE_SOURCE="${TCPATH}/res/templates/pixhawk"	
PIXHAWK_PATCHES="${TCPATH}/res/common/platforms/pixhawk/patches"
TEMPLATE_C_SOURCE="${TCPATH}/res/templates/pixhawk/main.c"
TEMPLATE_CPP_SOURCE="${TCPATH}/res/templates/pixhawk/main.cpp"
TEMPLATE_H_SOURCE="${TCPATH}/res/templates/pixhawk/main.h"
TEMPLATE_HPP_SOURCE="${TCPATH}/res/templates/pixhawk/main.hpp"
TEMPLATE_SUFFIX="_main"
MULTIPLE_EXECUTABLES=1
PREPROCESSOR_MASK+=" Firmware"
	# Uploading keys (common).
UPLOAD_FUNCTIONS="upload_pixhawk"
	# Code generation keys.
CODE_GENERATORS="gen_pixhawk_build"
CODE_GENERATORS_CONFIG_TIME="gen_pixhawk"
}

# This section contains information on the bootloader build profiles.

function bload_PX4FMU-V2_Pixhawk-USB()
{
	MAKEFUNCTION=makepixhawk_bootloader
	MAKEFILE=${TCPATH}/res/common/Makefile
	SOURCEPATH=${TCPATH}/res/avr/bootloader
		# Target specific keys.
	BLOAD_NAME="Pixhawk PX4FMU-V2 Bootloader"
	TARGET=fmu
	BOARD=FMU
	INTERFACE=USB
}

