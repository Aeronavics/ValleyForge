#!/usr/bin/env bash
# Having the shebang at the top makes my text editor colour the contents of the file nicely.  It isn't required though.

#	Copyright (C) 2012 Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

# This is a config file for the different targets of the ValleyForge toolchain.

# This file contains common configuration definitions for AVR architecture targets.

# This section contains information on the application build profiles.

function bcdefs_common_avr
{
	# General keys for AVR targets.

	MAKEFUNCTION=makeavr
	MAKEFILE=${TCPATH}/res/common/Makefile
	IOHEADER="<avr/io.h>"
	STDINTHEADER="<stdint.h>"
		# Compilers and flags.
	C_COMPILER=avr-gcc
	P_COMPILER=avr-g++
	ASSEMBLER=avr-gcc
	LINKER=avr-gcc
	OBJCOPY=avr-objcopy
	OBJDUMP=avr-objdump
	SIZE=avr-size
	OPTLEVEL="s" # Choose s for size, or 0-3 for performance.
	CFLAGS='-I . -g -mmcu=${MCU_CODE} -O${OPTLEVEL} -fpack-struct -fshort-enums -funsigned-bitfields -funsigned-char -fno-exceptions -Wall -std=c11 -ffunction-sections -fdata-sections'
	PFLAGS='-I . -g -mmcu=${MCU_CODE} -O${OPTLEVEL} -fpack-struct -fshort-enums -funsigned-bitfields -funsigned-char -fno-exceptions -Wall -std=c++11 -ffunction-sections -fdata-sections'
	AFLAGS='-mmcu=${MCU_CODE} -Wall -x assembler-with-cpp'
	LFLAGS='-Wl,-Map,${COMPONENT}.map -mmcu=${MCU_CODE} -Wl,--gc-sections'
	# Template generation keys.
	TEMPLATE_C_SOURCE="${TCPATH}/res/templates/c_template.c"
	TEMPLATE_CPP_SOURCE="${TCPATH}/res/templates/cpp_template.cpp"
	TEMPLATE_H_SOURCE="${TCPATH}/res/templates/h_template.h"
	TEMPLATE_HPP_SOURCE="${TCPATH}/res/templates/hpp_template.hpp"
}

function bcdefs_common_avra
{
	# General keys for AVR targets being built with AVRA.

	MAKEFUNCTION=makeavra
	MAKEFILE=${TCPATH}/res/common/Makefile
	IOHEADER=
	STDINTHEADER=
		# Compilers and flags.
	C_COMPILER=
	P_COMPILER=
	ASSEMBLER=avra
	LINKER=avra
	OBJCOPY=avr-objcopy
	OBJDUMP=avr-objdump
	SIZE=avr-size
	OPTLEVEL="s" # Choose s for size, or 0-3 for performance.
	CFLAGS=
	PFLAGS=
	AFLAGS='-I .'
	LFLAGS=
}

# This section contains information on the bootloader build profiles.

function bldefs_common_avr_bootloader
{
	# General keys for bootloaders in the AVR modular bootloader series.

	MAKEFUNCTION=makeavr_bootloader
	MAKEFILE=${TCPATH}/res/common/Makefile
	SOURCEPATH=${TCPATH}/res/avr/bootloader
	IOHEADER="<avr/io.h>"
	STDINTHEADER="<stdint.h>"
		# Compilers and flags.
	C_COMPILER=avr-gcc
	P_COMPILER=avr-g++
	ASSEMBLER=avr-gcc
	LINKER=avr-gcc
	OBJCOPY=avr-objcopy
	OBJDUMP=avr-objdump
	SIZE=avr-size
	OPTLEVEL="s" # Choose s for size, or 0-3 for performance.
	CFLAGS='-I . -g -mmcu=${MCU_CODE} -O${OPTLEVEL} -fpack-struct -fshort-enums -funsigned-bitfields -funsigned-char -fno-exceptions -Wall -std=c11 -ffunction-sections -fdata-sections'
	PFLAGS='-I . -g -mmcu=${MCU_CODE} -O${OPTLEVEL} -fpack-struct -fshort-enums -funsigned-bitfields -funsigned-char -fno-exceptions -Wall -std=c++11 -ffunction-sections -fdata-sections'
	AFLAGS='-mmcu=${MCU_CODE} -Wall -x assembler-with-cpp'
	LFLAGS='-Wl,-Map,${COMPONENT}.map -mmcu=${MCU_CODE} -Wl,--section-start=.text=${BOOTSTART} -Wl,--section-start=.shared_jumptable=${SHARED_FUNCTIONS_ADDRESS} -Wl,--undefined=_jumptable -Wl,--relax -Wl,--gc-sections'
		# HAL specific keys.
	HAL_HEADER_PATH=res/common/hal
	HAL_SOURCE_PATH=res/avr/hal
	HAL_EN_LIST=
		# Target specific keys.
	BLOAD_SPECIFIC_CONFIG=res/avr/bload_specific_config
}

# ALL DONE.
