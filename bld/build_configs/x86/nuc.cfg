#!/usr/bin/env bash
# Having the shebang at the top makes my text editor colour the contents of the file nicely.  It isn't required though.

#	Copyright (C) 2015 Aeronavics Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>

# This is a config file for the different targets of the ValleyForge toolchain.

# This file contains configurations for Intel NUC targets.

# This section contains information on the application build profiles.

function bcdefs_common_nuc()
{
	MAKEFUNCTION=makex86_linux
	MAKEFILE=${TCPATH}/res/common/Makefile
	IOHEADER="<stdio.h>"
	STDINTHEADER="<stdint.h>"
		# Compilers and flags.
	C_COMPILER=gcc
	P_COMPILER=g++
	ASSEMBLER=as
	LINKER=g++
	OBJCOPY=objcopy
	OBJDUMP=objdump
	SIZE=size
	CFLAGS='-I . -Wall -std=c11 -nostdinc -nostdlib --sysroot=${VF_CROSS_COMPILE_SYSROOT}'
	CFLAGS+=' -I ${VF_CROSS_COMPILE_SYSROOT}/usr/include'
	CFLAGS+=' -I ${VF_CROSS_COMPILE_SYSROOT}/usr/lib/gcc/x86_64-linux-gnu/5/include'
	CFLAGS+=' -I ${VF_CROSS_COMPILE_SYSROOT}/usr/include/x86_64-linux-gnu'
	CFLAGS+=' -I ${VF_CROSS_COMPILE_SYSROOT}/usr/lib/gcc/4.9/include'
	PFLAGS='-I . -Wall -std=c++11 -nostdinc -nostdlib --sysroot=${VF_CROSS_COMPILE_SYSROOT}'
	PFLAGS+=' -I ${VF_CROSS_COMPILE_SYSROOT}/usr/include'
	PFLAGS+=' -I ${VF_CROSS_COMPILE_SYSROOT}/usr/include/c++/5'
	PFLAGS+=' -I ${VF_CROSS_COMPILE_SYSROOT}/usr/lib/gcc/x86_64-linux-gnu/5/include'
	PFLAGS+=' -I ${VF_CROSS_COMPILE_SYSROOT}/usr/include/x86_64-linux-gnu'
	PFLAGS+=' -I ${VF_CROSS_COMPILE_SYSROOT}/usr/include/x86_64-linux-gnu/c++/5'
	PFLAGS+=' -I ${VF_CROSS_COMPILE_SYSROOT}/usr/include/c++/4.9'
	PFLAGS+=' -I ${VF_CROSS_COMPILE_SYSROOT}/usr/lib/gcc/4.9/include'
	AFLAGS='-I . -x assembler-with-cpp -Wa -gstabs --sysroot=${VF_CROSS_COMPILE_SYSROOT}'
	LFLAGS='-Wl,-Map,${COMPONENT}.map -Wl,--sysroot=${VF_CROSS_COMPILE_SYSROOT} -static-libstdc++ -Xlinker -rpath-link=${VF_CROSS_COMPILE_SYSROOT}/lib/arm-linux-gnueabihf -Xlinker -rpath-link=${VF_CROSS_COMPILE_SYSROOT}/usr/lib/arm-linux-gnueabihf'
		# HAL specific keys.
	HAL_HEADER_PATH=res/common/hal
	HAL_SOURCE_PATH=
	HAL_EN_LIST=""
		# Target specific keys.
	TARGET_SPECIFIC_CONFIG=
	LINKSCRIPT=
	OUTPUT_TYPE="elf64"
	VF_PKG_CONFIG_LIBDIRS='${VF_CROSS_COMPILE_SYSROOT}/usr/lib/pkgconfig:${VF_CROSS_COMPILE_SYSROOT}/usr/local/lib/pkgconfig:${VF_CROSS_COMPILE_SYSROOT}/usr/share/pkgconfig:${VF_CROSS_COMPILE_SYSROOT}/usr/lib/x86_64-linux-gnu/pkgconfig'
}

function bcdefs_common_nuc_prebuilt()
{
	bcdefs_common_nuc # Include common definitions for NUC targets.
		# Platform specific keys.
	MULTIPLE_EXECUTABLES=1
	PLATFORM_SPECIFIC_CONFIG=
	TEMPLATE_C_SOURCE="${TCPATH}/res/templates/c_template.c"
	TEMPLATE_CPP_SOURCE="${TCPATH}/res/templates/cpp_template.cpp"
	TEMPLATE_H_SOURCE="${TCPATH}/res/templates/h_template.h"
	TEMPLATE_HPP_SOURCE="${TCPATH}/res/templates/hpp_template.hpp"
	FSFUNCTION=make_filesystem_from_image
		# Uploading keys (common).
	UPLOAD_FUNCTIONS="upload_cscript"
		# Code generation keys.
	CODE_GENERATORS=
	CODE_GENERATORS_CONFIG_TIME=
}

function bconf_NUC_UbuntuPrebuilt
{
bcdefs_common_nuc_prebuilt # Include common definitions for NUC prebuilt platforms.
BCONF_NAME="Intel NUC running Ubuntu (Linux) - Prebuilt"
	# Platform specific keys.
VF_PLAT_PREBUILT_IMAGE_PATH="http://releases.ubuntu.com/15.10/ubuntu-15.10-desktop-amd64.iso?_ga=1.69047955.309673506.1447016209"
}

# This section contains information on the bootloader build profiles.

	# NOTE - Building a filesystem for the ODroid automatically creates the relevant bootloader.
