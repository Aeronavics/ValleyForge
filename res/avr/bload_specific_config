#!/bin/bash

#	Copyright (C) 2011  Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Prompt the user to select the appropriate configuration for the bootloader.

# Prompt the user to select the port to use for the blinkenlight.
echo -e "${GREEN}Please choose which port your bootloader status LED is on:${NO_COLOUR}"
	# Create a menu of choices and have the user select one.
	select PORTS in $PORT_COUNT
	do
		# Check if the selected component is actually valid.
		PORTS=$(echo $PORT_COUNT | grep -w -o "$PORTS")
		if [ -z "$PORTS" ]; then
			# The selected component was not in the list of components, so the user is apparently a moron.
			echo -e "${RED}Invalid choice.  Try again.\n${NO_COLOUR}"
		else
			# A legitimate option was selected, so we can go now.
			BLINK_PORT="$PORTS"
			echo -e "${CYAN}Selected port $BLINK_PORT.\n${NO_COLOUR}"
			break
		fi
	done

# Prompt the user to select the pin to use for the blinkenlight.				
echo -e "${GREEN}Please choose which pin your bootloader status LED is on:${NO_COLOUR}"
	# Create a menu of choices and have the user select one.
	select PINS in 0 1 2 3 4 5 6 7
	do
		# Check if the selected component is actually valid.
		PINS=$(echo "0 1 2 3 4 5 6 7" | grep -w -o "$PINS")
		if [ -z "$PINS" ]; then
			# The selected component was not in the list of components, so the user is apparently a moron.
			echo -e "${RED}Invalid choice.  Try again.\n${NO_COLOUR}"
		else
			# A legitimate option was selected, so we can go now.
			BLINK_PIN="$PINS"
			echo -e "${CYAN}Selected pin $BLINK_PIN.\n${NO_COLOUR}"
			break
		fi
	done

# Prompt the user to select whether to invert the blinkenlight output.
echo -e "${GREEN}Please select whether the LED is using standard or inverted logic:${NO_COLOUR}"
	# Create a menu of choices and have the user select one.
	select LED_LOG in Standard\ \(Hi\ LED\ On\) Inverted\ \(Lo\ LED\ On\)
	do
		# Check if the selected component is actually valid.
		LED_LOG=$(echo "Standard (Hi LED On) Inverted (Lo LED On)" | grep -w -o "$LED_LOG")
		if [ -z "$LED_LOG" ]; then
			# The selected component was not in the list of components, so the user is apparently a moron.
			echo -e "${RED}Invalid choice.  Try again.\n${NO_COLOUR}"
		else
			# A legitimate option was selected, so we can go now.
			if [ "$LED_LOG" == "Standard (Hi LED On)" ]; then
				LED_LOGIC="1"
			else
				LED_LOGIC="0"
			fi
			echo -e "${CYAN}Selected $LED_LOG operation.\n${NO_COLOUR}"			
			break
		fi
	done

# Prompt the user to select which port to use for the force-load input.
echo -e "${GREEN}Please choose which port your bootloader force pin is on:${NO_COLOUR}"
	# Create a menu of choices and have the user select one.
	select PORTS in $PORT_COUNT
	do
		# Check if the selected component is actually valid.
		PORTS=$(echo $PORT_COUNT | grep -w -o "$PORTS")
		if [ -z "$PORTS" ]; then
			# The selected component was not in the list of components, so the user is apparently a moron.
			echo -e "${RED}Invalid choice.  Try again.\n${NO_COLOUR}"
		else
			# A legitimate option was selected, so we can go now.
			FORCE_BL_PORT="$PORTS"
			echo -e "${CYAN}Selected port $FORCE_BL_PORT.\n${NO_COLOUR}"
			break
		fi
	done

# Prompt the user to select which pin to use for the force-load input.
echo -e "${GREEN}Please choose which pin your bootloader input pin is on:${NO_COLOUR}"
	# Create a menu of choices and have the user select one.
	select PINS in 0 1 2 3 4 5 6 7
	do
		# Check if the selected component is actually valid.
		PINS=$(echo "0 1 2 3 4 5 6 7" | grep -w -o "$PINS")
		if [ -z "$PINS" ]; then
			# The selected component was not in the list of components, so the user is apparently a moron.
			echo -e "${RED}Invalid choice.  Try again.\n${NO_COLOUR}"
		else
			# A legitimate option was selected, so we can go now.
			FORCE_BL_PIN="$PINS"
			echo -e "${CYAN}Selected pin $FORCE_BL_PIN.\n${NO_COLOUR}"
			break
		fi
	done

# TODO - It shouldn't let you choose the same physical pin for both functions!

# Prompt the user to select whether to invert the force-load input.
echo -e "${GREEN}Please select whether the pin is using standard or inverted logic:${NO_COLOUR}"
	# Create a menu of choices and have the user select one.
	select PIN_LOG in Standard\ \(On\ Pin\ Hi\) Inverted\ \(On\ Pin\ Lo\)
	do
		# Check if the selected component is actually valid.
		PIN_LOG=$(echo "Standard (On Pin Hi) Inverted (On Pin Lo)" | grep -w -o "$PIN_LOG")
		if [ -z "$PIN_LOG" ]; then
			# The selected component was not in the list of components, so the user is apparently a moron.
			echo -e "${RED}Invalid choice.  Try again.\n${NO_COLOUR}"
		else
			# A legitimate option was selected, so we can go now.
			if [ "$PIN_LOG" == "Standard (On Pin Hi)" ]; then
				INPUT_LOGIC="1"
			else
				INPUT_LOGIC="0"
			fi
			echo -e "${CYAN}Selected $PIN_LOG operation.\n${NO_COLOUR}"
			break
		fi
	done

# Prompt the user to enter the clock speed the MCU will be running at.
echo -e -n "${GREEN}Please enter the clock speed, in MHz: ${NO_COLOUR}"
# We loop continuously until the user enters a valid choice.
while :
do
	# Read a line of input from the user.
	read
	# Check if the user input a valid response (a number).
	if ! [[ "$REPLY" =~ ^[0-9]+([.][0-9]+)?$ ]] ; then
		# The user is apparently a moron.
		echo -e "${RED}Invalid choice.  Try again.\n${NO_COLOUR}"
	else
		# A legitimate value was entered, so we can go now.
		CLK_SPEED_IN_MHZ=$REPLY
		echo -e "${CYAN}Selected clock speed of ${CLK_SPEED_IN_MHZ}MHz.\n${NO_COLOUR}"
		break
	fi
done

# Prompt the user to enter the EEPROM memory address that will be used for the shutdown state.
echo -e -n "${GREEN}Please enter the shutdown state memory address in the form \"03F1\". Number must be between 0x0000 and 0x$MAX_EEPROM_ADDRESS. ${NO_COLOUR}"
# We loop continuously until the user enters a valid choice.
while :
do
	# Read a line of input from the user.
	read
	# Check if the user input a valid response (a hex number).
	if ! [[ "$REPLY" =~ ^[A-F0-9]+$ ]]; then
		# The user is apparently a moron. Come now, that's a bit harsh isn't it?
		echo -e "${RED}Invalid choice.  Try again.\n${NO_COLOUR}"
	elif [[ $(echo "ibase=16; $REPLY" | bc) -gt $(echo "ibase=16; $MAX_EEPROM_ADDRESS" | bc) ]]; then
		echo -e "${RED}Number is too large. Please enter a smaller number\n${NO_COLOUR}"
	else
		# A legitimate value was entered, so we can go now.
		SHUTDOWNSTATE_MEM="0x$REPLY"
		echo -e "${CYAN}Selected memory address of ${SHUTDOWNSTATE_MEM}.\n${NO_COLOUR}"
		break
	fi
done

#if ["$BOOTLOADER" == "$CAN"]; then
	# Prompt the user to enter the CAN Baudrate for CAN bootloader communication.
	echo -e "${GREEN}Which CAN Baudrate would you like to use?(in kbps)${NO_COLOUR}"
		# Create a menu of choices and have the user select one.
		select CAN_BAUD_RATES in 1000 500 250 200 125 100
		do
			# Check if the selected component is actually valid.
			CAN_BAUD_RATES=$(echo "1000 500 250 200 125 100" | grep -w -o "$CAN_BAUD_RATES")
			if [ -z "$CAN_BAUD_RATES" ]; then
				# The selected component was not in the list of components, so the user is apparently a moron.
				echo -e "${RED}Invalid choice.  Try again.\n${NO_COLOUR}"
			else
				# A legitimate option was selected.
				echo -e "${CYAN}Selected CAN Baudrate is $CAN_BAUD_RATES.\n${NO_COLOUR}"
				break
			fi
		done

	# Prompt the user to enter the node identifier for their component.
	echo -e -n "${GREEN}Please enter the node identifier for this component in the form \"03\". Number must be between 0x00 and 0xFF. ${NO_COLOUR}"
	# We loop continuously until the user enters a valid choice.
	while :
	do
		# Read a line of input from the user.
		read
		# Check if the user input a valid response (a hex number).
		if ! [[ "$REPLY" =~ ^[A-F0-9]+$ ]]; then
			# The user is apparently a moron.
			echo -e "${RED}Invalid choice.  Try again.\n${NO_COLOUR}"
		#need a check for a smaller number
		elif [[ $(echo "ibase=16; $REPLY" | bc) -gt $(echo "ibase=16; FF" | bc) ]]; then
			echo -e "${RED}Number is too large. Please enter a smaller number\n${NO_COLOUR}"
		
		else
			# A legitimate value was entered, so we can go now.
			NODE_ID="0x$REPLY"
			echo -e "${CYAN}Selected node identifier of ${NODE_ID}.\n${NO_COLOUR}"
			break
		fi
	done
#fi

# Create a separate section in the component configuration file for target specific stuff.
echo -e "### BOOTLOADER SPECIFIC ###\n" >> $TCPATH/src/$COMPONENT/$COMPONENT_NAME.cfg

# Write configuration settings to the configuration file.
echo -e "BLINK_PORT=PORT_${BLINK_PORT}" >> $TCPATH/src/$COMPONENT/$COMPONENT_NAME.cfg
echo -e "BLINK_PIN=PIN_${BLINK_PIN}" >> $TCPATH/src/$COMPONENT/$COMPONENT_NAME.cfg
echo -e "LED_LOGIC=${LED_LOGIC}" >> $TCPATH/src/$COMPONENT/$COMPONENT_NAME.cfg
echo -e "FORCE_BL_PORT=PORT_${FORCE_BL_PORT}" >> $TCPATH/src/$COMPONENT/$COMPONENT_NAME.cfg
echo -e "FORCE_BL_PIN=PIN_${FORCE_BL_PIN}" >> $TCPATH/src/$COMPONENT/$COMPONENT_NAME.cfg
echo -e "INPUT_LOGIC=${INPUT_LOGIC}" >> $TCPATH/src/$COMPONENT/$COMPONENT_NAME.cfg
echo -e "CLK_SPEED_IN_MHZ=${CLK_SPEED_IN_MHZ}" >> $TCPATH/src/$COMPONENT/$COMPONENT_NAME.cfg
echo -e "SHUTDOWNSTATE_MEM=${SHUTDOWNSTATE_MEM}" >> $TCPATH/src/$COMPONENT/$COMPONENT_NAME.cfg
echo -e "CAN_BAUD_RATES=${CAN_BAUD_RATES}" >> $TCPATH/src/$COMPONENT/$COMPONENT_NAME.cfg
echo -e "NODE_ID=${NODE_ID}" >> $TCPATH/src/$COMPONENT/$COMPONENT_NAME.cfg
# All done.
