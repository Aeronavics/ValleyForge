#!/bin/bash

#	Copyright (C) 2011  Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Prompt the user to select the appropriate configuration for the bootloader.
echo -e "${CYAN}Modular AVR Bootloader specific configuration...\n${NO_COLOUR}"

# If this is new component, create a separate section in the component configuration file for bootloader specific stuff.
if [ ${NEW} ]; then
	echo -e "\n### BOOTLOADER (MODULAR AVR) SPECIFIC ###\n" >> ${CONFIG_FILE}
fi

# 1. Prompt the user to select the port to use for the blinkenlight.

# If we're reconfiguring an existing component, then we indicate what the existing configuration says.
if [ -z "`pull_key ${CONFIG_FILE} \"BLINK_PORT\"`" ]; then
	echo -e "${GREEN}Please choose which port your bootloader status LED is on:${NO_COLOUR}"
else
	echo -e "${GREEN}Please choose which port your bootloader status LED is on: (Currently: ${NO_COLOUR}${BLINK_PORT}${GREEN})${NO_COLOUR}"
fi
# Create a menu of choices and have the user select one.
select PORTS in $PORT_COUNT
do
	# Check if the selected component is actually valid.
	PORTS=$(echo $PORT_COUNT | grep -w -o "$PORTS")
	if [ -z "$PORTS" ]; then
		# The selected component was not in the list of components, so the user is apparently a moron.
		echo -e -n "${RED}Invalid choice.  Try again. ${NO_COLOUR}"
	else
		# A legitimate option was selected, so we can go now.
		BLINK_PORT="$PORTS"
		echo -e "${CYAN}Selected port $BLINK_PORT.\n${NO_COLOUR}"
		break
	fi
done
# Write setting to the configuration file.
push_key ${CONFIG_FILE} "BLINK_PORT" "PORT_${BLINK_PORT}"

# 2. Prompt the user to select the pin to use for the blinkenlight.

# If we're reconfiguring an existing component, then we indicate what the existing configuration says.
if [ -z "`pull_key ${CONFIG_FILE} \"BLINK_PINS\"`" ]; then		
	echo -e "${GREEN}Please choose which pin your bootloader status LED is on:${NO_COLOUR}"
else
	echo -e "${GREEN}Please choose which pin your bootloader status LED is on: (Currently: ${NO_COLOUR}${BLINK_PIN}${GREEN})${NO_COLOUR}"
fi
# Create a menu of choices and have the user select one.
select PINS in 0 1 2 3 4 5 6 7
do
	# Check if the selected component is actually valid.
	PINS=$(echo "0 1 2 3 4 5 6 7" | grep -w -o "$PINS")
	if [ -z "$PINS" ]; then
		# The selected component was not in the list of components, so the user is apparently a moron.
		echo -e -n "${RED}Invalid choice.  Try again. ${NO_COLOUR}"
	else
		# A legitimate option was selected, so we can go now.
		BLINK_PIN="$PINS"
		echo -e "${CYAN}Selected pin $BLINK_PIN.\n${NO_COLOUR}"
		break
	fi
done
# Write setting to the configuration file.
push_key ${CONFIG_FILE} "BLINK_PIN" "PIN_${BLINK_PIN}"

# 3. Prompt the user to select whether to invert the blinkenlight output.

# If we're reconfiguring an existing component, then we indicate what the existing configuration says.
if [ -z "`pull_key ${CONFIG_FILE} \"LED_LOGIC\"`" ]; then
	echo -e "${GREEN}Please select whether the LED is using standard or inverted logic:${NO_COLOUR}"
else
	DEFAULT=$([ "${LED_LOGIC}" == "1" ] && echo "Standard" || echo "Inverted")
	echo -e "${GREEN}Please select whether the LED is using standard or inverted logic: (Currently: ${NO_COLOUR}${DEFAULT}${GREEN})${NO_COLOUR}"
fi
# Create a menu of choices and have the user select one.
select LED_LOG in Standard\ \(Hi\ LED\ On\) Inverted\ \(Lo\ LED\ On\)
do
	# Check if the selected component is actually valid.
	LED_LOG=$(echo "Standard (Hi LED On) Inverted (Lo LED On)" | grep -w -o "$LED_LOG")
	if [ -z "$LED_LOG" ]; then
		# The selected component was not in the list of components, so the user is apparently a moron.
		echo -e -n "${RED}Invalid choice.  Try again. ${NO_COLOUR}"
	else
		# A legitimate option was selected, so we can go now.
		if [ "$LED_LOG" == "Standard (Hi LED On)" ]; then
			LED_LOGIC="1"
		else
			LED_LOGIC="0"
		fi
		echo -e "${CYAN}Selected $LED_LOG operation.\n${NO_COLOUR}"			
		break
	fi
done
# Write setting to the configuration file.
push_key ${CONFIG_FILE} "LED_LOGIC" "${LED_LOGIC}"

# 4. Prompt the user to select which port to use for the force-load input.

# If we're reconfiguring an existing component, then we indicate what the existing configuration says.
if [ -z "`pull_key ${CONFIG_FILE} \"FORCE_BL_PORT\"`" ]; then
	echo -e "${GREEN}Please choose which port your bootloader force pin is on:${NO_COLOUR}"
else
	echo -e "${GREEN}Please choose which port your bootloader force pin is on: (Currently: ${NO_COLOUR}${FORCE_BL_PORT}${GREEN})${NO_COLOUR}"
fi
# Create a menu of choices and have the user select one.
select PORTS in $PORT_COUNT
do
	# Check if the selected component is actually valid.
	PORTS=$(echo $PORT_COUNT | grep -w -o "$PORTS")
	if [ -z "$PORTS" ]; then
		# The selected component was not in the list of components, so the user is apparently a moron.
		echo -e -n "${RED}Invalid choice.  Try again. ${NO_COLOUR}"
	else
		# A legitimate option was selected, so we can go now.
		FORCE_BL_PORT="$PORTS"
		echo -e "${CYAN}Selected port $FORCE_BL_PORT.\n${NO_COLOUR}"
		break
	fi
done
# Write setting to the configuration file.
push_key ${CONFIG_FILE} "FORCE_BL_PORT" "PORT_${FORCE_BL_PORT}"

# 5. Prompt the user to select which pin to use for the force-load input.

# If we're reconfiguring an existing component, then we indicate what the existing configuration says.
if [ -z "`pull_key ${CONFIG_FILE} \"FORCE_BL_PIN\"`" ]; then
	echo -e "${GREEN}Please choose which pin your bootloader input pin is on:${NO_COLOUR}"
else
	echo -e "${GREEN}Please choose which pin your bootloader input pin is on: (Currently: ${NO_COLOUR}${FORCE_BL_PIN}${GREEN})${NO_COLOUR}"
fi
# Create a menu of choices and have the user select one.
select PINS in 0 1 2 3 4 5 6 7
do
	# Check if the selected component is actually valid.
	PINS=$(echo "0 1 2 3 4 5 6 7" | grep -w -o "$PINS")
	if [ -z "$PINS" ]; then
		# The selected component was not in the list of components, so the user is apparently a moron.
		echo -e -n "${RED}Invalid choice.  Try again. ${NO_COLOUR}"
	else
		# A legitimate option was selected, so we can go now.
		FORCE_BL_PIN="$PINS"
		echo -e "${CYAN}Selected pin $FORCE_BL_PIN.\n${NO_COLOUR}"
		break
	fi
done
# Write setting to the configuration file.
push_key ${CONFIG_FILE} "FORCE_BL_PIN" "PIN_${FORCE_BL_PIN}"

# TODO - It shouldn't let you choose the same physical pin for both functions!

# 6. Prompt the user to select whether to invert the force-load input.

# If we're reconfiguring an existing component, then we indicate what the existing configuration says.
if [ -z "`pull_key ${CONFIG_FILE} \"INPUT_LOGIC\"`" ]; then
	echo -e "${GREEN}Please select whether the pin is using standard or inverted logic:${NO_COLOUR}"
else
	DEFAULT=$([ "${INPUT_LOGIC}" == "1" ] && echo "Standard" || echo "Inverted")
	echo -e "${GREEN}Please select whether the pin is using standard or inverted logic: (Currently: ${NO_COLOUR}${DEFAULT}${GREEN})${NO_COLOUR}"
fi
# Create a menu of choices and have the user select one.
select PIN_LOG in Standard\ \(On\ Pin\ Hi\) Inverted\ \(On\ Pin\ Lo\)
do
	# Check if the selected component is actually valid.
	PIN_LOG=$(echo "Standard (On Pin Hi) Inverted (On Pin Lo)" | grep -w -o "$PIN_LOG")
	if [ -z "$PIN_LOG" ]; then
		# The selected component was not in the list of components, so the user is apparently a moron.
		echo -e "${RED}Invalid choice.  Try again.\n${NO_COLOUR}"
	else
		# A legitimate option was selected, so we can go now.
		if [ "$PIN_LOG" == "Standard (On Pin Hi)" ]; then
			INPUT_LOGIC="1"
		else
			INPUT_LOGIC="0"
		fi
		echo -e "${CYAN}Selected $PIN_LOG operation.\n${NO_COLOUR}"
		break
	fi
done
# Write setting to the configuration file.
push_key ${CONFIG_FILE} "INPUT_LOGIC" "${INPUT_LOGIC}"

# 7. Prompt the user to enter the EEPROM memory address that will be used for the shutdown state.

# If we're reconfiguring an existing component, then we indicate what the existing configuration says.
if [ -z "`pull_key ${CONFIG_FILE} \"SHUTDOWNSTATE_MEM\"`" ]; then
	echo -e -n "${GREEN}Please enter the shutdown state memory address in the form \"03F1\". Number must be between 0x0000 and 0x$MAX_EEPROM_ADDRESS:${NO_COLOUR}"
else
	echo -e -n "${GREEN}Please enter the shutdown state memory address in the form \"03F1\". Number must be between 0x0000 and 0x$MAX_EEPROM_ADDRESS: (Currently: ${NO_COLOUR}${SHUTDOWNSTATE_MEM}${GREEN})${NO_COLOUR}"
fi
# We loop continuously until the user enters a valid choice.
while :
do
	# Read a line of input from the user.
	read -e -i "${SHUTDOWNSTATE_MEM/0x/}" -p " "
	# Check if the user input a valid response (a hex number).
	if ! [[ "$REPLY" =~ ^[A-F0-9][A-F0-9][A-F0-9][A-F0-9]$ ]]; then
		# The user is apparently a moron. Come now, that's a bit harsh isn't it?
		echo -e -n "${RED}Invalid choice.  Try again.${NO_COLOUR}"
	elif [[ $(echo "ibase=16; $REPLY" | bc) -gt $(echo "ibase=16; $MAX_EEPROM_ADDRESS" | bc) ]]; then
		echo -e -n "${RED}Number is too large. Please enter a smaller number.${NO_COLOUR}"
	else
		# A legitimate value was entered, so we can go now.
		SHUTDOWNSTATE_MEM="0x$REPLY"
		echo -e "${CYAN}Selected memory address of ${SHUTDOWNSTATE_MEM}.\n${NO_COLOUR}"
		break
	fi
done
# Write setting to the configuration file.
push_key ${CONFIG_FILE} "SHUTDOWNSTATE_MEM" "${SHUTDOWNSTATE_MEM}"

# Only prompt for CAN communication parameters if the component is using either a CAN bootloader or CAN via SPI bootloader.
if [ "$ACTIVE_MODULE" == "bootloader_module_canspi" ] || [ "$ACTIVE_MODULE" == "bootloader_module_can" ]; then
	# 8. Prompt the user to enter the CAN Baudrate for CAN bootloader communication.

	# If we're reconfiguring an existing component, then we indicate what the existing configuration says.
	if [ -z "`pull_key ${CONFIG_FILE} \"CAN_BAUD_RATE\"`" ]; then
		echo -e "${GREEN}Please select which CAN Baudrate to use: (In kbps)${NO_COLOUR}"
	else
		echo -e "${GREEN}Please select which CAN Baudrate to use: (In kbps) (Currently: ${NO_COLOUR}${CAN_BAUD_RATES}${GREEN})${NO_COLOUR}"
	fi
	# Create a menu of choices and have the user select one.
	select CAN_BAUD_RATES in 1000 500 250 200 125 100
	do
		# Check if the selected component is actually valid.
		CAN_BAUD_RATES=$(echo "1000 500 250 200 125 100" | grep -w -o "$CAN_BAUD_RATES")
		if [ -z "$CAN_BAUD_RATES" ]; then
			# The selected component was not in the list of components, so the user is apparently a moron.
			echo -e -n "${RED}Invalid choice.  Try again. ${NO_COLOUR}"
		else
			# A legitimate option was selected.
			echo -e "${CYAN}Selected CAN Baudrate of ${CAN_BAUD_RATES}kbps.\n${NO_COLOUR}"
			break
		fi
	done
	# Write setting to the configuration file.
	push_key ${CONFIG_FILE} "CAN_BAUD_RATES" "${CAN_BAUD_RATES}"

	# 9. Prompt the user to enter the node identifier for their component.

	# If we're reconfiguring an existing component, then we indicate what the existing configuration says.
	if [ -z "`pull_key ${CONFIG_FILE} \"NODE_ID\"`" ]; then
		echo -e -n "${GREEN}Please enter the node identifier for this component in the form \"03\". Number must be between 0x00 and 0xFF:${NO_COLOUR}"
	else
		echo -e -n "${GREEN}Please enter the node identifier for this component in the form \"03\". Number must be between 0x00 and 0xFF: (Currently: ${NO_COLOUR}${NODE_ID}${GREEN})${NO_COLOUR}"
	fi
	# We loop continuously until the user enters a valid choice.
	while :
	do
		# Read a line of input from the user.
		read -e -i "${NODE_ID/0x/}" -p " "
		# Check if the user input a valid response (a hex number).
		if ! [[ "$REPLY" =~ ^[A-F0-9][A-F0-9]$ ]]; then
			# The user is apparently a moron.
			echo -e -n "${RED}Invalid choice.  Try again:${NO_COLOUR}"
		# Need a check for a smaller number
		elif [[ $(echo "ibase=16; $REPLY" | bc) -gt $(echo "ibase=16; FF" | bc) ]]; then
			# The user is apparently a moron.
			echo -e -n "${RED}Number is too large. Please enter a smaller number:${NO_COLOUR}"
		else
			# A legitimate value was entered, so we can go now.
			NODE_ID="0x$REPLY"
			echo -e "${CYAN}Selected node identifier of ${NODE_ID}.\n${NO_COLOUR}"
			break
		fi
	done
	# Write setting to the configuration file.
	push_key ${CONFIG_FILE} "NODE_ID" "${NODE_ID}"
fi

# Only prompt for CAN via SPI connection parameters if the component is using either a CAN via SPI bootloader.
if [ "$ACTIVE_MODULE" == "bootloader_module_canspi" ]; then
	# 10. Prompt the user to select the port to use for the Slave Select (SS) pin from MCP2515.

	# If we're reconfiguring an existing component, then we indicate what the existing configuration says.
	if [ -z "`pull_key ${CONFIG_FILE} \"SS_PORT\"`" ]; then
		echo -e "${GREEN}Please select which port the Slave Select (SS) pin from the MCP2515 is connected to:${NO_COLOUR}"
	else
		echo -e "${GREEN}Please select which port the Slave Select (SS) pin from the MCP2515 is connected to: (Currently: ${NO_COLOUR}${SS_PORT}${GREEN})${NO_COLOUR}"
	fi
	# Create a menu of choices and have the user select one.
	select PORTS in $PORT_COUNT
	do
		# Check if the selected component is actually valid.
		PORTS=$(echo $PORT_COUNT | grep -w -o "$PORTS")
		if [ -z "$PORTS" ]; then
			# The selected component was not in the list of components, so the user is apparently a moron.
			echo -e -n "${RED}Invalid choice.  Try again. ${NO_COLOUR}"
		else
			# A legitimate option was selected, so we can go now.
			SS_PORT="$PORTS"
			echo -e "${CYAN}Selected port $SS_PORT.\n${NO_COLOUR}"
			break
		fi
	done
	# Write setting to the configuration file.
	push_key ${CONFIG_FILE} "SS_PORT" "PORT_${SS_PORT}"

	# 11. Prompt the user to select the pin to use for the Slave Select (SS) pin from MCP2515.

	# If we're reconfiguring an existing component, then we indicate what the existing configuration says.
	if [ -z "`pull_key ${CONFIG_FILE} \"SS_PIN\"`" ]; then
		echo -e "${GREEN}Please select which pin the Slave Select (SS) pin from the MCP2515 is connected to:${NO_COLOUR}"
	else
		echo -e "${GREEN}Please select which pin the Slave Select (SS) pin from the MCP2515 is connected to: (Currently: ${NO_COLOUR}${SS_PIN}${GREEN})${NO_COLOUR}"
	fi
	# Create a menu of choices and have the user select one.
	select PINS in 0 1 2 3 4 5 6 7
	do
		# Check if the selected component is actually valid.
		PINS=$(echo "0 1 2 3 4 5 6 7" | grep -w -o "$PINS")
		if [ -z "$PINS" ]; then
			# The selected component was not in the list of components, so the user is apparently a moron.
			echo -e -n "${RED}Invalid choice.  Try again. ${NO_COLOUR}"
		else
			# A legitimate option was selected, so we can go now.
			SS_PIN="$PINS"
			echo -e "${CYAN}Selected pin $SS_PIN.\n${NO_COLOUR}"
			break
		fi
	done
	# Write setting to the configuration file.
	push_key ${CONFIG_FILE} "SS_PIN" "PIN_${SS_PIN}"
		
	# 12. Prompt the user to select the port to use for the Serial Clock (SCK) pin from MCP2515.

	# If we're reconfiguring an existing component, then we indicate what the existing configuration says.
	if [ -z "`pull_key ${CONFIG_FILE} \"SCK_PORT\"`" ]; then
		echo -e "${GREEN}Please choose select port the Serial Clock (SCK) pin from the MCP2515 is connected to:${NO_COLOUR}"
	else
		echo -e "${GREEN}Please choose select port the Serial Clock (SCK) pin from the MCP2515 is connected to: (Currently: ${NO_COLOUR}${SCK_PORT}${GREEN})${NO_COLOUR}"
	fi
	# Create a menu of choices and have the user select one.
	select PORTS in $PORT_COUNT
	do
		# Check if the selected component is actually valid.
		PORTS=$(echo $PORT_COUNT | grep -w -o "$PORTS")
		if [ -z "$PORTS" ]; then
			# The selected component was not in the list of components, so the user is apparently a moron.
			echo -e -n "${RED}Invalid choice.  Try again. ${NO_COLOUR}"
		else
			# A legitimate option was selected, so we can go now.
			SCK_PORT="$PORTS"
			echo -e "${CYAN}Selected port $SCK_PORT.\n${NO_COLOUR}"
			break
		fi
	done
	# Write setting to the configuration file.
	push_key ${CONFIG_FILE} "SCK_PORT" "PORT_${SCK_PORT}"

	# 13. Prompt the user to select the pin to use for the Serial Clock (SCK) pin from MCP2515.

	# If we're reconfiguring an existing component, then we indicate what the existing configuration says.
	if [ -z "`pull_key ${CONFIG_FILE} \"SCK_PIN\"`" ]; then
		echo -e "${GREEN}Please select which pin the Serial Clock (SCK) pin from the MCP2515 is connected to:${NO_COLOUR}"
	else
		echo -e "${GREEN}Please select which pin the Serial Clock (SCK) pin from the MCP2515 is connected to: (Currently: ${NO_COLOUR}${SCK_PIN}${GREEN})${NO_COLOUR}"
	fi
	# Create a menu of choices and have the user select one.
	select PINS in 0 1 2 3 4 5 6 7
	do
		# Check if the selected component is actually valid.
		PINS=$(echo "0 1 2 3 4 5 6 7" | grep -w -o "$PINS")
		if [ -z "$PINS" ]; then
			# The selected component was not in the list of components, so the user is apparently a moron.
			echo -e -n "${RED}Invalid choice.  Try again. ${NO_COLOUR}"
		else
			# A legitimate option was selected, so we can go now.
			SCK_PIN="$PINS"
			echo -e "${CYAN}Selected pin $SCK_PIN.\n${NO_COLOUR}"
			break
		fi
	done
	# Write setting to the configuration file.
	push_key ${CONFIG_FILE} "SCK_PIN" "PIN_${SCK_PIN}"
		
	# 14. Prompt the user to select the port to use for the Master Out, Slave In (MOSI) pin from MCP2515.

	# If we're reconfiguring an existing component, then we indicate what the existing configuration says.
	if [ -z "`pull_key ${CONFIG_FILE} \"MOSI_PORT\"`" ]; then
		echo -e "${GREEN}Please choose which port the Master Out, Slave In (MOSI) pin from the MCP2515 is connected to:${NO_COLOUR}"
	else
		echo -e "${GREEN}Please choose which port the Master Out, Slave In (MOSI) pin from the MCP2515 is connected to: (Currently: ${NO_COLOUR}${MOSI_PORT}${GREEN})${NO_COLOUR}"
	fi
	# Create a menu of choices and have the user select one.
	select PORTS in $PORT_COUNT
	do
		# Check if the selected component is actually valid.
		PORTS=$(echo $PORT_COUNT | grep -w -o "$PORTS")
		if [ -z "$PORTS" ]; then
			# The selected component was not in the list of components, so the user is apparently a moron.
			echo -e -n "${RED}Invalid choice.  Try again. ${NO_COLOUR}"
		else
			# A legitimate option was selected, so we can go now.
			MOSI_PORT="$PORTS"
			echo -e "${CYAN}Selected port $MOSI_PORT.\n${NO_COLOUR}"
			break
		fi
	done
	# Write setting to the configuration file.
	push_key ${CONFIG_FILE} "MOSI_PORT" "PORT_${MOSI_PORT}"

	# 15. Prompt the user to select the pin to use for the Master Out, Slave In (MOSI) pin from MCP2515.

	# If we're reconfiguring an existing component, then we indicate what the existing configuration says.
	if [ -z "`pull_key ${CONFIG_FILE} \"MOSI_PIN\"`" ]; then
		echo -e "${GREEN}Please choose which pin the Master Output, Slave Input (MOSI) pin from the MCP2515 is connected to:${NO_COLOUR}"
	else
		echo -e "${GREEN}Please choose which pin the Master Output, Slave Input (MOSI) pin from the MCP2515 is connected to: (Currently: ${NO_COLOUR}${MOSI_PIN}${GREEN})${NO_COLOUR}"
	fi
	# Create a menu of choices and have the user select one.
	select PINS in 0 1 2 3 4 5 6 7
	do
		# Check if the selected component is actually valid.
		PINS=$(echo "0 1 2 3 4 5 6 7" | grep -w -o "$PINS")
		if [ -z "$PINS" ]; then
			# The selected component was not in the list of components, so the user is apparently a moron.
			echo -e -n "${RED}Invalid choice.  Try again. ${NO_COLOUR}"
		else
			# A legitimate option was selected, so we can go now.
			MOSI_PIN="$PINS"
			echo -e "${CYAN}Selected pin $MOSI_PIN.\n${NO_COLOUR}"
			break
		fi
	done
	# Write setting to the configuration file.
	push_key ${CONFIG_FILE} "MOSI_PIN" "PIN_${MOSI_PIN}"
	
	# TODO - There are no questions about the MISO?

	# The AT90CAN128 as it has no pin change interupts, so has slightly different configuration settings.
	if [ "$MCU_CODE" == "at90can128" ]; then
		# 16. Prompt the user to select the pin interrupt vector to use for the INT pin from MCP2515.

		# If we're reconfiguring an existing component, then we indicate what the existing configuration says.
		if [ -z "`pull_key ${CONFIG_FILE} \"INT_VECTOR\"`" ]; then
			echo -e "${GREEN}Please select which pin interrupt vector the INT pin from MCP2515 will trigger:${NO_COLOUR}"
		else
			echo -e "${GREEN}Please select which pin interrupt vector the INT pin from MCP2515 will trigger: (Currently: ${NO_COLOUR}${INT_VECTOR}${GREEN})${NO_COLOUR}"
		fi
		# Create a menu of choices and have the user select one.
		select PIN_INTERRUPT_VECTOR in $PIN_INTERRUPT_VECTORS
		do
			# Check if the selected component is actually valid.
			PIN_INTERRUPT_VECTOR=$(echo $PIN_INTERRUPT_VECTORS | grep -w -o "$PIN_INTERRUPT_VECTOR")
			if [ -z "$PIN_INTERRUPT_VECTOR" ]; then
				# The selected component was not in the list of components, so the user is apparently a moron.
				echo -e -n "${RED}Invalid choice.  Try again. ${NO_COLOUR}"
			else
				# A legitimate option was selected, so we can go now.
				INT_VECT="$PIN_INTERRUPT_VECTOR"
				echo -e "${CYAN}Selected $INT_VECT.\n${NO_COLOUR}"
				let INT_VECT_CONFIG_NUMBER=$REPLY-1 # Used to configure the interrupt in bootloader
				break
			fi
		done
		# Write setting to the configuration file.
		push_key ${CONFIG_FILE} "INT_VECTOR" "${INT_VECT}"
		push_key ${CONFIG_FILE} "INT_VECTOR_CONFIG_NUMBER" "${INT_VECT_CONFIG_NUMBER}"
	
	# Other AVR targets with pin change interupts have these configuration settings.
	else
		# 17. Prompt the user to select the pin change interrupt vector to use for the INT pin from MCP2515.

		# If we're reconfiguring an existing component, then we indicate what the existing configuration says.
		if [ -z "`pull_key ${CONFIG_FILE} \"INT_VECTOR\"`" ]; then
			echo -e "${GREEN}Please select which pin change interrupt vector the INT pin from MCP2515 will trigger:${NO_COLOUR}"
		else
			echo -e "${GREEN}Please select which pin change interrupt vector the INT pin from MCP2515 will trigger: (Currently: ${NO_COLOUR}${INT_VECTOR}${GREEN})${NO_COLOUR}"
		fi
		# Create a menu of choices and have the user select one.
		select PIN_CHANGE_INTERRUPT_VECTOR in $PIN_CHANGE_INTERRUPT_VECTORS
		do
			# Check if the selected component is actually valid.
			PIN_CHANGE_INTERRUPT_VECTOR=$(echo $PIN_CHANGE_INTERRUPT_VECTORS | grep -w -o "$PIN_CHANGE_INTERRUPT_VECTOR")
			if [ -z "$PIN_CHANGE_INTERRUPT_VECTOR" ]; then
				# The selected component was not in the list of components, so the user is apparently a moron.
				echo -e -n "${RED}Invalid choice.  Try again. ${NO_COLOUR}"
			else
				# A legitimate option was selected, so we can go now.
				INT_VECT="$PIN_CHANGE_INTERRUPT_VECTOR"
				echo -e "${CYAN}Selected $INT_VECT.\n${NO_COLOUR}"
				let INT_VECT_CONFIG_NUMBER=$REPLY-1 # Used to configure the interrupt in bootloader
				break
			fi
		done
		# Write setting to the configuration file.
		push_key ${CONFIG_FILE} "INT_VECTOR" "${INT_VECT}"
		push_key ${CONFIG_FILE} "INT_VECTOR_CONFIG_NUMBER" "${INT_VECT_CONFIG_NUMBER}"
	
		# 18. Prompt the user to select the pin change interrupt to use for the INT pin from MCP2515.

		# If we're reconfiguring an existing component, then we indicate what the existing configuration says.
		if [ -z "`pull_key ${CONFIG_FILE} \"INT_NUMBER\"`" ]; then
			echo -e "${GREEN}Please select which pin change interrupt the INT pin from MCP2515 will trigger:${NO_COLOUR}"
		else
			echo -e "${GREEN}Please select which pin change interrupt the INT pin from MCP2515 will trigger: (Currently: ${NO_COLOUR}${INT_NUMBER}${GREEN})${NO_COLOUR}"
		fi
		# Create a menu of choices and have the user select one.
		select PIN_CHANGE_INTERRUPT in $PIN_CHANGE_INTERRUPTS
		do
			# Check if the selected component is actually valid.
			PIN_CHANGE_INTERRUPT=$(echo $PIN_CHANGE_INTERRUPTS | grep -w -o "$PIN_CHANGE_INTERRUPT")
			if [ -z "$PIN_CHANGE_INTERRUPT" ]; then
				# The selected component was not in the list of components, so the user is apparently a moron.
				echo -e -n "${RED}Invalid choice.  Try again.${NO_COLOUR}"
			else
				# A legitimate option was selected, so we can go now.
				INT_NUM="$PIN_CHANGE_INTERRUPT"
				echo -e "${CYAN}Selected $INT_NUM.\n${NO_COLOUR}"
				break
			fi
		done
		# Write setting to the configuration file.
		push_key ${CONFIG_FILE} "INT_NUMBER" "${INT_NUM}"
	fi

	# 19. Prompt the user to select the port to use for the INT pin from MCP2515.

	# If we're reconfiguring an existing component, then we indicate what the existing configuration says.
	if [ -z "`pull_key ${CONFIG_FILE} \"INT_PORT\"`" ]; then
		echo -e "${GREEN}Please select which port the Interrupt (INT) pin from the MCP2515 is connected to:${NO_COLOUR}"
	else
		echo -e "${GREEN}Please select which port the Interrupt (INT) pin from the MCP2515 is connected to: (Currently: ${NO_COLOUR}${INT_PORT}${GREEN})${NO_COLOUR}"
	fi
	# Create a menu of choices and have the user select one.
	select PIN_CHANGE_INTERRUPT_PORT in $PIN_CHANGE_INTERRUPT_PORTS
	do
		# Check if the selected component is actually valid.
		PIN_CHANGE_INTERRUPT_PORT=$(echo $PIN_CHANGE_INTERRUPT_PORTS | grep -w -o "$PIN_CHANGE_INTERRUPT_PORT")
		if [ -z "$PIN_CHANGE_INTERRUPT_PORT" ]; then
			# The selected component was not in the list of components, so the user is apparently a moron.
			echo -e -n "${RED}Invalid choice.  Try again. ${NO_COLOUR}"
		else
			# A legitimate option was selected, so we can go now.
			INT_PORT="$PIN_CHANGE_INTERRUPT_PORT"
			echo -e "${CYAN}Selected port $INT_PORT.\n${NO_COLOUR}"
			break
		fi
	done
	# Write setting to the configuration file.
	push_key ${CONFIG_FILE} "INT_PORT" "PORT_${INT_PORT}"

	# 20. Prompt the user to select the pin to use for the INT pin from MCP2515.

	# If we're reconfiguring an existing component, then we indicate what the existing configuration says.
	if [ -z "`pull_key ${CONFIG_FILE} \"INT_PIN\"`" ]; then
		echo -e "${GREEN}Please select which pin the Interrupt (INT) pin from the MCP2515 is connected to:${NO_COLOUR}"
	else
		echo -e "${GREEN}Please select which pin the Interrupt (INT) pin from the MCP2515 is connected to: (Currently: ${NO_COLOUR}${INT_PIN}${GREEN})${NO_COLOUR}"
	fi
	# Create a menu of choices and have the user select one.
	select PINS in 0 1 2 3 4 5 6 7
	do
		# Check if the selected component is actually valid.
		PINS=$(echo "0 1 2 3 4 5 6 7" | grep -w -o "$PINS")
		if [ -z "$PINS" ]; then
			# The selected component was not in the list of components, so the user is apparently a moron.
			echo -e -n "${RED}Invalid choice.  Try again. ${NO_COLOUR}"
		else
			# A legitimate option was selected, so we can go now.
			INT_PIN="$PINS"
			echo -e "${CYAN}Selected pin $INT_PIN.\n${NO_COLOUR}"
			break
		fi
	done
	# Write setting to the configuration file.
	push_key ${CONFIG_FILE} "INT_PIN" "PIN_${INT_PIN}"
fi

# We don't provide any UI for the bootloader start address, but write it to the configuration file for clarity.
echo -e "BOOTSTART=${BOOTSTART}" >> ${CONFIG_FILE}

# All done.

