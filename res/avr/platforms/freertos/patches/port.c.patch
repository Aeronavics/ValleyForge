--- port.c	2013-06-27 16:51:40.923483000 +1200
+++ port.c.new	2013-06-27 18:00:04.655543645 +1200
@@ -95,10 +95,10 @@
 #define portFLAGS_INT_ENABLED					( ( portSTACK_TYPE ) 0x80 )
 
 /* Hardware constants for timer 1. */
-#define portCLEAR_COUNTER_ON_MATCH				( ( unsigned char ) 0x08 )
-#define portPRESCALE_64							( ( unsigned char ) 0x03 )
+#define portCLEAR_COUNTER_ON_MATCH				((unsigned char) (1 << WGM12))
+#define portPRESCALE_64						((unsigned char) ((1 << CS11)|(1 << CS10)))
 #define portCLOCK_PRESCALER						( ( unsigned long ) 64 )
-#define portCOMPARE_MATCH_A_INTERRUPT_ENABLE	( ( unsigned char ) 0x10 )
+#define portCOMPARE_MATCH_A_INTERRUPT_ENABLE			((unsigned char) (1 << OCIE1A))
 
 /*-----------------------------------------------------------*/
 
@@ -434,9 +434,9 @@
 
 	/* Enable the interrupt - this is okay as interrupt are currently globally
 	disabled. */
-	ucLowByte = TIMSK;
+	ucLowByte = TIMSK1;
 	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
-	TIMSK = ucLowByte;
+	TIMSK1 = ucLowByte;
 }
 /*-----------------------------------------------------------*/
 
@@ -447,8 +447,8 @@
 	 * the context is saved at the start of vPortYieldFromTick().  The tick
 	 * count is incremented after the context is saved.
 	 */
-	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
-	void SIG_OUTPUT_COMPARE1A( void )
+	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
+	void TIMER1_COMPA_vect( void )
 	{
 		vPortYieldFromTick();
 		asm volatile ( "reti" );
@@ -460,8 +460,8 @@
 	 * tick count.  We don't need to switch context, this can only be done by
 	 * manual calls to taskYIELD();
 	 */
-	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal ) );
-	void SIG_OUTPUT_COMPARE1A( void )
+	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal ) );
+	void TIMER1_COMPA_vect( void )
 	{
 		vTaskIncrementTick();
 	}
