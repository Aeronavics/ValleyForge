#!/bin/bash

#	Copyright (C) 2011  Unison Networks Ltd
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Now we perform any platform specific configuration.
echo -e "${BOLD_CYAN}FreeRTOS specific configuration...\n${NO_COLOUR}"

# If this is a new component, create a separate section in the component configuration file for platform specific stuff.
if [ ${NEW} ]; then 
	echo -e "\n### PLATFORM (FreeRTOS) SPECIFIC ###\n" >> ${CONFIG_FILE}
fi

# 1. Ask if the user wants to include software timer functionality (an optional part of FreeRTOS).

# If we're reconfiguring an existing component, then we indicate what the existing configuration says.
if [ -z "`pull_key ${CONFIG_FILE} \"FREERTOS_IMPORT_SWTIMER\"`" ]; then
	echo -e -n "${GREEN}Do you wish to use FreeRTOS software timer functionality: (Y/N)${NO_COLOUR}"
else
	DEFAULT=$([ "${FREERTOS_IMPORT_SWTIMER}" == "1" ] && echo "Y" || echo "N")
	echo -e -n "${GREEN}Do you wish to use FreeRTOS software timer functionality: (Y/N) (Currently: ${NO_COLOUR}${DEFAULT}${GREEN})${NO_COLOUR}"
fi
# We loop continuously until the user enters a valid choice.
while :
do
	# Read a single character of user input.
	read -s -n 1 -p " "

	# If they responded YES, then configure the component to import the software timer file when generating code.  If NO, then configure the component not to.
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		# Set the flag importing the software timer file.
		echo -e "${REPLY}\n${CYAN}Importing software timer files.\n${NO_COLOUR}"
		push_key ${CONFIG_FILE} "FREERTOS_IMPORT_SWTIMER" "1"
		break
	elif [[ $REPLY =~ ^[Nn]$ ]]; then
		# Clear the flag importing the software timer file.
		echo -e "${REPLY}\n${CYAN}Not importing software timer files.\n${NO_COLOUR}"
		push_key ${CONFIG_FILE} "FREERTOS_IMPORT_SWTIMER" "0"
		break
	elif [[ $REPLY == $'\n' ]]; then
		# The user is apparently a moron.
		echo -e -n "${RED}Blank is not a choice.${NO_COLOUR}"
	else
		# The user is apparently a moron.
		echo -e -n "${REPLY}\n${RED}Invalid choice.  Try again.${NO_COLOUR}"
	fi
done

# 2. Ask if the user wants to include co-routine functionality (an optional part of FreeRTOS).

# If we're reconfiguring an existing component, then we indicate what the existing configuration says.
if [ -z "`pull_key ${CONFIG_FILE} \"FREERTOS_IMPORT_COROUTINE\"`" ]; then
	echo -e -n "${GREEN}Do you wish to use FreeRTOS co-routine functionality: (Y/N)${NO_COLOUR}"
else
	DEFAULT=$([ "${FREERTOS_IMPORT_COROUTINE}" == "1" ] && echo "Y" || echo "N")
	echo -e -n "${GREEN}Do you wish to use FreeRTOS co-routine functionality: (Y/N) (Currently: ${NO_COLOUR}${DEFAULT}${GREEN})${NO_COLOUR}"
fi
# We loop continuously until the user enters a valid choice.
while :
do
	# Read a single character of user input.
	read -s -n 1 -p " "

	# If they responded YES, then configure the component to import the co-routine file when generating code.  If NO, then configure the component not to.
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		# Set the flag importing the co-routine file.
		echo -e "${REPLY}\n${CYAN}Importing co-routine files.\n${NO_COLOUR}"
		push_key ${CONFIG_FILE} "FREERTOS_IMPORT_COROUTINE" "1"
		break
	elif [[ $REPLY =~ ^[Nn]$ ]]; then
		# Clear the flag importing the co-routine file.
		echo -e "${REPLY}\n${CYAN}Not importing co-routine files.\n${NO_COLOUR}"
		push_key ${CONFIG_FILE} "FREERTOS_IMPORT_COROUTINE" "0"
		break
	elif [[ $REPLY == $'\n' ]]; then
		# The user is apparently a moron.
		echo -e -n "${RED}Blank is not a choice.${NO_COLOUR}"
	else
		# The user is apparently a moron.
		echo -e -n "${REPLY}\n${RED}Invalid choice.  Try again.${NO_COLOUR}"
	fi
done

# 3. Ask the user which heap implementation they wish to use.

# If we're reconfiguring an existing component, then we indicate what the existing configuration says.
if [ -z "`pull_key ${CONFIG_FILE} \"FREERTOS_MEMMAN_FILE\"`" ]; then
	echo -e "${GREEN}Which memory (heap) manager would you like to use:${NO_COLOUR}"
else
	echo -e "${GREEN}Which memory (heap) manager would you like to use: (Currently: ${NO_COLOUR}${FREERTOS_MEMMAN_FILE##*/}${GREEN}})${NO_COLOUR}"
fi
# Create a menu of choices and have the user select one.
select FREERTOS_MEMMAN_FILE in ${FREERTOS_MEMMAN_FILES}
do
	# Check if the selected memory manager is actually valid.
	FREERTOS_MEMMAN_FILE=$(echo "${FREERTOS_MEMMAN_FILES}" | grep -w -o "$FREERTOS_MEMMAN_FILE")
	if [ -z "$FREERTOS_MEMMAN_FILE" ]; then
		# The selected memory manager was not in the list of options, so the user is apparently a moron.
		echo -e -n "${RED}Invalid choice.  Try again. ${NO_COLOUR}"
	else
		# A legitimate option was selected, so we can go now.
		echo -e "${CYAN}Selected memory manager '$FREERTOS_MEMMAN_FILE'.\n${NO_COLOUR}"
		push_key ${CONFIG_FILE} "FREERTOS_MEMMAN_FILE" "${FREERTOS_MEMMAN_FILE}"
		break
	fi
done

# Prompt the user that further manual configuration will be required, via the FreeRTOS config header.
echo -e "${BOLD_YELLOW}Further manual configuration will be required; edit the FreeRTOS configuration header file to meet your application's requirements.\n${NO_COLOUR}"

# All done.

