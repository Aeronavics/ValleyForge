* Add the ATmega328 to the targets list.  Actually, I think I mean the ATmega328, but maybe I don't: I mean whatever the MUX/PPM controller on the ArduPilot Mega is; look this up.  Actually, possibly belay that: the new Arduino's and hence the APMv2 might have a different MCU as the USB interface (and hence the MUX/PPM controller), in which case THAT should be added to the target list instead.

* res/arm should probably be renamed to res/omap, since different ARM processors have quite different peripherals, so 'arm' is not really sufficiently specific.  There are quite a few places this path will need to be updated though?

* DEFERRED - Add compatibility with existing Arduino compatible projects such as the APM.  Need to have a build configuration which disables the HAL, and instead uses the existing Arduino libraries, which I guess can be in lib somewhere?  Also, need to add support back in for *.cpp extensions, and whatever other extensions the Arduino wants to use.  Also, Arduino projects probably support source in nested folders, which we don't support at the moment?

* The HAL will need to provide a function to globally disable and enable interrupts as well.  I took out the inclusion of <avr/interrupt.h> from bootloader.c, so it won't compile now until a HAL replacement for the sei() and cli() functions is provided.

* The location of within EEPROM which the bootloader stores the Clean/Dirty flag in (SHUTDOWNSTATE_MEM?) needs to be set by the user in the component configuration.  Needed so that bootloader.c will compile.

* Implement the actual functionality of bootloader_module_isp.c; for now, all we want it to do is to register a GPIO interrupt for one of the push buttons.  Then when the button is pressed, it should set the firmware_finished flag, so that the bootloader will run the application.

* The interface for mem.h has a bunch of functions which take a pointer to the array of data to be written.  Since we are using C++, these should be changed to instead take a REFERENCE to the array of data to be written.  Similarly for anywhere else where this applies.

* Maybe should split the preprocess script up into different files?
