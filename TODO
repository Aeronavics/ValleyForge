* 	I deleted the file "config.cfg", since it contains things that shouldn't be under source control.  But now, when you run uavstart with "./bld/ uavstart", it complains:

		grep: /my/path/var/config.cfg: No such file or directory
		grep: /my/path/var/config.cfg: No such file or directory

If the configuration file isn't there, then it should produce it, and populate it with some defaults?  Oh, you then can't even set any configuration values, because setting the configuration values relies on the file already being there.

* At the moment, it's called the "UAV Toolchain".  Actually, the proper name of this project is the "'Valley Forge' Embedded Toolchain".  All the references to the "UAV Toolchain" should be replaced as such.  The 'Valley Forge' part is just a randomly chosen codename for the project (I have found in the past it is sensible to choose a random name for each project rather than trying to guess what it should be called, since this is liable to change), and the 'Embedded Toolchain' part reflects that it might not only end up being used for UAVs.

* Similarly, each instance of the toolchain will be for a distinct project, or 'system'.  The 'system' is composed of different 'components'.  Hence, where it says things like "current project", "PROJECT" or "aspect", that should say "current component" etc.

* Similarly, where it says "Which microprocessor would you like to code for?" should actually say "Which target would you like to code for?".  Technically, there are actually three different levels of similarity that different 'targets' may have:  Architecture (so all ARM v7 processors share the same 'architecture'); Microprocessor (so all OMAP4430 processors share the same 'microprocessor'); and Target (so a Pandaboard and a something-else-with-an-OMAP4430, share the same 'microprocessor' but AREN'T the same 'target' because they may have different peripherals).  So, knowing the 'target' is sufficient to specify also both the 'microprocessor' and 'architecture'.  At the moment, there isn't really any confusion here, because no two 'targets' share the same 'microprocessor', and just presenting a list of 'targets' to choose from is sufficient.  In the future, I guess the list of targets could plausibly get so big that the UI has to divide the list it presents the user with by first 'architecture', then 'microprocessor', but that doesn't matter for now.

* On a related note, the configuration file for each 'component' at the moment stores a field called 'Micro' and a field called 'compiler'.  Firstly, the key 'Micro' should be called 'target' (as above).  Secondly, the field 'compiler' is redundant and should be removed.  If the toolchain needs to look up which compiler to use with which target (and thus where the compiler binary will be located), there should be a configuration file in the bld directory which allows looking up that (for example) the ATmega2560 target requires the avr-gcc compiler (along with any other settings that might be required).  Thirdly, the key names probably either shouldn't start with capital letters (cf 'Micro' and 'compiler'), or should ALL start with capital letters.

* For the AVR32 architecture, the path which is stored in the configuration files is an absolute path rather than the path relative to the root toolchain directory.  This means that the configuration files for each component are currently not portable between computers.

* The tar file res/avr32comp.tar and the corresponding unpacked folder res/avr32comp should probably be moved inside the folder res/avr32.

* The directory res/Defaults should be renamed res/defaults.  Directory names with capital letters are inconvenient.  Oh, the same goes for all the directories in res.
